{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"Embedthis Ioto\u2122 Features","text":"<ul> <li>HTTP/1.1 server.</li> <li>HTTP/1.1 client.</li> <li>MQTT/3.1.1 client.</li> <li>JSON/5 parser and query engine.</li> <li>Embedded database (like local DynamoDB)</li> <li>Transparent DynamoDB database cloud synchronization.</li> <li>AWS IoT Integration with IoT Core, Shadows, Events and Rules.</li> <li>AWS service integration with S3, Lambda, Kinesis and CloudWatch.</li> <li>Transport Layer Security (TLS/SSL) with ALPN support.</li> <li>Safe, secure runtime core.</li> <li>Easy provisioning.</li> <li>OTA upgrading.</li> <li>Complete documentation.</li> <li>Extensive Samples.</li> <li>Full Source code.</li> </ul>","location":"features/"},{"title":"Feature Overview","text":"","location":"features/#feature-overview"},{"title":"AWS IoT Integration","text":"<ul> <li>AWS Iot Ready \u2014 Bring your own cloud.</li> <li>Capture device data and export to AWS.</li> <li>Send control plane data to AWS IoT shadows.</li> <li>Transparent database synchronization with AWS DynamoDB.</li> <li>Upload data and files to AWS S3 data lake.</li> <li>Store device logs, metrics in AWS CloudWatch.</li> <li>Generate and rotate IAM temporary access credentials.</li> <li>Call any AWS API via AWS SDK or more compact AWS REST SigV4 APIs.</li> <li>Keep an audit trail in CloudTrail.</li> </ul>","location":"features/#aws-iot-integration"},{"title":"MQTT Client","text":"<ul> <li>MQTT 3.1.1 support.</li> <li>TLS encryption with ALPN over port 443.</li> <li>Supports connect, publish, subscribe, ping and disconnect messages.</li> <li>Message quality of service for reliable delivery.</li> <li>Retained messages.</li> <li>High message throughput with exceptionally low overhead.</li> <li>Wait for delivery or acknowledgement options.</li> <li>Auto reconnect.</li> <li>Parallelism via fiber coroutines.</li> </ul>","location":"features/#mqtt-client"},{"title":"DynamoDB Local Database","text":"<ul> <li>High performance in-memory NoSQL document database.</li> <li>Red/black binary search indexes.</li> <li>JSON documents with in-memory query API.</li> <li>Controllable persistency locally and to the cloud on a per-table basis.</li> <li>Transparent bi-directional data synchronization with DynamoDB in the cloud. (like Global Tables).</li> <li>Unified data schema between device and cloud databases.</li> <li>Based on DynamoDB OneTable APIs and Schemas.</li> </ul>","location":"features/#dynamodb-local-database"},{"title":"HTTP Server","text":"<ul> <li>HTTP/1.0, HTTP/1.1 support.</li> <li>TLS/SSL 1.3 and Alpn support.</li> <li>URL actions that bind URLs to C functions.</li> <li>Configurable request routes and redirections.</li> <li>Supports bi-directional transfer chunk encoding to preserve keep-alive.</li> <li>Cookie and session management.</li> <li>Authentication and user management.</li> <li>Fully streaming API for dynamic input and output.</li> <li>Request tracing for HTTP request and response headers.</li> <li>Sand-box resource limits.</li> <li>Runtime configurable via JSON config files.</li> <li>HTML helpers for encoding, decoding and escaping content.</li> <li>JSON parser and query engine.</li> <li>Single-threaded, fiber coroutine event-based runtime.</li> </ul>","location":"features/#http-server"},{"title":"HTTP Client","text":"<ul> <li>HTTP/1.0, HTTP.1.1 client.</li> <li>Fully streaming API for dynamic input and output.</li> <li>Convenience JSON API for interacting with REST services.</li> <li>Single-threaded, fiber coroutine event-based runtime.</li> <li>TLS/SSL 1.3 with certificate verification controls.</li> </ul>","location":"features/#http-client"},{"title":"JSON Parser and Engine","text":"<ul> <li>JSON and JSON/5 support.</li> <li>JSON parser and renderer.</li> <li>JSON query engine.</li> </ul>","location":"features/#json-parser-and-engine"},{"title":"Safe Runtime","text":"<ul> <li>Fiber coroutines for non-blocking procedural programming model.</li> <li>Global memory error handler.</li> <li>Networking and TLS support.</li> <li>Logging framework \u2014\u2014 filter by source and/or message type.</li> <li>Safe strings, lists, hashing and buffer management.</li> <li>Portable, cross-platform O/S abstraction.</li> </ul>","location":"features/#safe-runtime"},{"title":"Performance","text":"<ul> <li>Tiny memory footprint. All-up is less than 200K code.</li> <li>Single-threaded fiber coroutines provide an elegant, non-blocking, procedural programming paradigm without resorting to ugly callbacks or complex threads.</li> <li>Web server request throughput (&gt; 9,300 requests per second on Raspberry PI 4).</li> </ul>","location":"features/#performance"},{"title":"Security","text":"<ul> <li>Sandbox limits.</li> <li>Safe portable runtime to protect against memory leaks and buffer overflows.</li> <li>Transport Layer Security (TLS/SSL).</li> </ul>","location":"features/#security"},{"title":"Developer Integration","text":"<ul> <li>Stand-alone Ioto program</li> <li>Embeddable Ioto library</li> <li>Easy, intuitive programming model</li> <li>Extensive C API</li> </ul>","location":"features/#developer-integration"},{"title":"Documentation","text":"<ul> <li>Full C API Documentation</li> <li>Cookbook of samples (cut and paste to get going)</li> <li>Tutorials</li> </ul>","location":"features/#documentation"},{"title":"Platform Support","text":"<ul> <li>Linux (2.6+)</li> <li>Windows (7+)</li> <li>MAC OS X (10.7+)</li> <li>FreeBSD (10.X+)</li> <li>FreeRTOS (pending)</li> <li>RIOT (pending)</li> </ul>","location":"features/#platform-support"},{"title":"Embedding Support","text":"<ul> <li>Supports ARM, MIPS, X86, X64, PPC, SH, Sparc processors</li> <li>Full cross-compilation support. Use Windows, Linux or Mac as build system</li> <li>Fine-grained control for conditional build and compilation</li> </ul>","location":"features/#embedding-support"},{"title":"Standards","text":"<ul> <li>MQTT 3.1.1</li> <li>RFC 2616 HTTP/1.1</li> <li>TLS 1.3</li> <li>RFC 1867 Multipart-mime upload</li> <li>OneTable Database Schema Specification</li> </ul>","location":"features/#standards"},{"title":"Ioto Licensing","text":"<p>The Ioto agent is licensed via a commercial license that provides you with the following benefits:</p> <ul> <li>The right to embed the Ioto agent software in your products.</li> <li>The right to develop and modify the software in your products.</li> <li>The ability to redistribute your products with the Ioto agent software.</li> <li>The ability to connect to the Ioto cloud service.</li> <li>The ability to keep your source code private.</li> <li>Apply security updates and upgrades.</li> <li>Receive priority support service plans.</li> </ul> <p>You may use Ioto provided you fully comply with the governing terms.</p> <ul> <li>Embedthis License Terms</li> </ul> <p>Please contact us at: licensing@embedthis.com if you have any licensing questions.</p>","location":"licensing/"},{"title":"Overview","text":"<p></p>","location":"overview/"},{"title":"Embedthis Ioto\u2122","text":"<p>Embedthis Ioto is an embedded agent for locally or remotely managing devices. It is tiny, but blazing fast and has an extensive suite of management protocols and capabilities.</p> <p>Ioto includes a HTTP web server, AWS IoT cloud integration, embedded database, MQTT client, HTTP client, JSON parsing, easy provisioning and OTA upgrading.</p> <p>Ioto can be used for local management via its embedded web server or it can be integrated with the cloud via comprehensive AWS IoT integration.</p>","location":"overview/#embedthis-ioto"},{"title":"Cloud Ready","text":"<p>Ioto is cloud ready and provides provides data synchronization with AWS IoT core, rules, and shadows and transparently replicates structured device data into AWS DynamoDB. It also captures logs into CloudWatch Logs, integrates with CloudWatch Metrics, and offers file and data upload to AWS S3.</p>","location":"overview/#cloud-ready"},{"title":"Modular and Configurable","text":"<p>If you only want an embedded web server, Ioto is easily configured to enable just the modules you need. You can configure Ioto to include ont the web server, or just the MQTT client, or you can enable full cloud management integration.</p>","location":"overview/#modular-and-configurable"},{"title":"Highly Optimized","text":"<p>Ioto is optimized for embedded device management via an evolved, high performance management runtime that delivers exceptional throughput and effective memory utilization. Ioto eliminates the ugliness of event callbacks and the complexity of threads by using fiber coroutines. Ioto is compact and is especially effective in reducing per-request CPU and memory overhead.</p> <p>Ioto has a tiny memory footprint of only 200K of code. It is ideal for Linux and FreeRTOS systems and is easily ported to other platforms.</p>","location":"overview/#highly-optimized"},{"title":"Deployed Widely","text":"<p>Ioto draws from our code base at Embedthis, where we have experience in providing the most widely deployed embedded web servers. Our software has been deployed in networking equipment, telephones, mobile devices, and consumer and office equipment worldwide in many hundreds of millions of devices.</p>","location":"overview/#deployed-widely"},{"title":"Components","text":"<p>Ioto provides the following components:</p> <ul> <li>HTTP/1.1 server with dynamic rendering, authentication, cookies, sessions and file upload</li> <li>HTTP/1.1 client</li> <li>MQTT/3.1.1 client</li> <li>Embedded database</li> <li>JSON/5 parser and query engine</li> <li>Transport Layer Security (TLS/SSL) with ALPN support</li> <li>AWS IoT Integration with IoT Core, Shadows, Events and Rules</li> <li>AWS service integration with S3, Lambda, Kinesis and CloudWatch</li> <li>Transparent Database synchronization to AWS DynamoDB (like Global Tables)</li> <li>Safe, secure runtime core</li> <li>Easy provisioning</li> <li>OTA upgrading</li> <li>User authentication</li> <li>Complete documentation</li> <li>Extensive Samples</li> <li>Full Source code</li> </ul>","location":"overview/#components"},{"title":"Want More?","text":"<p>To learn more about Ioto, please read:</p> <ul> <li>Ioto Developer Background</li> <li>Ioto Use Cases</li> <li>Ioto Web Site</li> <li>Ioto Download</li> <li>Embedthis Web Site</li> </ul>","location":"overview/#want-more"},{"title":"AWS Integration Guide","text":"<p>The Ioto agent is pre-integrated with a suite of AWS services to make the job of creating IoT enabled devices dramatically easier.</p> <p>All these integrations are optional and can be enabled or disabled via the config.json5 configuration file.</p>","location":"aws/"},{"title":"Features","text":"<ul> <li>Simply provision devices for management by AWS IoT</li> <li>Replicate and synchronize structured data to AWS DynamoDB.</li> <li>Generate IAM temporary access credentials to call AWS API services on the device.</li> <li>Use the compact AWS SigV4 REST APIs from the device.</li> <li>Send messages to AWS IoT and other services via MQTT.</li> <li>Upload data and files to AWS S3.</li> <li>Send control-plane data to AWS IoT Shadows.</li> <li>Store the Ioto log file in AWS CloudWatch.</li> <li>Capture device O/S logs and upload to AWS CloudWatch.</li> <li>Emit metrics to AWS CloudWatch metrics.</li> <li>Save an audit trail to AWS CloudTrail.</li> </ul>","location":"aws/#features"},{"title":"Calling AWS APIs","text":"<p>Ioto provides a convenience wrapper to make invoking AWS APIs using REST easier.</p> <p>Without this wrapper, invoking AWS APIs requires using either the bulky AWS C SDK or manually using the AWS SigV4 REST API which is tedious at best.</p> <p>The Ioto AWS API wrapper uses the SigV4 API but performs the SigV4 signing for you.</p>","location":"aws/apis/"},{"title":"Requirements","text":"<p>To use the AWS SigV4 API, you need to have AWS IAM access keys enabled in the device. See the section on AWS IAM Access Keys for details.</p>","location":"aws/apis/#requirements"},{"title":"API Quick Tour","text":"<p>To issue an AWS REST API, use the aws API:</p> <pre><code>Url *up = urlAlloc();\nint status = aws(up, \"us-east-1\", \"logs\", \"Logs_20140328.PutLogEvents\", data, dataLen, NULL);\n</code></pre> <p>This will issue a request to the specified AWS service (logs) in a region (us-east-1) and invoke the targeted service (Logs_20140328.PutLogEvents). This call will upload log data to CloudWatch logs.</p> <p>Under the hood, the aws API is calling awsSign and urlFetch.</p> <pre><code>char *signedHeaders = awsSign(region, service, target, \"POST\", \"\", NULL, body, bodyLen, headers);\nchar *url = sfmt(\"https://%s.%s.amazonaws.com/\", service, region);\nint status = urlFetch(up, \"POST\", url, body, bodyLen, signedHeaders);\n</code></pre> <p>The awsSign API will perform the required cryptographic signing of a request to be received by AWS.</p>","location":"aws/apis/#api-quick-tour"},{"title":"Cloud Auditing","text":"<p>It is best practice to enable AWS CloudTrail on your AWS device cloud account to track user and API changes and activity on your account.</p> <p>From the AWS Bible:</p>  <p>AWS CloudTrail is an AWS service that helps you enable operational and risk auditing, governance, and compliance of your AWS account. Actions taken by a user, role, or an AWS service are recorded as events in CloudTrail. Events include actions taken in the AWS Management Console, AWS Command Line Interface, and AWS SDKs and APIs.</p>  <p>Visibility into your AWS account activity is a key aspect of security and operational best practices. You can use CloudTrail to view, search, download, archive, analyze, and respond to account activity across your AWS infrastructure. You can identify who or what took which action, what resources were acted upon, when the event occurred, and other details to help you analyze and respond to activity in your AWS account. Optionally, you can enable AWS CloudTrail Insights on a trail to help you identify and respond to unusual activity.</p> <p>Ioto will automatically enable CloudTrail when creating a device cloud.</p>","location":"aws/cloudtrail/"},{"title":"S3 Bucket Name","text":"<p>Ioto will enable CloudTrail to log to an S3 bucket named: ioto-cloudtrail-logs-UUID</p>","location":"aws/cloudtrail/#s3-bucket-name"},{"title":"Ioto Device Clouds","text":"<p>Device clouds are management hubs from which you can centrally operate and manage a set or fleet of devices.</p> <p>Device Clouds are created in your AWS account and region to manage the day-to-day communications and management with your devices.</p> <p></p> <p>A device cloud stores device data and manages communications with your devices. By aggregating critical device data in one place, you can more easily manage your devices and extract important data analytics and intelligence from your device pool.</p> <p>When creating device clouds, the Builder will create the necessary AWS resources including a DynamoDB device database and service Lambda function in your AWS account.</p> <p>You can create one or more device clouds to segment your products and devices.</p>","location":"aws/device-clouds/"},{"title":"Data Privacy","text":"<p>The Device Cloud is created in your AWS account so you have total control and privacy regarding your device data. Device data goes directly from your devices to the Device Cloud in your account. The device data is not sent through EmbedThis servers or other AWS accounts. This is important as governments are increasingly requiring that data only be stored, processed and managed locally.</p> <p>Unlike other IoT services which store your device data in servers in their account, Ioto provides decreased latency by locating device data in your AWS account in a nearby region of your choosing. This lowers cost and boosts performance of your cloud-based management solution.</p>","location":"aws/device-clouds/#data-privacy"},{"title":"Device Cloud Services","text":"<p>The Ioto device cloud offers the following:</p> <ul> <li>Automatically provision Ioto-based devices with X.509 certificates for secure communications.</li> <li>Setup MQTT communications between devices and the cloud.</li> <li>Create and maintain a cloud-based device database store for centralized management and analytics.</li> <li>Transparently create and manage dedicated AWS IAM access keys for each device.</li> </ul>","location":"aws/device-clouds/#device-cloud-services"},{"title":"Device Certificates","text":"<p>Devices require X.509 certificates to securely connect and communicate with the cloud. The certificates are used to uniquely identify and authenticated devices and then to encrypt communications to prevent tampering or eavesdropping.</p> <p>Ioto will automatically create and distribute the required certificates as devices are assigned to a device cloud. This eliminates much of the pain of certificate distribution.</p>","location":"aws/device-clouds/#device-certificates"},{"title":"Device Messaging","text":"<p>During device provisioning, the Ioto service will setup the necessary AWS resources to enable secure efficient messaging via AWS IoT core using the MQTT protocol.</p> <p>MQTT is a messaging protocol for IoT. It is a lightweight publish/subscribe messaging transport that is ideal for connecting remote devices.</p> <p>When connected, your management applications can control devices, send commands and retrieve data using the MQTT messaging service.</p>","location":"aws/device-clouds/#device-messaging"},{"title":"Device Data Aggregation","text":"<p>Collecting, aggregating and sending device data to a central management store can be complex and costly. Ioto takes the pain out of exporting device data to the cloud by transparently synchronizing device data with the cloud.</p> <p>Device data written saved the device to the Ioto database will be transparently exported to the cloud. Similarly, data written to the cloud database will be distributed to appropriate devices as required. No programming is required.</p> <p>The database synchronization is full-duplex in that data can be modified in the device or in the cloud and it will be replicated to the other side. The synchronization is controllable on a per-device and per-table basis.</p> <p>This is similar to AWS Global Tables, but instead of acting inside AWS between AWS regions, it is between an AWS region and a device.</p> <p>The Ioto replicated device database is unique to Ioto and dramatically simplifies the creation of IoT solutions.</p>","location":"aws/device-clouds/#device-data-aggregation"},{"title":"Device Access Keys","text":"<p>Ioto can optionally create and manage AWS IAM access keys for your devices. AWS uses IAM access keys to authenticate and authorize actors on AWS resources. The Ioto device cloud can create specific IAM keys to enable devices to issue requests to the device cloud and AWS services.</p> <p>Ioto generates temporary IAM access keys that have tightly controlled access permissions. The keys are automatically distributed to devices and reissued as required.</p>","location":"aws/device-clouds/#device-access-keys"},{"title":"Device Logging","text":"<p>If required, device logs and files can be captured and sent to AWS CloudWatch logs for storage, analysis and governance.</p> <p>The Ioto agent can be configured without coding, to capture any O/S log or program output and send it to CloudWatch Logs. The Ioto agent log is similarly exportable.</p>","location":"aws/device-clouds/#device-logging"},{"title":"Device Metrics and Analytics","text":"<p>AWS provides a comprehensive metric service via CloudWatch Metrics. The Ioto agent can emit metrics that will be captured by the device cloud and managed by CloudWatch.</p> <p>Using these metrics, you can create detailed device analytics and dashboards to focus on any aspect of your device or fleet performance.</p>","location":"aws/device-clouds/#device-metrics-and-analytics"},{"title":"Account Audit","text":"<p>When your device cloud is created, Ioto configures and enables CloudTrail which captures and audit trail of all activity on your account and device cloud.  This records a complete record to AWS S3 so you can reliably audit operations and determine root cause of any security incidents.</p>","location":"aws/device-clouds/#account-audit"},{"title":"IAM Access Keys","text":"<p>Ioto can automatically generate and provision IAM access keys so you can interact with any AWS service from your device.</p> <p>The IAM keys are temporary access keys that expire each hour. Ioto will automatically refresh these keys as required.</p>","location":"aws/keys/"},{"title":"Enabling IAM Keys","text":"<p>To enable generation of temporary IAM keys, set the <code>keys</code> property of the <code>services.cloud</code> property in the config.json5 configuration file to true.</p> <pre><code>{\n    services: {\n        cloud: {\n            keys: true\n        }\n    }\n}\n</code></pre> <p>When the keys property is set to true, Ioto will retrieve from your device cloud a set of temporary IAM credentials that can be used to sign AWS API requests using the Ioto aws APIs or to use with the AWS C API SDK.</p> <p>Ioto saves these keys for you in the Ioto agent structure:</p> <pre><code>struct Agent {\n    cchar *awsRegion;          /**&lt; Default AWS region */\n    cchar *awsAccess;          /**&lt; AWS temp creds */\n    cchar *awsSecret;          /**&lt; AWS cred secret */\n    cchar *awsToken;           /**&lt; AWS cred token */\n    Time awsExpires;           /**&lt; AWS cred expiry */\n}\n</code></pre> <p>These will be automatically refreshed 20 minutes before expiring, so you can rely on using these keys to be valid for 20 minutes.</p>","location":"aws/keys/#enabling-iam-keys"},{"title":"IAM Role","text":"<p>The generated keys are based on the Device Cloud IAM role in the device cloud. This defaults to the IAM role named: <code>IotoDeviceAccess</code>. However, you can change this using the Builder Site to any custom role you choose.</p> <p>You should follow the principle of least privilege and ensure you scope all privileges granted to your devices are scoped to specific resources and only granting access to AWS APIs that are absolutely required.</p>","location":"aws/keys/#iam-role"},{"title":"API Quick Tour","text":"<p>To force a regeneration of the IAM access keys, use ioGetKey(0).</p> <pre><code>ioGetKey(0);\n</code></pre>","location":"aws/keys/#api-quick-tour"},{"title":"Log File Exports","text":"<p>The Ioto agent can export O/S logs and files from the local device into AWS CloudWatch logs for secure cloud-side storage.</p> <p>Ioto log capture offers two capabilities:</p> <ul> <li>Export and save the Ioto Log to CloudWatch</li> <li>Capture and export any device O/S log file to CloudWatch</li> </ul>","location":"aws/logs/"},{"title":"Enabling Cloud Logs","text":"<p>To enable exporting log files to the device cloud, set the services.logs property in the config.json5 file to true.</p> <pre><code>{\n    services: {\n        cloud: {\n            keys: true,\n            logs: true\n        }\n    }\n}\n</code></pre> <p>To export logs, you must have the keys property set to true to enable generation of the IAM access keys that grant access to AWS CloudWatch.</p>","location":"aws/logs/#enabling-cloud-logs"},{"title":"Exporting the Ioto Log","text":"<p>By default, the Ioto trace log is saved to /var/log/ioto.log.</p> <p>To save this to the cloud, change the trace.path property in the config.json5 file to be set to \"cloud\".</p> <pre><code>    trace: {\n        path: 'cloud'\n        group: 'log-group-name',\n        stream: 'log-stream-name',\n    }\n</code></pre> <p>This will cause all messages sent to the Ioto log to be saved to the specified CloudWatch group and stream name. If the group and stream are unset, they default to: \"Ioto\" and \"agent\".</p>","location":"aws/logs/#exporting-the-ioto-log"},{"title":"Enabling O/S Log File Export","text":"<p>Ioto can monitor, capture and export any file to S3. Ioto will monitor the length of the file and if new data is written to the log, it will be efficiently captured and written to CloudWatch.</p> <p>To configure log files for monitoring, define the log files in the logs.files property of the config.json5 configuration file. For example:</p> <pre><code>{\n    logs: {\n        files: [\n            { path: '/var/log/sys*log', group: 'ioto', stream: '{hostname}' }\n        ],\n    }\n}\n</code></pre> <p>The files property contains any number of log definitions. Each definition specifies the local filename and the destination CloudWatch group and stream name.</p> <p>The file pathname may contain the wild cards \"*\" and \"?\". This is useful for log files that have a varying portion such as a date or version component in the name.</p> <p>The stream property can use tokens such as \"{hostname}\" which is expanded at runtime with the local hostname of the device.</p>","location":"aws/logs/#enabling-os-log-file-export"},{"title":"CloudWatch Metrics","text":"<p>AWS CloudWatch is a monitoring and management service that provides data and actionable insights to monitor devices and get a unified view of operational health.</p> <p>The Ioto agent provides an easy way to generate custom metrics for capture by AWS CloudWatch so you can track critical device performance and information.</p>","location":"aws/metrics/"},{"title":"API Tour","text":"<pre><code>rmetrics(\"Fan Temperature\", \"Acme/Rocket\", \"Fan\", \"Temp\", \"int\", 101, \"Fan\", \"string\", \"fan-0\", NULL);\n</code></pre> <p>This would emit the metric \"fan-0\" temperature is 101 degrees. After this call, CloudWatch or the EmbedThis builder UI can display the fan temperature graph over time.</p>","location":"aws/metrics/#api-tour"},{"title":"The rmetrics API","text":"<p>The arguments of the rmetrics API are:</p> <pre><code>PUBLIC void rmetrics(cchar *message, cchar *namespace, cchar *dimensions, cchar *values, ...);\n</code></pre> <p>The message is any identifying message you like to emit. The namespace is the CloudWatch custom namespace name for your metrics.</p> <p>The metric values are expressed as triples comprised of: Name, Type and Value.</p> <p>The name is the metric name. The type can be \"int\", \"int64\", \"boolean\" or \"string\".</p> <p>You can write multiple metrics with one call by repeating supplying multiple value triples.</p> <p>The dimensions are vectors that qualify the metric. CloudWatch treats each unique combination of dimensions as a separate metric. Enter the dimensions as a comma separated list of dimensions. For example:</p> <p>dimensions = \"Process,Module\"</p> <p>The values of the dimensions must be added to your value triplets.</p> <p><pre><code>rmetrics(\"Fan Temperature\", \"Acme/Rocket\",\n    \"InFlowTemp\", \"int\", 101,\n    \"OutFlowTemp\", \"int\", 143,\n    \"Process\", \"int\", 42,\n    \"Module\", \"string\", \"input\",\n    NULL);\n</code></pre> }</p>","location":"aws/metrics/#the-rmetrics-api"},{"title":"MQTT","text":"<p>MQTT is a messaging protocol for (IoT). It is designed as a lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth.</p> <p>The Ioto MQTT support is an efficient MQTT client that is ideal for connecting to the cloud.</p>","location":"aws/mqtt/"},{"title":"MQTT Features","text":"<ul> <li>MQTT 3.1.1 support</li> <li>Connect, publish, subscribe, ping and disconnect messages.</li> <li>TLS encryption with ALPN over port 443 to get through firewalls.</li> <li>Message quality of service for reliable delivery.</li> <li>Retained messages.</li> <li>High message throughput with exceptionally low overhead.</li> <li>Wait for delivery or acknowledgement options.</li> <li>Resilient reconnect on network interruptions.</li> <li>Automatic configuration after cloud provisioning.</li> <li>Parallelism via fiber coroutines. No ugly callbacks or complex threads.</li> <li>Tiny footprint of 8K code.</li> </ul>","location":"aws/mqtt/#mqtt-features"},{"title":"MQTT Configuration","text":"<p>The Ioto MQTT connection is opened automatically based on the config/config.json5 configuration settings:</p> <pre><code>mqtt: {\n    cert: 'certs/mqtt.crt',\n    key: 'certs/mqtt.key',\n    ca: 'certs/root.crt',\n    client: 'my-device-client-id',\n    endpoint: 'https://',\n    port: 1883\n}\n</code></pre> <p>These properties describe the MQTT endpoint, port, certificates and keys to use to establish communications with an MQTT broker.</p> <p>If using AWS Iot as your broker, Ioto can automatically configure the MQTT connected based on the properties below:</p> <pre><code>mqtt: {\n    cert: 'auto',\n    key: 'auto',\n    client: 'auto',\n    endpoint: 'auto',\n    port: 443,\n    alpn: 'x-amzn-mqtt-ca',\n    ca: 'certs/aws.crt',\n}\n</code></pre> <p>See MQTT Configuration Properties for more details.</p>","location":"aws/mqtt/#mqtt-configuration"},{"title":"References","text":"<p>MQTT 3.1.1 spec</p>","location":"aws/mqtt/#references"},{"title":"Provisioning","text":"<p>Provisioning is the process of providing devices with the necessary certificates and credentials to securely connect with cloud-based services.</p> <p>For devices to securely connect to the cloud, they require X.509 certificates so that they can be uniquely identified and authenticated by the cloud service. Once authorized, the certificates are used by the TLS protocol to securely encrypt all communications.</p>","location":"aws/provisioning/"},{"title":"Ioto Provisioning","text":"<p>Ioto has an automated provisioning process that takes the pain out of device provisioning and certificate distribution for the user.</p> <p>There are two primary provisioning patterns:</p> <ul> <li>User Claimed Devices</li> <li>Pre-Claimed Devices</li> </ul>","location":"aws/provisioning/#ioto-provisioning"},{"title":"User Claimed Devices","text":"<p>User claimed devices will register with an Ioto cloud when manufactured and then wait for a user to \"claim\" the device from the device cloud.</p>","location":"aws/provisioning/#user-claimed-devices"},{"title":"Pre-Claimed Devices","text":"<p>Pre-claimed devices are those that are configured and claimed by an Ioto device cloud during the device manufacturer. Pre-claimed devices are suitable for proprietary devices or projects where the devices are not distributed generally for resale.</p> <p>Pre-claimed devices provisioned with certificates when manufactured or first configured.</p>","location":"aws/provisioning/#pre-claimed-devices"},{"title":"Provisioning Lifecycle","text":"<p>Ioto provisioning is accomplished in several phases during the device lifecycle.</p> <ul> <li>Device Serialization</li> <li>Device Registration</li> <li>Device Claiming</li> <li>Device Connection</li> </ul> <p></p>","location":"aws/provisioning/#provisioning-lifecycle"},{"title":"Device Serialization","text":"<p>For secure operation it is essential that each device can be uniquely identified. Most devices are created with a serial number that may include the product code, manufacturing batch number and individual serial number. However, while this serial number may be unique, it can be easily guessed because serial numbers typically follow a predictable format.</p> <p>Instead of using the existing serial number, Ioto uses a random, unique claim ID (UCI) that is a random, 80-bit number that is not guessable and does not follow a predictable pattern. When paired with the product ID it is used as a unique claim ticket for users to claim devices for management.</p> <pre><code>JT08FFQXWQ\n</code></pre> <p>The 10 letter UCI results in over 1 quadrillion numbers (32^10). Ioto claim IDs can be any length, but we recommend at least 10 letters.</p> <p>During manufacturer, each device should be given a UCI that identifies the device to the service and is saved in the device.json5 configuration file on the device.</p> <p>For User-Claimed devices, the UCI should be printed on the device label and be clearly identified as the Claim ID. The Claim ID can also be represented as a QR code if you choose to develop a mobile app for users to claim devices. (See Claiming below).</p> <p></p>","location":"aws/provisioning/#device-serialization"},{"title":"Creating the UCI","text":"<p>You have two alternatives when creating the UCI depending on how you operate your production process. Regardless of which method you choose, the end result is the Ioto device.json5 configuration file is updated with the UCI in the id property.</p> <pre><code>{\n    \"id\": \"JT08FFQXWQ\",\n    \"productToken\": \"01G8YJKKRNTHW213TRZYX3YH0M\"\n}\n</code></pre> <p>The productToken property in the device.json5 file is generated by the Builder Site when you define your product.</p> <p>There are several ways to create the UCI including:</p> <ul> <li>Manually configure the UCI in the device.json5</li> <li>Create unique firmware for each device</li> <li>Dynamically provision the UCI in each device</li> </ul>","location":"aws/provisioning/#creating-the-uci"},{"title":"Manually Creating the UCI","text":"<p>If you have a very small production run of devices, you can manually create the UCI with unique values for each device. You can simply edit the device.json5 with the required values.</p> <p>With any significant production volumes, you will want an automated process.</p>","location":"aws/provisioning/#manually-creating-the-uci"},{"title":"Unique Firmware","text":"<p>If you create unique firmware for each device, you can set the UCI in the device.json5 when you create the firmware.</p> <p>To create the UCI, you can either run the ioto process with the --gen-id argument or you can create a simple program that calls the cryptID API from the libioto library. See the ./factory/serialize.c sample for an example.</p>","location":"aws/provisioning/#unique-firmware"},{"title":"Dynamic UCI","text":"<p>If you are using identical firmware for each device, you can provision the UCI by having the Ioto agent in your device, connect to a serialization service during manufacturer. The serialization service will generate and provide the UCI to the agent that will then persist it to the device.json5 configuration file.</p> <p>This generation should be integrated with your label creation process in manufacturer so that the UCI in the device.json5 matches that product label for the device.</p> <p>The serialization service should listen for client requests on a HTTP endpoint and provide the UCI as the response. The address of the serialization service should be set in the Ioto agent api.serialize property in the config.json5 configuration file.</p> <p>The Ioto agent includes a sample serialization service in the ./factory/serialize.c file.</p>","location":"aws/provisioning/#dynamic-uci"},{"title":"Device Registration","text":"<p>Before leaving the factory, when the device first powers on during system test, the Ioto agent will start and connect to the Embedthis Ioto cloud service to register itself. This requires that your devices have an opening in the firewall to connect out to https://admin.embedthis.com.</p> <p>The agent will send the contents of the device.json5 over an encrypted TLS connection to the Ioto cloud service. This registration request includes the device UCI and the product ID. Once received and validated, the Ioto cloud service will save the information in the Ioto device registration database.</p> <p>The Ioto agent then awaits for a user to claim the device.</p>","location":"aws/provisioning/#device-registration"},{"title":"Device Claiming","text":"<p>When a user purchases or installs a device with the Ioto agent, they can \"claim\" the device to manage it.</p> <p>When creating a device cloud, Ioto creates a device manager web site for your cloud. The Ioto Device Manager is a generic (white-label) device manager for your devices. It can be extensively customized with your logo, product name and device specific screens and panels. Use the Builder to customize the Device Manager to suit your needs.</p> <p>The user claims their device by logging onto the device cloud manager web site and claims the device using the UCI printed on the device label.</p> <p>They enter the device claim code into a form on the manager site. The device manager then provisions the necessary X.509 certificates and AWS IoT resources required to support and manage the device.</p>","location":"aws/provisioning/#device-claiming"},{"title":"Device Connection","text":"<p>When the device is unclaimed, the Ioto agent will regularly check with the Ioto service to see if it has been claimed. In this state, it is \"unmanaged\" and awaiting orders.</p> <p>The Ioto agent will check the Ioto service immediately on power-on, and then every 5 seconds with an exponentially increasing delay period up to a defined limit. If the device is rebooted, the polling process recommences.</p>","location":"aws/provisioning/#device-connection"},{"title":"Uploading Data to S3","text":"<p>Ioto provides convenience APIs to make uploading data or files to S3 easy.</p>","location":"aws/s3/"},{"title":"Features","text":"<ul> <li>Upload files to S3</li> <li>Upload dynamically generated data to S3</li> </ul>","location":"aws/s3/#features"},{"title":"API Quick Tour","text":"","location":"aws/s3/#api-quick-tour"},{"title":"Uploading a File","text":"<p>To upload a file, use awsPutFileTS3:</p> <pre><code>status = awsPutFileToS3(\"us-east-1\", \"MyBucket\", \"file.dat\", \"./file.data\");\n</code></pre> <p>This call will upload the file \"./file.data\" to the bucket \"MyBucket\" on S3. The file will be saved in the bucket as \"file.dat\". The returned status will be a HTTP status code of 200 if successful.</p>","location":"aws/s3/#uploading-a-file"},{"title":"Uploading a Data Block","text":"<p>To upload a data block to AWS S3, use the awsPutToS3 API.</p> <pre><code>char data[1024];\nint status = awsPutToS3(\"us-east-1\", \"MyBucket\", \"filename\", data, sizeof(data));\n</code></pre> <p>This will upload the data buffer to the given \"filename\" in the \"MyBucket\" on S3. The returned status will be a HTTP status code of 200 if successful.</p> <p>When executing, this call will block the current fiber, but other fibers continue to run. When complete, the call will return.</p>","location":"aws/s3/#uploading-a-data-block"},{"title":"Enabling IAM Keys","text":"<p>To enable generation of temporary IAM keys, set the <code>keys</code> property of the <code>services.cloud</code> property in the config.json5 configuration file to true.</p> <p>When defined, Ioto will retrieve from the Ioto service a set of IAM credentials that can be used to sign AWS API requests. These are based on the IAM role <code>IotoDeviceAccess</code> in the device cloud.</p>","location":"aws/s3/#enabling-iam-keys"},{"title":"Shadow State","text":"<p>The AWS IoT Device Shadow service stores device state in objects called \"shadows\".</p> <p>Shadows are capable of handling intermittently connected devices. When a device is not connected, updates to the shadow state in the cloud are stored until the device is next connected. Then, once connected, the changes are sent to the device for action.</p> <p>Ioto makes it easy to use shadow state by automatically connecting to the AWS IoT Shadow service and by providing an easy get/set API.</p>","location":"aws/shadow/"},{"title":"Features","text":"<ul> <li>Local copy of AWS Iot Device Shadow in JSON tree</li> <li>Convenience API to get / set shadow state properties</li> <li>Controllable state synchronization with AWS IoT Shadows</li> <li>Local persistency of shadow state.</li> </ul>","location":"aws/shadow/#features"},{"title":"Overview","text":"<p>The Ioto agent automatically initializes an AWS Shadow state connection and subscribes to the required MQTT topics for data synchronization.</p> <p>When shadows updates are received from the cloud, the agent saves these in a local shadow state file called \"shadow.json5\". When the agent reboots, the local shadow state is read to be immediately available while the AWS cloud shadows are consulted for any updates.</p>","location":"aws/shadow/#overview"},{"title":"API Quick Tour","text":"<p>To get the value of a property from the device shadow state, call ioGetShadow.</p> <pre><code>data = ioGetShadow(\"temperature\", 0);\ndata = ioGetShadow(\"temperature\", \"101\");\n</code></pre> <p>The last argument can be a default value to return if the property is not found</p> <p>To set the value of a property and pass that update to AWS IoT Shadows, call ioSetShadow.</p> <pre><code>ioSetShadow(\"temperature\", \"99\", 0);\n</code></pre> <p>This will update the value and perform a lazy save to persistent store and publish to the cloud.</p> <p>To force an immediate save and publish, set the last argument to 1.</p> <pre><code>ioSetShadow(\"temperature\", \"99\", 1);\n</code></pre> <p>Alternatively, call ioSaveShadow:</p> <pre><code>ioSaveShadow();\n</code></pre>","location":"aws/shadow/#api-quick-tour"},{"title":"Database Synchronization","text":"<p>Ioto takes the pain out of exporting device data into the cloud by automatically and transparently synchronizing data between your devices and a cloud device database.</p> <p>Ioto will synchronize data from the device cloud DynamoDB database in your AWS account and the embedded database in your devices. This is similar to AWS Global Tables, but instead of between AWS regions, it is between an AWS region and a device.</p> <p>The database synchronization is full-duplex in that data can be modified in the device or in the cloud and it will be replicated to the other side. The synchronization is controllable on a per-table basis.</p>","location":"aws/sync/"},{"title":"Databases","text":"<p>The Ioto service creates a DynamoDB table called ioto in each device cloud. A device cloud is created by the Embedthis Builder for your account to host your device data in an AWS account and region of your choosing. The ioto database table contains the device data for all connected devices in that cloud.</p> <p>The Ioto device agent creates a local database to hold structured data for the device.</p> <p>These two databases are then connected and changes are replicated between device and cloud to keep them in sync.</p>","location":"aws/sync/#databases"},{"title":"Why Synchronization","text":"<p>The Ioto Database Synchronization service dramatically eases the task of centralizing the data management of a pool of devices. Each device can store data locally and it will be transparently, efficiently and automatically replicated to the cloud. Once in the cloud, it can be easily interrogated and queried for analytics, operational control and intelligence.</p>","location":"aws/sync/#why-synchronization"},{"title":"How It Works","text":"<p>To replicate cloud-side data, the Ioto service uses DynamoDB streams to capture modifications made to the table data. The stream is connected to an Ioto service Lambda which posts MQTT messages to a special topic that is only known to the device.</p> <p>The Ioto device agent subscribes to this topic and receives MQTT messages containing the changed data. The agent then applies those changes to the local database.</p> <p>In reverse, the Ioto agent registers a database trigger that is called whenever local changes are made to the device's database. When the trigger is invoked, the agent sends an MQTT message with the changes to the Ioto service that updates the cloud database.</p> <p>When the device is rebooted, it sends a \"sync\" message to the Ioto service to retrieve all changes made to the cloud database since the last change notification was received from the cloud. In this way, changes made while the device is offline are not lost.</p>","location":"aws/sync/#how-it-works"},{"title":"Controlling Replication","text":"<p>The Ioto DynamoDB table (ioto) and the Ioto agent database both use a OneTable schema that defines how items are stored, what indexes are used and the application models (entities). For example:</p> <p>The control property of the schema defines which tables are replicated and in which direction.</p> <p>For each model (entity) in the schema, you can create an entry in the control property that specifies if items of that model should exist and how they should be replicated.</p> <p>The enable property can be set to 'cloud' if the items of that type should exist in the cloud database, set to 'device' if the items should exist in the device and 'both' if they should exist in both databases. The default is 'both'.</p> <p>The sync property defines the synchronization direction. Set to 'up' to indicate the device data should be synchronized from the device up to the cloud. Set to 'down' to indicate the cloud data should be replicated down to the device and set to both to replicate in both directions.</p> <pre><code>const DeviceSchema = {\n    control: {\n        /*\n            Where the model is enabled (cloud, device, both. Default is both)\n            Synchronization direction. Up to the cloud, down or both. Default is none.\n        */\n        Status:  { enable: 'cloud' },\n        Fault:   { sync: 'up' },\n    },    \n    models: { },\n}\n</code></pre> <p>To design for effective synchronization, it is best to have the \"sync\" direction be either \"up\" or \"down\". You should only select \"both\" for models that are not transactionally critical as changes from the cloud or device may overwrite changes coming from the other directions.</p> <p>Synchronization is done on a per-item basis and not field by field.</p>","location":"aws/sync/#controlling-replication"},{"title":"Software Updates","text":"<p>It is highly desirable to be able to update and upgrade the software in your devices so you can deploy new features, patch security vulnerabilities and improve performance.</p> <p>For Ioto devices, via the Builder, you can define software updates that will be managed and delivered Over-The-Air (OTA) to your devices.</p> <p>Using the Builder OTA update manager, you can selectively deploy updates to any desired subset of your device population.</p> <p>Updates can be published that will be applied to your devices according to a distribution policy. In this way, you can selectively update all your device or specific subsets as you require.</p> <p></p> <p>See Builder Software Updates for details on how to configure software updates.</p>","location":"aws/updates/"},{"title":"Update Selection","text":"<p>Each day, the Ioto agent will connect to the device cloud for a \"checkin\". During this request, the agent will submit the device.json contents to the device cloud to see if an update is available for this device.</p> <p>The device cloud will retrieve the most recent updates and check the updates in reverse version order and select the first matching update for the device.</p> <p>The device cloud service will evaluate the distribution policy expression when the device checks-in and if the policy matches for the device, the URL for the update image will be returned to the Ioto agent. The agent will then fetch the update image and verify the integrity of the update image. If verified, the scripts/update script is invoked to apply the update. If you are running the Agent on an RTOS, without scripting, you will need to watch and react to the the event device:update using the rWatch API.</p>","location":"aws/updates/#update-selection"},{"title":"Software Version","text":"<p>The current version for your device is defined via the version property in the config.json5 configuration file. NOTE: your device is versioned separately to the Ioto agent itself which has its own version string.</p> <p>The version numbers must be compatible with the SemVer 2.0 version specification.</p>","location":"aws/updates/#software-version"},{"title":"Device Cloud","text":"<p>Update images are stored in AWS S3 in your device cloud AWS account. When defining updates, you select the relevant device cloud to store and apply the updates. If you have multiple clouds, you will need to define updates in each cloud.</p>","location":"aws/updates/#device-cloud"},{"title":"Checking for Updates","text":"<p>The Ioto agent will issue a checkin HTTP request to the device cloud each day to query if there are any relevant updates for the device. This request submits the device.json5 file and receives back a URL that refers to the update image.</p> <p>If there is an applicable update, Ioto will download the image, verify the contents and then signal that an update is ready.</p> <p>Your embedded code can watch for update events via the rWatch API. Alternatively, you can customize the scripts/update shell script that will be passed the local filename containing the update.</p>","location":"aws/updates/#checking-for-updates"},{"title":"Database Overview","text":"<p>The Ioto agent database (DB) is an ultra high performance NoSQL database for embedded applications. It supports fast, in-memory, local data access and optional transparent synchronization of data to and from the cloud. It is modeled after AWS DynamoDB and the OneTable access library.</p> <p>The Ioto database stores items as JSON documents of arbitrary complexity. Data items are organized into entity tables via an entity schema that specifies data fields, types, attributes and validations.</p> <p>DB uses Red/black binary search indexes and has controllable local persistency to disk and to the cloud on a per-table basis.</p>","location":"database/overview/"},{"title":"Database Features","text":"<ul> <li>High performance NoSQL management document database.</li> <li>JSON document items with flexible query API.</li> <li>Efficient import and export of database items.</li> <li>Red/black binary search indexes.</li> <li>Simple, non-waiting API.</li> <li>Controllable persistency with change triggers.</li> <li>Transparent bi-directional data synchronization with the cloud.</li> <li>Unified data schema between device and cloud databases.</li> <li>Based on AWS DynamoDB and DynamoDB OneTable.</li> </ul>","location":"database/overview/#database-features"},{"title":"Default Database","text":"<p>The Ioto agent will open a default database for general purpose use. This database is loaded from the file \"state.db\" using the schema file \"schema.json5\". The filename and schema file can be modified via the config.json5 properties under the database key. Most users would typically use this database and would not need to open another database instance.</p> <p>The database instance reference is stored in the global ioto object in the db property.</p> <pre><code>ioto-&gt;db\n</code></pre>","location":"database/overview/#default-database"},{"title":"JSON documents","text":"<p>The database stores items as JSON documents that are a nested collection of properties to arbitrary depth. As JSON is one of the most prevalent data exchange formats, storing data in JSON greatly reduces exchange costs.</p> <p>Ioto includes a powerful JSON query engine that you can use to query and manipulate JSON documents.</p>","location":"database/overview/#json-documents"},{"title":"Data Types","text":"<p>All data types are stored internally as strings to optimize data transfer. Return values from database APIs typically return static strings that you do not need to free (const char*). To convert numbers, use the safe runtime conversion routines: stoi() and stoiradix().</p>","location":"database/overview/#data-types"},{"title":"API Quick Tour","text":"<p>If you do choose to open another datatabase rather than use the default database, use dbOpen:</p> <pre><code>Db *db = dbOpen(\"./data.db\", \"./schema.json5\", 0);\n</code></pre> <p>The dbOpen API will open the named database and schema.  Data is loaded from the database file and stored in-memory. The schema file describes the application entities, data fields and indexes. Read more about Schemas.</p>","location":"database/overview/#api-quick-tour"},{"title":"Creating an Item","text":"<p>Use dbCreate to create an item:</p> <pre><code>CDbItem *item = dbCreate(ioto-&gt;db, \"Fault\", DB_PROPS(\n    \"timestamp\", rGetTime(),\n    \"source\", \"bluetooth\",\n    \"severity\", \"warn\",\n    \"subject\", \"Failed to sync\",\n), NULL);\n</code></pre> <p>This creates an item in the database and returns a reference to the item. The item properties are provided using the DB_PROPS macro with key/value pairs for each property.</p> <p>Database items are documents that store item properties in JSON format using JSON types (Objects, arrays, strings, numbers, booleans and dates). Properties can be nested to arbitrary depth.</p> <p>Ioto includes a powerful JSON query engine that you can use to query and manipulate JSON documents.</p> <p>You can also specify the item properties using the DB_JSON macro. This is useful when you have nested item properties:</p> <pre><code>item = dbCreate(db, \"User\",\n    DB_JSON(\"{name: 'user', details: {role: '%s'}}\", role), NULL);\n</code></pre>","location":"database/overview/#creating-an-item"},{"title":"Retrieving Fields","text":"<p>To retrieve a field from an item, use dbGetField:</p> <pre><code>const char *id = dbGetField(item, \"id\");\n</code></pre> <p>This will retrieve a reference to the the \"id\" field from the previously read item.</p> <p>You can also read nested properties from within the item's JSON document.</p> <pre><code>cchar *errors = dbGetField(item, \"interfaces.bluetooth.if1.errors\");\n</code></pre>","location":"database/overview/#retrieving-fields"},{"title":"Reading Items","text":"<p>To read an item from the database, supply the required item key and call dbGet. The key can be the actual item key or it can be a set of fields that are used by the schema to create the key. See Value Templates for details.</p> <pre><code>CDbItem *item = dbGet(db, \"Fault\", DB_PROPS(\"id\", id), NULL);\n</code></pre> <p>When debugging, you can use the utility routine dbPrintItem to print the contents of an item:</p> <pre><code>dbPrintItem(item);\n</code></pre>","location":"database/overview/#reading-items"},{"title":"Finding Items","text":"<p>To retrieve a set of matching items, use dbFind:</p> <pre><code>DbGrid *items = dbFind(db, \"Fault\", DB_PROPS(\"severity\", \"critcal\"), 0);\n</code></pre> <p>You can provide one or more properties to be used as a filter. Items will be returned that match all supplied properties.</p> <p>When finished with the items, you must free the returned grid via dbFreGrid.</p> <pre><code>dbFreeGrid(items);\n</code></pre> <p>To iterate over the item list, use ITERATE_ITEMS:</p> <pre><code>DbItem *item;\nint    n;\nfor (ITERATE_ITEMS(items, item, n)) {\n    dbPrintItem(item);\n}\n</code></pre> <p>You can also use DB_JSON instead of DB_PROPS to provide query parameters as json:</p> <pre><code>items = dbFind(db, \"FAULT\", DB_JSON(\"{severity:'%s'}\", severity), 0);\n</code></pre> <p>The JSON can be provided as JSON/5 which allows single quotes around string values.</p>","location":"database/overview/#finding-items"},{"title":"Getting and Setting Fields","text":"<p>To get a single field from an item, use dbGet:</p> <pre><code>cchar *severity = dbGet(db, \"Fault\", \"severity\", DB_PROPS(\"id\", id), NULL);\n</code></pre> <p>To set a single field in an item, use dbSet:</p> <pre><code>DbItem *item = dbSetField(db, \"Fault\", \"severity\", \"info\", DB_PROPS(\"id\", id), NULL);\n</code></pre> <p>You can also use the type specific set routines: dbSetBool, dbSetDate, dbSetDouble and dbSetNum.</p>","location":"database/overview/#getting-and-setting-fields"},{"title":"Updating Items","text":"<p>To update multiple fields in an item, use dbUpdate:</p> <pre><code>item = dbUpdate(db, \"Fault\", DB_PROPS(\"id\", id, \"severity\", \"info\", \"subject\": \"Fault resolved\"), NULL);\n</code></pre>","location":"database/overview/#updating-items"},{"title":"Removing Items","text":"<p>To remove an item, use dbRemove:</p> <pre><code>dbRemove(db, \"Fault\", DB_PROPS(\"id\", id), NULL);\n</code></pre>","location":"database/overview/#removing-items"},{"title":"Pagination","text":"<p>When retrieving items from a large data set, you may need to paginate your results.</p> <p>You can specify a limit to the number of returned results via the <code>limit</code> param. The dbFind routine can take a next parameter that specifies where to begin returning results. The <code>next</code> parameter is actually the key of the last returned item and the search begins \"after\" that point.</p> <pre><code>cchar *next = NULL;\ndo {\n    DbGrid *grid = dbFind(db, NULL, NULL, DB_PARAMS(.next = next, .limit = 20));\n    next = dbNext(grid);\n    dbFreeGrid(grid);\n} while (next);\n</code></pre>","location":"database/overview/#pagination"},{"title":"Cloud Replication","text":"<p>You can transparentlyl replicate device data to the cloud using Ioto cloud synchronization. Data can be synchronized in either direction: from the cloud to the device, or from the device to the cloud.</p> <p>Replication is controllable on a per-model basis via the database schema. The schema Control property defines how to synchronize each model. You can \"enable\" an model to be stored in the cloud, in the device or in both places. You can also control the replication direction flow of changes to be \"up\" to the cloud, or \"down\" to the device.</p> <p>For each Model in the schema, a property under the control collection specifies where the model resides and how it should be synchronized.</p> <pre><code>{\n    control: {\n        Status:  { enable: 'cloud' },\n        Fault:   { sync: 'up' },\n    },  \n}\n</code></pre> <p>This enables the Status items to be stored only in the cloud whereas Fault items will be stored on the device and in the cloud and will be synchronized up from the device to the cloud.</p>","location":"database/overview/#cloud-replication"},{"title":"Configuration","text":"<p>You can configure the Ioto database via the config/config.json5 database property collection.</p> <p>See Database Configuration for details.</p> <pre><code>database: {\n    path: 'state/state.db',\n    schema: 'config/schema.json5',\n    maxJournalSize: '1mb',\n    maxJournalAge: '5mins',\n    maxSyncAge: '5secs',\n    maxSyncSize: '10k',\n},\n</code></pre>","location":"database/overview/#configuration"},{"title":"Debugging","text":"<p>Ioto provides a few routines that help with debugging DB API usage.</p> <ul> <li>dbPrint</li> <li>dbPrintItem</li> <li>dbPrintProperties</li> <li>jsonToString</li> </ul>","location":"database/overview/#debugging"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>DB API</p>","location":"database/overview/#api-reference"},{"title":"Database Persistency","text":"<p>The Ioto database operates in-memory with a lazy save to persistent storage.</p> <p>When changes are made to database items, a save to storage will be performed after a configurable delay as specified in the database.saveDelay property in the config.json5 file. This is set to 1 second by default.</p> <p>You can force a database save at any time via the dbSave API:</p> <pre><code>dbSave(db, NULL);\n</code></pre> <p>This will persist data changes to the database file specified via dbOpen. You can supply a filename as the second argument to save to a different (backup) database file.</p>","location":"database/persistency/"},{"title":"Database Replication","text":"<p>The Ioto agent database (DB) supports optional transparent synchronization of data to and from the cloud.</p> <p>The Ioto database is designed to be compatible with AWS DynamoDB so that it can easily replicate structured device data to the cloud. It is modeled after AWS DynamoDB and the OneTable access library.</p>","location":"database/replication/"},{"title":"Database Replication Features","text":"<ul> <li>Transparent replication.</li> <li>Bi-directional synchronization to and from the cloud.</li> <li>Per-table synchronization control.</li> <li>Resilient catch-up should the device or cloud go offline.</li> <li>Database triggers for notification when changes arrive.</li> </ul>","location":"database/replication/#database-replication-features"},{"title":"Replication Control","text":"<p>Ioto can synchronize changes to the cloud on a per table basis. The schema Control property defines how to synchronize each model. You can \"enable\" a model to be stored in the cloud, in the device or in both places. You can also control the replication direction flow of changes.</p> <p>For each Model in the schema, a property under control specifies where the model resides and how it should be synchronized.</p> <p>For example:</p> <pre><code>{\n    control: {\n        Status:  { enable: 'cloud' },\n        Fault:   { sync: 'up' },\n    },  \n}\n</code></pre> <p>In this example: The Status model is only enabled (exists) in the cloud. The Fault model exists in both the cloud and on the device and synchronization occurs only from the device \"up\" to the cloud.</p> <p>A model's enable property can be set to \"cloud\", \"device\" or \"both\" to define where the model can exist. The default is \"both\".</p> <p>A model's sync property can be set to \"up\", \"down\", \"both\" or \"none\" to define the directional flow of replication updates. A value of \"up\" means replicate changes from the device \"up\" to the cloud. A value of \"down\" means replicate changes only from the cloud \"down\" to the device. The default is \"none\".</p>","location":"database/replication/#replication-control"},{"title":"Replication Best Practices","text":"<p>Synchronization of model items is done on a per-item basis and not field by field. This means that a change of one field by the cloud can overwrite a change of another field on the device. For this reason, it is best to have the sync direction be either \"up\" or \"down\".</p> <p>You should only select \"both\" as your sync direction for models that can be updated by both cloud and device at the same time without loss of data or conflict.</p>","location":"database/replication/#replication-best-practices"},{"title":"Optimizations","text":"<p>To optimize network traffic, database changes will be sent up to the cloud in batches. These are controlled by the database.syncDelay and the database.syncLimit properties. The syncDelay is a delay before sending change batches to the cloud. The syncLimit is a size limit of the change set before sending a change batch. These are set to 5 seconds and 10K by default.</p> <p>You can force a sync save at any point by calling ioSync.</p>","location":"database/replication/#optimizations"},{"title":"References","text":"<p>OneTable Schema Spec.</p>","location":"database/replication/#references"},{"title":"Model Attributes","text":"<p>The following attribute properties are supported:</p>    Property Type Description     default <code>string</code> Default value to use when creating model items or when reading items without a value.   generate <code>string|boolean</code> Set to 'ulid' or 'uuid' to automatically create a new ID value for the attribute when creating new items.   isoDates <code>boolean</code> Set to true to store dates as Javascript ISO strings vs epoch numerics. If unset, the field will use the table default value for isoDates. Default to the schema params value.   nulls <code>boolean</code> Set to true to store null values or false to remove attributes set to null. Default false.   required <code>boolean</code> Set to true if the attribute is required.   schema <code>object</code> Nested schema.   type <code>Type or string</code> Field data type.   value <code>string</code> Template to derive the value of the attribute. These attributes are \"hidden\" by default.    <p>If the default property defines the default value for an attribute. If no value is provided for the attribute when creating a new item, the default value will be used.</p> <p>If the isoDates property is defined and not-null, it will override the table isoDates value. Set to true to store the field date value as an ISO date string. Set to false to store the date as a Unix epoch date number.</p> <p>The schema property permits nested field definitions. The parent property must be an Object as the type of items in arrays are defined using the items property.</p> <p>The type properties defines the attribute data type. Valid types include: String, Number, Boolean, Date, Object, Null, Array, Buffer (or Binary) and Set. The object type is mapped to a map, the array type is mapped to a list. Dates are stored as Unix numeric epoch date stamps unless the isoDates parameter is true, in which case the dates are store as ISO date strings. Binary data is supplied via buffer types and is stored as base64 strings in DynamoDB.</p> <p>The value property defines a literal string template that is used to compute the attribute value. This is useful for computing key values from other properties, creating compound (composite) sort keys or for packing fields into a single DynamoDB attribute when using GSIs.</p> <p>String templates are similar to JavaScript string templates. The template string may contain ${name} references to other fields defined in the entity model. If any of the variable references are undefined when an API is called, the computed field value will be undefined and the attribute will be omitted from the operation.</p> <p>If you call find or any query API and do not provide all the properties needed to resolve the complete value template. i.e. some of the ${var} references are unresolved, OneTable will take the resolved leading portion and create a begins with key condition for that portion of the value template.</p>","location":"database/schemas/attributes/"},{"title":"Database Indexes","text":"<p>Schema indexes are defined using the schema.indexes property.</p> <p>The indexes property can contain one or more indexes and must contain the primary key. Additional indexes will be treated as secondary Indexes.</p>  <p>Note</p> <p>Ioto currently only supports the primary index.</p>  <pre><code>const MySchema = {\n    indexes: {\n        primary: {\n            hash: 'pk',         //  Schema property name of the hash key\n            sort: 'sk',         //  Schema property name of the sort key\n        },\n        //  Zero or more global secondary or local secondary indexes\n        gs1: {\n            hash: 'gs1pk',\n            sort: 'gs1sk',\n        }\n    }\n}\n</code></pre>","location":"database/schemas/indexes/"},{"title":"Database Schemas","text":"<p>Ioto database schemas define how items will be stored in the database and in the cloud. A schema specifies the application models (entities), entity fields, indexes and other data access and replication parameters.</p> <p>Schemas look like this:</p> <pre><code>const DeviceSchema = {\n    format: 'onetable:1.1.0',\n    version: '0.0.1',\n    indexes: {\n        primary: { hash: 'pk', sort: 'sk' },\n    },\n    control: {\n        /*\n            Where the model is enabled (cloud, device, both. Default is both)\n            Synchronization direction. Up to the cloud, down or both. Default is none.\n        */\n        Status:  { enable: 'cloud' },\n        Fault:   { sync: 'up' },\n    },    \n    models: {\n        Status: {\n            pk:             { type: 'string', value: 'status#' },\n            sk:             { type: 'string', value: 'status#' },\n            parameters:     { type: 'object' },\n            version:        { type: 'string' },\n            updated:        { type: 'date' },\n        },\n        Fault: {\n            pk:             { type: 'string', value: 'device#${deviceId}' },\n            sk:             { type: 'string', value: 'fault#${id}' },\n            deviceId:       { type: 'string', required: true },\n            id:             { type: 'string', generate: 'ulid' },\n            timestamp:      { type: 'date', required: true },\n            source:         { type: 'string', required: true },\n            severity:       { type: 'string', required: true, enum: ['info', 'warn', 'error', 'critical', 'fatal'] },\n            subject:        { type: 'string', required: true },\n            message:        { type: 'string', required: true },\n        },\n\n    },\n    params: {\n        'isoDates': true,\n        'timestamps': true,\n    },\n}\n</code></pre>","location":"database/schemas/overview/"},{"title":"Schema Properties","text":"<p>The valid properties of the schema object are:</p>    Property Type Description     format <code>string</code> Reserved. Must be set to 'onetable:1.1.0'   indexes <code>object</code> Hash of indexes used by the table.   control <code>object</code> Hash of model entities describing where the model should be and how it should be replicated.   models <code>object</code> Hash of model entities describing the model keys, indexes and attributes.   params <code>object</code> Hash of properties controlling how data is stored in the table.   version <code>string</code> A SemVer compatible version string.    <p>The format property specifies the schema format version and must be set to onetable:1.1.0.</p> <p>The indexes property specifies the key structure for the primary, local and secondary indexes.</p> <p>The models property contains one or more models with attribute field descriptions. The models collections define the attribute names, types, mappings, validations and other properties.</p> <p>The params property defines additional parameters for table data formats.</p> <p>The version property defines a version for your DynamoDB model design. It must be a SemVer compatible version string. The version string is used by tools and consumers of the schema to understand compatibility constraints for the schema and stored data.</p>","location":"database/schemas/overview/#schema-properties"},{"title":"Schema Models","text":"<p>The schema defines a model for each application entity. For example, consider a music example:</p> <pre><code>{\n    album: {\n        pk:     { type: 'string', value: '${_type}:${name}' },\n        sk:     { type: 'string', value: '${_type}:' },\n        name:   { type: 'string', required: true },\n        songs:  { type: 'number' },\n    },\n    artist: {\n        pk:     { type: 'string', value: '${_type}:${name}' },\n        sk:     { type: 'string', value: '${_type}:' },\n        name:   { type: 'string', required: true },\n        address: {\n            type: Object, schema: {\n                street: { type: 'string' },\n                city: { type: 'string' },\n                zip: { type: 'string' },\n            },\n        },\n    }\n}\n</code></pre> <p>For each model, all the entity fields are defined by specifying the field type, validations and other operational characteristics (uniqueness, IDs and templates).</p> <p>The valid types are: 'array', 'binary', 'boolean', 'date', 'number', 'object', and 'string'.</p> <p>Ioto will ensure that values are of the correct type before they are written to the database. Where possible, values will be cast to their correct types. For example: 'false' will be cast to false for Boolean types and 1000 will be cast to '1000' for String types.</p> <p>The database will automatically add a model type via the _type attribute to each model. This is set to the name of the model. You can modify this via the params.typeField setting.</p>","location":"database/schemas/overview/#schema-models"},{"title":"Value Templates","text":"<p>The value of a field can be computed based on the value of other fields and a formatting \"value template\". This is useful for decoupling your key structure from your entity fields.</p> <p>The value template is like a Javascript string literal where the value of fields are expressed in a \"${field}\" format. At runtime, the field references are expanded with the item's value for the named field.</p> <p>In the example above, the primary key \"pk\" is calculated from the entity type _type and the name field by using the value template: ${_type}:${name}.</p>","location":"database/schemas/overview/#value-templates"},{"title":"Nested Schemas","text":"<p>For object attributes, you can define a nested schema for the object properties, as in the example above (repeated below).</p> <p>A nested schema uses the schema property to define a nested map of attributes. Schemas can be nested to an arbitrary depth.</p> <pre><code>address: {\n    type: Object, schema: {\n        street: { type: 'string' },\n        city: { type: 'string' },\n        zip: { type: 'string' }\n    }\n}\n</code></pre>","location":"database/schemas/overview/#nested-schemas"},{"title":"Indexes","text":"<p>DB uses red-black balanced binary trees for indexes to provided ordered, rapid indexing of data. Currently, the database only supports a single primary index, but in the future, multiple indexes will be supported.</p>","location":"database/schemas/overview/#indexes"},{"title":"References","text":"<p>OneTable Schema Spec.</p>","location":"database/schemas/overview/#references"},{"title":"Params","text":"<p>The schema.params is a map of properties that control how data is stored in the database. It may contain the following properties:</p>    Property Type Description     createdField <code>string</code> Name of the \"created\" timestamp attribute. Defaults to \"created\".   hidden <code>boolean</code> Hide templated (value) attributes in Javascript properties. Default true.   isoDates <code>boolean</code> Set to true to store dates as Javascript ISO strings vs epoch numerics. Default false.   nulls <code>boolean</code> Store nulls in database attributes vs remove attributes set to null. Default false.   timestamps <code>boolean | string</code> Make \"created\" and \"updated\" timestamps in items. Set to true to create both. Set to 'create' for only \"created\" timestamp and set to \"update\" for only an \"updated\" timestamp. See also: \"updatedField\" and \"createdField\" properties. Default false.   typeField <code>string</code> Name of the \"type\" attribute. Default \"_type\".   updatedField <code>string</code> Name of the \"updated\" timestamp attribute. Default \"updated\".    <p>For example:</p> <pre><code>const MySchema = {\n    params: {\n        isoDates: true,\n        timestamps: true,\n    }\n}\n</code></pre>","location":"database/schemas/params/"},{"title":"Embedding the Ioto Agent","text":"<p>The Ioto agent is provided as a stand-alone program and as a library that can be included with your programs for a more customized experience.</p> <p>The Ioto agent can be customized two ways:</p> <ol> <li>Use the Ioto main() and provide your \"start\" and \"stop\" functions.</li> <li>Use your own main() and link with the Ioto library.</li> </ol>","location":"dev/embedding/"},{"title":"Use the Ioto Main","text":"<p>The first way to integrate Ioto is to use the Ioto main program and provide your own start and stop functions. In this manner, your app becomes empowered with MQTT, HTTP and AWS integration services.</p> <p>Ioto can be customized by providing your own iaStart and iaStop functions. These functions are invoked by Ioto during startup and shutdown.</p> <p>The default versions of these functions are provided by the Ioto library. However if you provide your alternates and link against them before libioto.a, your versions will be used instead.</p> <p>The embedding API requires only a few lines of code. See the \"Link Library Sample\" provided under the samples directory in the source distribution.</p> <p>To include the Ioto library in your program you need to do the following things:</p> <ol> <li>Add #include \"ioto/agent.h\" to the relevant source files.</li> <li>Add the libioto.a library to your Makefile.</li> <li>Provide an iaStart function to initialize your code and iaStop function to terminate your code.</li> <li>Build your application.</li> <li>Create or edit the Ioto config.json and other Ioto config files to suit your needs.</li> </ol>","location":"dev/embedding/#use-the-ioto-main"},{"title":"Embedding API","text":"<p>The following code demonstrates the Ioto embedding API.</p> <pre><code>#include \"ioto/agent.h\"\n\nPUBLIC void iaStart(void *arg)\n{\n    rinfo(\"sample\", \"Hello World\\n\");\n}\n</code></pre> <p>To build this sample and link with the Ioto library: <pre><code>cc -o server server.c -lioto\n</code></pre></p>","location":"dev/embedding/#embedding-api"},{"title":"Provide your own main()","text":"<p>The second way to integrate Ioto is to create your own main program and link with the Ioto library.</p> <p>This method is desirable if you have more extensive customizations or need to parse custom command line options.</p> <p>The Ioto libioto.a library also includes a default main() program. If you provide your own main() and link it before the libioto.a, then your main will be used instead.</p> <p>See the \"Link Main Sample\" under the samples directory for an example.</p> <p>To build with your own main, you need to do the following things:</p> <ol> <li>Add #include \"ioto/agent.h\" to the relevant source files.</li> <li>Add the libioto.a library to your Makefile.</li> <li>Provide a main().</li> <li>Invoke ioInit and ioTerm.</li> <li>Build your application.</li> <li>Create or edit the Ioto config.json and other Ioto config files to suit your needs.</li> </ol> <p>The following code demonstrates providing your own main().</p> <pre><code>#include \"ioto/agent.h\"\n\nstatic void start(void *arg);\n\nint main(int argc, char** argv)\n{\n    rInit((RFiberProc) start, 0, 0);\n\n    //  Block until rStop()\n    rServiceEvents();\n    ioTerm();\n    rTerm();\n    return 0;\n}\n\nstatic void start(void *arg)\n{\n    ioInit(0);\n    rinfo(\"sample\", \"Hello World\\n\");\n}\n</code></pre> <p>To build this sample and link with the Ioto library:</p> <pre><code>cc -o server server.c -lioto\n</code></pre>","location":"dev/embedding/#provide-your-own-main"},{"title":"Samples","text":"<p>The \"Link Library Ioto\" sample demonstrates linking with the Ioto library. The \"Link Main Ioto\" sample demonstrates linking with your own main.</p>","location":"dev/embedding/#samples"},{"title":"More Details","text":"<p>For more details about the embedding API, please consult the Ioto APIs.</p>","location":"dev/embedding/#more-details"},{"title":"Ioto Events","text":"<p>Ioto will signal important events and conditions using the Ioto runtime signal mechanism.</p> <p>You can watch for certain conditions to happen and be notified when they do. For example, it can be useful to be notified when the network connects or disconnects to the cloud.</p> <p>You can also use the signal mechanism to create your own conditions on which to watch and signal.</p> <p>To watch for a condition:</p> <pre><code>rWatch(\"mqtt:connect\", fn, data);\n</code></pre> <p>This will invoke fn() when the condition occurs and will provide the watch data and the signal argument.</p> <pre><code>void fn(void *data, void *arg) {\n    //  Do something\n}\n</code></pre>","location":"dev/events/"},{"title":"Event List","text":"<p>The list of triggered events:</p>    Name Description Arguments     app:ready When the Ioto app is fully initialized. None   cloud:ready When cloud services are initialized. None   db:change When a database table value has changed. A SyncChange structure with model, item, params and command that caused the change.   db:sync When the database changes due to receiving a cloud sync update The update message received from the cloud with the update.   device:keys Triggered when AWS access credentials are rotated locally None   device:provisioned When the device is claimed by a device cloud and provisioned for management None   mqtt:connect When the MQTT connection to the cloud is established None   mqtt:disconnect When the MQTT connection to the cloud is lost None    <p>To manually signal a condition, call:</p> <pre><code>rSignal(\"mqtt:connect\", arg);\n</code></pre> <p>To disable watching, call:</p> <pre><code>rWatchOff(\"mqtt:connect\", fn, data);\n</code></pre> <p>This will disable the watch registered with exactly the same arguments.</p>","location":"dev/events/#event-list"},{"title":"Fiber Coroutines","text":"<p>To implement parallelism in an application, a developer has three choices:</p> <ol> <li>Threads</li> <li>Non-blocking APIs with callbacks</li> <li>Fiber coroutines</li> </ol>","location":"dev/fiber/"},{"title":"Threads","text":"<p>Programming with threads can be appealing at first, however a multithreaded design can be problematic. Subtle programming errors due to timing related issues, multithread lock deadlocks and race conditions can be extraordinarily difficult to detect and diagnose. All too often, they appear in production deployments.</p>","location":"dev/fiber/#threads"},{"title":"Callbacks","text":"<p>The second approach of using non-blocking APIs with callbacks is simpler to debug. But code quality suffers with the all too common \"callback-hell\". Relatively simple algorithms become obscure when scattered over cascading callbacks.</p>","location":"dev/fiber/#callbacks"},{"title":"Fiber Coroutines","text":"<p>A compelling alternative, is to use Fiber coroutines. A fiber coroutine is code that runs with its own stack and cooperatively yields to other fibers when it needs to wait.</p> <p>You can think of a fiber as a thread, but only one fiber runs at a time so there is no need for thread locking or synchronizing. For Go programmers, fibers are like Go routines. For JavaScript developers, fibers are similar to async/await.</p> <p>Fibers allow programs to overlap waiting for I/O or other events with useful compute tasks. They achieve parallelism without the pain.</p> <p>Fibers solve the main problem with multi-threaded programming where multiple threads access the same data at the same time and require complex locking to safeguard data integrity. Fibers solve the main problem with non-blocking callbacks by enabling a procedural straight line coding style.</p> <p>Fibers are not perfect. They will not let you utilize all the CPU cores of a system within one program. But for the use case of embedded device management, this is not a significant concern. Device management applications are generally secondary in purpose to the primary role of the device and consequently should not be monopolizing the CPU cores of the device.</p>","location":"dev/fiber/#fiber-coroutines_1"},{"title":"Parallelism Compared","text":"<p>Consider a threaded example:</p> <pre><code>int count = 0;\npthread_mutex_t mutex;\n\nvoid increment() {\n    pthread_mutex_lock(&amp;mutex);\n    count = count + 1;\n    pthread_mutex_unlock(&amp;mutex);\n}\n\nvoid getCount() {\n    int c;\n    pthread_mutex_lock(&amp;mutex);\n    c = count;\n    pthread_mutex_unlock(&amp;mutex);\n    return c;\n}\n</code></pre> <p>Now consider the fiber solution:</p> <pre><code>int count = 0;\n\nvoid increment() {\n    count = count + 1;\n}\n\nvoid getCount() {\n    return ccount;\n}\n</code></pre> <p>Since only one segment of code is executing at any one time, there is no possibility of fiber collisions.</p>","location":"dev/fiber/#parallelism-compared"},{"title":"Eliminating callbacks","text":"<p>When doing I/O, applications can choose to perform blocking or non-blocking I/O. Blocking I/O while being simpler, means the application cannot perform any other functions while waiting for I/O to complete.</p> <p>Consider an application that needs to perform a REST HTTP request to retrieve some remote data. While this request is waiting several seconds, the application cannot perform any other task as it is blocked waiting for the request to complete.</p> <p>Non-blocking I/O solves this problem, but creates another: \"callback hell\".</p> <p>Consider this pseudo-example:</p> <pre><code>//  Issue a request and invoke the onData callback on completion\nhttpFetch(\"https://www.example.com\", onData)\nreturn;\n\n//  First Callback\nstatic void onData(HttpResult *result)\n{\n    if (!result) {\n        //  Invoke another request\n        httpFetch(\"https://www.backup.com/);\n    }\n}\n\n//  Second Callback\nstatic void onComplete(HttpResult *result)\n{\n    //  Now we done and can process the result\n}\n</code></pre> <p>You can see that callbacks quickly obscure the code's intent.</p> <p>The alternative Ioto code using fiber coroutine would look like this:</p> <pre><code>int data = urlGet(\"https://www.example.com\");\nif (!data) {\n    data = urlGet(\"https://www.backup.com/\");\n}\n</code></pre> <p>The calls to urlFetch will yield and other fibers will run while waiting for I/O. When the request completes, this fiber is transparently resumed and execution continues.</p> <p>Fiber-based code is simpler to code, debug and maintain. When converting Ioto from callbacks to fibers, several of our algorithms reduced in lines of code by over 30%.</p>","location":"dev/fiber/#eliminating-callbacks"},{"title":"Fibers in Practice","text":"<p>In practice, you typically don't need to explicitly code fiber yielding or resuming. The Ioto socket APIs are fiber-aware and will do the yielding for you. The rReadSocket and rWriteSocket APIs will block the current fiber as required, but other fibers will continue to run. NOTE: that only one fiber is ever running at a time.</p> <p>In all Ioto services, including the web server, Url client, MQTT client and AWS services: the async APIs are fiber-aware and will yield and resume automatically.</p> <p>For example:</p> <pre><code>char buf[1024];\n\nwhile ((nbytes = rSocketRead(sock, buf, sizeof(buf))) &gt; 0) {\n    printf(\"Got body data %.*s\\n\", (int) nbytes, buf);\n}\n</code></pre>","location":"dev/fiber/#fibers-in-practice"},{"title":"Main Program","text":"<p>When using the Ioto fiber coroutines, your main program typically performs little processing before calling rInit to create your first fiber. This fiber can then continue initialization and use the full fiber API.</p> <p>While you can use many of the \"R\" runtime APIs from your main program (outside a fiber coroutine), you cannot call rReadSocket, rWriteSocket and rConnectSocket in your main program. It is best practice to call rInit as soon as possible and complete initialization inside a fiber.</p> <p>If you must read and write from sockets before calling rInit, we provide the rReadSocketSync and rWriteSocketSync APIs for that purpose.</p>","location":"dev/fiber/#main-program"},{"title":"Ioto I/O API","text":"<p>Ioto builds fiber support into the lowest layer of the \"R\" portable runtime. The following APIs support automatic fiber yielding:</p> <ul> <li>rReadSocket</li> <li>rWriteSocket</li> <li>rSleep</li> </ul> <p>These APIs will automatically yield and resume as required.</p> <p>Furthermore, if you are using TLS, the rConnectSocket API must only be called inside a fiber. This is because the handshaking exchange I/O is performed using fiber read/write primities internally.</p>","location":"dev/fiber/#ioto-io-api"},{"title":"Fiber API","text":"<p>Ioto supports a low level fiber API so you can construct your own fiber-enabled primitives.</p> <ul> <li>rYieldFiber</li> <li>rResumeFiber</li> <li>rSpawnFiber</li> </ul> <p>Use rYieldFiber to yield the CPU and switch to another fiber. You must make alternate arrangements to call rResumeFiber when required.</p> <p>Use rSpawnFiber to create a new fiber and immediately switch to it. For example:</p> <pre><code>void myFiberFunction(void *arg) {\n    //  code here runs inside a fiber\n}\nrSpawnFiber(myFiberFunction, arg);\n</code></pre>","location":"dev/fiber/#fiber-api"},{"title":"Integrating with External Services","text":"<p>But what should you do if you need to invoke an external service that will block?</p> <p>You have two alternatives:</p> <ol> <li>Use Non-Blocking APIs</li> <li>Use threads</li> </ol>","location":"dev/fiber/#integrating-with-external-services"},{"title":"Non-Blocking","text":"<p>Ioto provides a flexible centralized eventing and waiting mechanism that can support any service that provides a select() compatible file descriptor.</p> <p>If the external service has a non-blocking API and provides a file descriptor that is compatible with select or epoll, you can use the Ioto runtime wait APIs to be signaled when the external service is complete.</p> <p>To wait for I/O on a file descriptor, call rAllocWait to create a wait object and rSetWaitHandler to nominate an event function to invoke.</p> <p>For example:</p> <pre><code>wait = rAllocWait(fd);\nrSetWaitHandler(wait, fn, arg, R_READABLE);\n</code></pre> <p>The nominated function will be run on a fiber coroutine when I/O on the file descriptor (fd) is ready.</p>","location":"dev/fiber/#non-blocking"},{"title":"Threads","text":"<p>The other option is to create a thread. However you must take care to properly yield the fiber first. The runtime provides a convenient rSpawnThread API that will do this for you. It will create a thread, yield the current fiber and then invoke your threadMain. When your threadMain exits, it will automatically resume the fiber.</p> <p>For example:</p> <pre><code>rSpawnThread(threadMain, arg);\n\nstatic void threadMain(void *arg)\n{\n    data = getFromExternalService();\n    return data;\n}\n</code></pre>","location":"dev/fiber/#threads_1"},{"title":"Manual Yield and Resume","text":"<p>Though unlikely, you may have a need to manually create fibers and yield and resume explicitly.</p> <p>The APIs for this are: rAllocFiber, rYieldFiber and rResumeFiber.</p> <p>See the Runtime API for more details.</p>","location":"dev/fiber/#manual-yield-and-resume"},{"title":"JSON","text":"<p>The Ioto JSON parser is a high performance JSON parser, serializer and query engine.</p> <p>It parses JSON text into an in-memory tree for efficient examination, storage and export.</p>","location":"dev/json/"},{"title":"Json Features","text":"<ul> <li>JSON and JSON5 parser</li> <li>Stores parsed JSON as an in-memory tree</li> <li>Fast, flexible query engine mange and navigate the JSON tree</li> <li>Simple get/set API to retrieve and update JSON values.</li> <li>APIs to walk, iterate and navigate a parsed tree</li> <li>Overlay and blend JSON trees</li> <li>Supports JSON/5 with extensions</li> <li>Serialize in strict or JSON/5 formats</li> <li>Persist to flash/disk.</li> </ul>","location":"dev/json/#json-features"},{"title":"API Quick Tour","text":"<p>To parse a JSON string, call the jsonParse API:</p> <pre><code>Json *json = jsonParse(\"{Weather: 'Sunny'}\", 0);\n</code></pre> <p>This parses the given JSON text and returns a Json instance which represents the in-memory parsed JSON tree.</p>  <p>Note</p> <p>You can provide data to parse as either JSON or JSON/5 format strings. JSON/5 which permits a more relaxed JSON format where property keys may omit quotes and single quotes can be used on values. Also, values can be multi-line strings and may use back-ticks instead of quotes to delimit the strings. Finally, the last item in an object map may be terminated with a trailing comma.</p>","location":"dev/json/#api-quick-tour"},{"title":"Getting Values","text":"<p>To query a value from the JSON tree, use jsonGet:</p> <pre><code>cchar *value = jsonGet(json, 0, \"weather\", NULL);\n</code></pre> <p>This will retrieve the weather value (Sunny) as a static string that does not need freeing.</p> <p>When calling jsonGet, you can provide keys with dots:</p> <pre><code>cchar *value = jsonGet(json, 0, \"address.city\", NULL);\n</code></pre> <p>and you can provide a default value to be returned as the last parameter if the property is not defined in the JSON tree.</p> <pre><code>cchar *value = jsonGet(json, 0, \"weather\", \"rainy\");\n</code></pre> <p>The second argument (0) in these calls defines the starting point from which to search. This is a numeric node ID. Don't worry about it for now, but you'll appreciate it later when searching deeper in a JSON tree.</p> <p>You can use the jsonGetInt and jsonGetBool APIs to return data as an integer or boolean data type.</p>","location":"dev/json/#getting-values"},{"title":"Setting Values","text":"<p>To update or set a value, use the jsonSet API:</p> <pre><code>jsonSet(json, 0, \"weather\", \"sunny\", 0);\n</code></pre> <p>This will update the value of the given property in-memory. Again, you can use dotted key properties of any depth.</p>","location":"dev/json/#setting-values"},{"title":"Data Types","text":"<p>The last parameter to jsonSet can be used to specify a data type for the value. In general, the Ioto JSON API can sleuth the data type for you. But as data values are supplied as strings, you may need to specify a type if you want the value to be stored as a number.</p> <p>The valid types are: JSON_OBJECT, JSON_ARRAY, JSON_STRING and JSON_PRIMITIVE. The primitives are false, true, null, undefined and numbers.</p> <p>To remove a property, use jsonRemove:</p> <pre><code>jsonRemove(json, 0, \"weather\");\n</code></pre> <p>When you are finished with a JSON tree, remember to free it with jsonFree to prevent memory leaks.</p> <pre><code>jsonFree(json)\n</code></pre> <p>This will release allocated memory.</p>","location":"dev/json/#data-types"},{"title":"Serialization","text":"<p>To save your in-memory tree as a string, use jsonToString:</p> <pre><code>char *string = jsonToString(json, 0, 0, 0);\n</code></pre> <p>This will save the in-memory tree as JSON/5.</p> <p>To save in strict JSON, use:</p> <pre><code>char *string = jsonToString(json, 0, 0, JSON_STRICT);\n</code></pre> <p>To save a sub-set of the tree, specify the root node to export:</p> <pre><code>char *string = jsonToString(json, 0, \"address\", JSON_STRICT);\n</code></pre> <p>This will save all properties under the \"address\" (including address) property.</p>","location":"dev/json/#serialization"},{"title":"Working with Files","text":"<p>You can parse a JSON file with the jsonParseFile API:</p> <pre><code>Json *json = jsonParseFile(\"./file.json\", NULL, 0);\n</code></pre> <p>and you can save the in-memory JSON tree using jsonSave:</p> <pre><code>jsonSave(json, 0, \"data.json\", 0644, 0);\n</code></pre>","location":"dev/json/#working-with-files"},{"title":"Navigating and Iterating","text":"<p>Properties in the JSON tree are stored as nodes. These nodes can be identified by a numeric ID or by node reference. Nodes and node IDs are used to very efficiently traverse and enumerate property values.</p> <p>To get a node ID, use jsonGetId:</p> <pre><code>int id = jsonGetId(json, 0, \"address\");\n</code></pre> <p>You can retrieve a node using another node as a starting point:</p> <pre><code>int addressId = jsonGetId(json, 0, \"address\");\nint cityId = jsonGetId(json, addressId, \"city\");\n</code></pre> <p>In fact, most APIs such as jsonGet and jsonSet take a node ID as a parameter that specifies a root of the tree to base the operation. For example, these are equivalent:</p> <pre><code>int addressId = jsonGetId(json, 0, \"address\");\nint cityId = jsonSet(json, addressId, \"city\", \"Seattle\", 0);\n\n// and\n\njsonGetSet(json, 0, \"address.city\", \"Brisbane\", 0);\n</code></pre> <p>Similarly, you can retreive a node reference:</p> <pre><code>JsonNode *node = jsonGetNode(json, \"address\", \"city\");\n</code></pre> <p>You can iterate over nodes using the ITERATE_JSON macro:</p> <pre><code>JsonNode *child;\nint id;\nfor (ITERATE_JSON(json, 0, child, id)) {\n    printf(\"Property %s has value %s\\n\", child-&gt;name, child-&gt;value);\n}\n</code></pre>","location":"dev/json/#navigating-and-iterating"},{"title":"Debugging","text":"<p>Use the jsonPrint API to print a JSON tree to the console:</p> <pre><code>jsonPrint(json);\n</code></pre>","location":"dev/json/#debugging"},{"title":"JSON/5","text":"<p>JSON/5 an extension of JSON that makes it easier to create, read and maintain configuration files in JSON.</p> <p>JSON/5 adds the following JavaScript features to JSON.</p> <ul> <li>Object keys may be JavaScript identifiers without quotes</li> <li>Objects or arrays may have a trailing comma</li> <li>Strings may be single quoted</li> <li>Strings may span multiple lines (single, double or back-tick quotes)</li> <li>Numbers may have a leading or trailing decimal point, be hexadecimal, may begin with a +.</li> <li>Values may be regular expressions</li> <li>Undefined is a valid value</li> <li>Single and multiline comments are allowed and preserved</li> </ul> <pre><code>{\n    // single-comment\n    /*\n        Multi-line comment\n    */\n    unquotedKey: 42,\n    singleQuoteString: 'The \"lazy brown fox\" jumped...',\n    multiLine: \"Line one\n        line two\n    \",\n    hex: 0x42,\n    trailingComma: {\n        one: 1,\n        two: 2,\n    },\n}\n</code></pre>","location":"dev/json/#json5"},{"title":"Memory References","text":"<p>The JSON engine returns values as static pointers into the in-memory tree. Values are returned as const char* (cchar)) values and this saves having to duplicate strings. This reduces memory footprint and is much more efficient.</p> <p>It is important not to cast returned values to (char*) or to modify the referenced strings using \"dirty\" programming to break the const typing protection.</p>","location":"dev/json/#memory-references"},{"title":"Optimizations","text":"<p>When JSON parses text, it tokenizes the original text and uses it for individual property keys and values. This means the Ioto JSON parser does not need to re-allocate the JSON text and greatly reduces the memory footprint.</p> <p>JSON nodes are allocated in a single block which may need to grow if you insert new properties into a JSON tree. For this reason, JSON node references should not be persistently stored. JSON node IDs will be stable despite growing the node storage, but node reference will be re-based. If you need to store JSON node references, you should save IDs rather than node references. </p>","location":"dev/json/#optimizations"},{"title":"References","text":"<p>JSON5 Spec</p>","location":"dev/json/#references"},{"title":"Ioto Memory Allocator","text":"<p>Ioto provides a wrapper over the standard malloc memory allocator. This wrapper performs global memory allocation checking and is tailored to the needs of embedded applications.</p>","location":"dev/memory/"},{"title":"Memory Allocation","text":"<p>It is difficult and error-prone for programmers to check the result of every API call that can possibly fail due to memory allocation errors. Calls such as strdup and asprintf are often assumed to succeed, but they can, and do fail when memory is depleted.</p> <p>A better approach is to proactively detect and handle memory allocation errors in one place. The Ioto allocator handles memory allocation errors globally. When Ioto detects a memory allocation failure, it invokes the global memory exception handler. This configurable handler can then decide what is the best course of recovery. The default action is to restart the application.</p>","location":"dev/memory/#memory-allocation"},{"title":"Wrapper Routines","text":"<p>The safe runtime provides three memory allocation routines that wrap the standard libc routines.</p> <ul> <li>rAlloc \u2014 Allocate memory</li> <li>rFree \u2014 Free memory</li> <li>rAlloct \u2014 Allocate memory for a given type</li> </ul> <p>The rAlloc routine allocates memory and checks for memory failures and invokes the global exception handler if the memory allocation fails.</p> <p>The rFree routine frees memory and is NULL tolerant. This routine accepts memory allocated via rAlloc or malloc.</p> <p>The rAllocType routine is a convenience function to allocate memory for a typed object. For example:</p> <pre><code>mem = rAlloc(struct shape);\n</code></pre>","location":"dev/memory/#wrapper-routines"},{"title":"MQTT","text":"<p>MQTT is a messaging protocol for (IoT). It is designed as a lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth.</p> <p>The Ioto MQTT support is an efficient MQTT client that is ideal for connecting to the cloud.</p>","location":"dev/mqtt/"},{"title":"MQTT Features","text":"<ul> <li>MQTT 3.1.1 support</li> <li>Connect, publish, subscribe, ping and disconnect messages.</li> <li>TLS encryption with ALPN over port 443 to get through firewalls.</li> <li>Message quality of service for reliable delivery.</li> <li>Retained messages.</li> <li>High message throughput with exceptionally low overhead.</li> <li>Wait for delivery or acknowledgement options.</li> <li>Resilient reconnect on network interruptions.</li> <li>Automatic configuration after cloud provisioning.</li> <li>Parallelism via fiber coroutines. No ugly callbacks or complex threads.</li> <li>Tiny footprint of 8K code.</li> </ul>","location":"dev/mqtt/#mqtt-features"},{"title":"API Quick Tour","text":"<p>Ioto will typically connect to the cloud automatically and make available the connection endpoint via:</p> <pre><code>ioto-&gt;mqtt\n</code></pre> <p>This means you do not have to explicitly connect to the AWS IoT Core MQTT broker.</p> <p>However, you can connect to any MQTT endpoint at any time via mqttConnect if you wish.</p> <pre><code>Mqtt *mq = mqttAlloc(sock, \"my-client-id\", onEvents);\n\nmqttConnect(Mqtt *mq, cchar *username, cchar *password, int flags, MqttWaitFlags waitFlags);\n</code></pre> <p>In this case, you create and connect the Socket \"sock\" using the Safe runtime socket APIs before connecting with MQTT.</p>","location":"dev/mqtt/#api-quick-tour"},{"title":"Publishing Messages","text":"<p>Publishing messages is done via the mqttPublish API:</p> <pre><code>mqttPublish(ioto-&gt;mqtt, \"Initialized\", 0, MQTT_QOS_1, MQTT_WAIT_NONE, \"myDevice/init\");\n</code></pre> <p>This will publish an \"initialized\" message with quality of service (1) which means \"send at least once\". The message will be published on the \"myDevice/init\" topic and this API call will not block for sending or acknowledgement of the message. The sending will happen in the background with any required re-transmissions.</p>","location":"dev/mqtt/#publishing-messages"},{"title":"Subscribing for Messages","text":"<p>You can subscribe to receive incoming messages on a topic via the mqttSubscribe API:</p> <pre><code>mqttSubscribe(ioto-&gt;mqtt, incoming, MQTT_QOS_1, MQTT_WAIT_NONE, \"myDevice/change\");\n</code></pre> <p>When messages are received on the \"myDevice/change\" topic, the function <code>incoming</code> will be invoked with the message.</p> <p>The incoming callback will be passed the message response packet.</p> <pre><code>static void incoming(MqttResp *rp)\n{\n    printf(stdout, \"Received from topic %s: %s\", rp-&gt;topic, rp-&gt;data);\n}\n</code></pre> <p>The message topic will be a null terminated string in rp-&gt;topic.</p> <p>The message data will be passed in rp-&gt;data and the size of the data will be defined in rp-&gt;dataSize. The data will always be null terminated which is useful when passing message strings.</p>","location":"dev/mqtt/#subscribing-for-messages"},{"title":"Unsubscribing","text":"<p>To unsubscribe from a topic, use the mqttUnsubscribe API:</p> <pre><code>mqttUnsubscribe(ioto-&gt;mqtt, \"myDevice/unsub\", MQTT_WAIT_NONE);\n</code></pre>","location":"dev/mqtt/#unsubscribing"},{"title":"Waiting for Completion","text":"<p>The MQTT APIs can take a MQTT_WAIT argument that indicates if the API call should wait or not for completion.</p> <p>With the MQTT_WAIT_NONE flag value, the API call will not wait and transmission will happen in the background. The MQTT_WAIT_SENT flag will cause the API to wait until the message has been fully sent from the client, i.e. it has been fully transmitted over the network. The MQTT_WAIT_ACK will cause the API to wait until an acknowledgement message has been received from the peer.</p>  <p>Note</p> <p>Don't confuse this with MQTT quality of service levels which define whether a message is reliably delivered or not. In contrast, the WAIT flag determines how the API itself should block and wait.</p>","location":"dev/mqtt/#waiting-for-completion"},{"title":"Parallelism","text":"<p>The MQTT API uses the Ioto underlying Fiber Coroutine support to implement parallelism. When an MQTT call needs to wait for an acknowledgement or for network I/O, it will resume other fibers in the application transparently. Ioto is single threaded, but can run any number of fibers simultaneously without needing any locks. See Fiber Coroutines for more details.</p>","location":"dev/mqtt/#parallelism"},{"title":"Responding to Events","text":"<p>When Ioto connects to AWS IoT core, it will issue a \"mqtt:connect\" event and when disconnected it will issue a \"mqtt:disconnect\" event.</p> <p>These events can be monitored by calling the rWatch API. For example:</p> <pre><code>static void disconnected(cvoid *data, cvoid *arg)\n{\n    printf(\"MQTT disconnected\\n\");\n}\n\nrWatch(\"mqtt:disconnect\", disconnected, NULL);\n</code></pre> <p>The <code>data</code> argument is the value provided as the last parameter to rWatch. The <code>arg</code> argument is the argument provided when rSignal was called by Ioto, which in this case will be set to NUL.</p>","location":"dev/mqtt/#responding-to-events"},{"title":"Other Useful Routines","text":"<p>Use mqttIsConnected to test if the MQTT handle is currently connected to the MQTT broker.</p>","location":"dev/mqtt/#other-useful-routines"},{"title":"References","text":"<p>MQTT 3.1.1 spec</p>","location":"dev/mqtt/#references"},{"title":"Ioto Agent Samples","text":"<p>Ioto provides an extensive suite of samples for common design patterns.</p>    Name Description     link-agent-main Embed the Ioto library in your application and use the Ioto main().   own-main Embed the Ioto library with your own main().   url-fetch Issue client HTTP requests to issue REST API request.   url-get Issue simple client HTTP GET requests.   web-auth Demonstrate user login for a web application.   web-dynamic Generate dynamic responses for HTTP client requests.   web-static Serve static files for HTTP client requests.   web-upload Process uploaded file in the web server.","location":"dev/samples/"},{"title":"URL HTTP Client","text":"<p>The Ioto URL API is a HTTP client for interacting with HTTP servers. It is a full-duplex streaming HTTP client that can retrieve both documents and live streaming data.</p> <p>The URL client is an efficient HTTP client that uses minimal CPU from only 7K of code.</p> <p>The URL API uses a fiber coroutines to that you can write natural, blocking, procedural code without ugly callbacks or complex threads.</p>","location":"dev/url/"},{"title":"URL Features","text":"<ul> <li>HTTP/1.0, HTTP.1.1 client.</li> <li>Fully streaming API for dynamic input and output.</li> <li>Convenience JSON API for interacting with REST services.</li> <li>Single-threaded, fiber coroutine event-based runtime without ugly callbacks or complex threads.</li> <li>TLS/SSL 1.3 with certificate verification controls.</li> </ul>","location":"dev/url/#url-features"},{"title":"API Quick Tour","text":"<p>The URL API provides a high-level simple API and a lower-level API with more granular control.</p> <p>The low-level API consists of the routines urlGet and urlPost.</p> <p>To get a remote document, use the urlGet API:</p> <pre><code>char *document = urlGet(\"https://example.com/index.html\", NULL);\n\nprintf(\"Document %s\\n\", document);\nrFree(document);\n</code></pre> <p>This call will block the current fiber while other fibers continue to run. When the document has been retrieved, the call will resume and the document will be returned. If the request fails and a non-200 HTTP status is returned, the call returns NULL.</p> <p>When complete, you must free the returned string using rFree.</p> <p>To issue a post request, use urlPost API</p> <pre><code>char *document = urlPost(\"https://my.com/post\", data, dataLength, NULL);\n\nchar *document = urlPost(\"https://my.com/post\", \"Hello World\", -1, NULL);\n</code></pre> <p>If the data is a string, you can set the length to be -1 and the length will be calculated from the string.</p> <p>If you want to issue a POST request and retrieve a JSON document, you can use the JSON variants urlPostJson:</p> <pre><code>Json *json = urlPostJson(\"https://my.com/\", data, dataLength, NULL);\njsonPrint(json);\n</code></pre> <p>Use the JSON APIs to manage the returned JSON in-memory tree result.</p> <p>To supply headers with your requests, you can use the headers printf style arguments:</p> <pre><code>urlGet(\"https://example.com/data\", \"Authorization: %s\\r\\n\", password);\n</code></pre> <p>Each header in the format string must be separated by \"\\r\\n\".</p>","location":"dev/url/#api-quick-tour"},{"title":"Low Level API","text":"<p>To use the low-level API, first create a URL instance via urlAlloc:</p> <pre><code>Url *url = urlAlloc();\n</code></pre> <p>When finished, free the URL with urlClose.</p> <p>The primary low-level API is urlFetch. This API supports issuing any HTTP method with body data and headers.</p> <pre><code>int status = urlFetch(up, \"POST\", \"https://my.com/data\", data, dataLength, NULL);\n</code></pre> <p>This call returns a HTTP status code. To retrieve the returned data, use urlGetResponse or urlGetJsonResponse:</p> <pre><code>char *data = urlGetResponse(up);\n\n// or\n\nJson *json = urlGetJsonResponse(up);\n</code></pre> <p>You can also use the JSON variant urlFetchJson which returns the JSON tree if the HTTP return status is a successful 200 code.</p> <pre><code>Json *json urlFetchJson(up, \"POST\", \"https://my.com/data\", data, dataLength, NULL);\n</code></pre> <p>In this case, you can call urlGetStatus to return the HTTP status code.</p>","location":"dev/url/#low-level-api"},{"title":"Utilities","text":"<p>To retrieve returned HTTP headers, use urlGetHeader:</p> <pre><code>cchar *length = urlGetHeader(up, \"Content-Length\");\n</code></pre>","location":"dev/url/#utilities"},{"title":"Streaming","text":"<p>The Ioto URL client fully supports streaming data in both directions.</p> <p>To start a streaming request, use urlStart. Then write data blocks with urlWrite.</p> <p>When complete, write a NULL block to signify the end of the posted data.</p> <pre><code>urlStart(up, \"POST\", \"https://my.com/data\", -1);\nurlWriteHeaders(up, \"X-Custom: %s\\r\\n\", \"custom-header\");\n\nurlWrite(up, data, dataLength);\nurlWrite(up, moreData, moreDataLength);\n\n//  signify end of data\nurlWrite(up, NULL, 0);\n</code></pre> <p>To stream the response, use urlRead:</p> <pre><code>char buf[1024];\ndo {\n    if ((nbytes = urlRead(up, buf, sizeof(buf))) == 0) {\n        //  End of input\n        break;\n    } else if (nbytes &lt; 0) {\n        //  Error\n    }\n} while (nbytes &gt; 0);\n</code></pre>","location":"dev/url/#streaming"},{"title":"Timeouts","text":"<p>You can define a timeout limit for URL requests incase the server should hang.</p> <pre><code>urlSetTimeout(up, timeInMillisconds);\n\n//  or set for all requests\nurlSetDefaultTimeout(timeInMillisconds);\n</code></pre>","location":"dev/url/#timeouts"},{"title":"Kickstart Overview","text":"<p>Kickstart is a fully working sample VueJS single-page application that you can use as a starting point for your device management application.</p> <p>The Kickstart app demonstrates the capabilities and experience provided by an application created with Ioto and VueJS.</p> <p></p>","location":"kickstart/overview/"},{"title":"Kickstart Specs","text":"<p>Read the Kickstart Tech Specs for full details.</p> <p>Kickstart Screens</p> <p>See the Kickstart Screen Images for a close up look.</p>","location":"kickstart/overview/#kickstart-specs"},{"title":"Kickstart Components","text":"<ul> <li>User management</li> <li>User login</li> <li>Property edit</li> <li>Alert notification</li> <li>Event log</li> <li>Dashboard</li> <li>Dynamic tables and graphs</li> <li>Paged Data Tables</li> <li>Navigation</li> <li>Search</li> <li>Granular access control per page</li> <li>Help</li> </ul>","location":"kickstart/overview/#kickstart-components"},{"title":"Licensing for Kickstart","text":"<p>Kickstart is free for Ioto customers.</p> <p>Download from the Products page in Embedthis Admin</p>","location":"kickstart/overview/#licensing-for-kickstart"},{"title":"Best Practices","text":"<p>Kickstart uses proven designs and best-practices to lower development risk. It includes most of the required elements for a secure web application, so you can eliminate months off your development schedule.</p>","location":"kickstart/overview/#best-practices"},{"title":"Kickstart Screen Shots","text":"<p>The following screenshots show some of the functionality of the Kickstart manager application.</p>","location":"kickstart/screenshots/"},{"title":"Home Screen","text":"<p></p> <p>The Kickstart home screen with dashboard and pulldown notification event window.</p>","location":"kickstart/screenshots/#home-screen"},{"title":"Widgets","text":"<p>   </p> <p>The dashboard can use graphical widgets connected to a server-side data source. Data is pushed from the server over WebSockets. A gauge can define a min to max range and it uses animation to smooth transitions between data points.</p>","location":"kickstart/screenshots/#widgets"},{"title":"Graphs","text":"<p></p> <p>Server data can be plugged into charts for graphical display. Ioto provides primitives to convert device data to JSON that can be easily connected to a suite of charts.</p>","location":"kickstart/screenshots/#graphs"},{"title":"Sidebar Navigation","text":"<p></p> <p>Kickstart supports multi-level navigation. The current option is highlighted with show/hide indicators. Menus can be hidden if the authenticated user does not have the required permissions.</p> <p></p>","location":"kickstart/screenshots/#sidebar-navigation"},{"title":"Events Screen","text":"<p></p> <p>The events log describes system events of interest according to severity. You can create events in the server for any custom condition.</p>","location":"kickstart/screenshots/#events-screen"},{"title":"Feedback","text":"<p></p> <p>Error messages and user feedback are transparently channeled to the browser and displayed with appropriate color coding. This may be customized by modifying the application theme stylesheet.</p> <p></p>","location":"kickstart/screenshots/#feedback"},{"title":"Login Screen","text":"<p></p> <p>Kickstart include a complete user login mechanism. Passwords are securely hashed using Blowfish encryption. Kickstart automatically ensures the login form and request are transported using SSL. After login, users can be granted access to parts of the application dependent on their configured roles.</p>","location":"kickstart/screenshots/#login-screen"},{"title":"Dialogs","text":"<p></p> <p>Kickstart includes easy to use confirmation modal dialogs to confirm destructive actions.</p> <p></p>","location":"kickstart/screenshots/#dialogs"},{"title":"Kickstart Specs","text":"<p>Kickstart for Ioto is a VueJS application that includes the following components:</p> <ul> <li>Ioto HTTP web server \u2014 requires Ioto commercial license</li> <li>VueJS client-side Javascript framework</li> <li>Documentation</li> <li>Samples</li> <li>Source code</li> </ul>","location":"kickstart/specs/"},{"title":"UI Components","text":"<ul> <li>User management</li> <li>User login</li> <li>Property edit</li> <li>Alert notification</li> <li>Event log</li> <li>Dashboard</li> <li>Dynamic tables and graphs</li> <li>Paged Data Tables</li> <li>Navigation</li> <li>Search</li> <li>Help</li> <li>Granular access control per page</li> </ul>","location":"kickstart/specs/#ui-components"},{"title":"Security","text":"<ul> <li>Best practices security configuration</li> <li>Transport Layer Security (TLS/SSL)</li> <li>Secure user login</li> <li>Password storage with Blowfish hashing and salting</li> <li>Granular access control per-page or per URI</li> <li>Sandboxed resource limits</li> <li>Defensive counter-measures for DOS attacks</li> <li>Access and access violation logging</li> <li>Content Security Policy to minimize cross-site scripting</li> <li>CrossOrigin sharing support</li> <li>Hidden frame hijack prevention</li> <li>Hardened against Crime, Breach, Beast and Lucky 13 exploits</li> <li>Executes with minimal privilege in Chroot jail</li> <li>Safe portable runtime to protect against memory leaks and buffer overflows</li> <li>Angel monitoring process</li> </ul>","location":"kickstart/specs/#security"},{"title":"Performance","text":"<ul> <li>Highly responsive UI with sub-second page transitions.</li> <li>Excellent request throughput and scaling.</li> <li>Small memory footprint even under heavy load (~1.5MB including TLS, database and entire application).</li> <li>HTML, Javascript and stylesheets minified, compiled and compressed into a single file.</li> <li>Data interchange with server via optimized JSON requests and responses.</li> </ul>","location":"kickstart/specs/#performance"},{"title":"Pre-integrated Components","text":"<ul> <li>VueJS client-side Javascript library.</li> <li>Builds with the modern Vite build tool.</li> <li>Vuetify Material Design look and feel.</li> <li>Themeable SASS style sheets.</li> </ul>","location":"kickstart/specs/#pre-integrated-components"},{"title":"Developer Support","text":"<ul> <li>HTTP server and client libraries.</li> <li>Extensive C, Javascript APIs.</li> <li>Extensive debug and trace logging.</li> <li>Select and customize CSS themes.</li> </ul>","location":"kickstart/specs/#developer-support"},{"title":"Documentation","text":"<ul> <li>Full C API Documentation.</li> <li>Tutorials.</li> </ul>","location":"kickstart/specs/#documentation"},{"title":"Platform Support","text":"<ul> <li>Linux</li> <li>Windows</li> <li>MAC OSX</li> <li>FreeBSD</li> <li>FreeRTOS</li> </ul>","location":"kickstart/specs/#platform-support"},{"title":"Embedding Support","text":"<ul> <li>Supports ARM, MIPS, X86/X86_64, PPC, SH, Sparc processors.</li> <li>Full cross-compilation support. Use Windows, Linux or Mac as build system.</li> <li>Fine-grained control for conditional build and compilation.</li> <li>Build statically or shared.</li> </ul>","location":"kickstart/specs/#embedding-support"},{"title":"Standards","text":"<ul> <li>HTTP/1.1, and HTTP/2 RFC 2616.</li> </ul>","location":"kickstart/specs/#standards"},{"title":"Ioto Agent Reference Guide","text":"<p>This guide describes the Ioto agent programming APIs.</p> <p>Before reading the APIs, you may wish to review some architectural overviews that explain the programming paradigms used by Ioto.</p>","location":"ref/"},{"title":"Architectural Overviews","text":"<ul> <li>Ioto Background</li> <li>Memory Allocation</li> <li>Fiber Coroutine Programming</li> </ul>","location":"ref/#architectural-overviews"},{"title":"Programming APIs","text":"<p>The Ioto agent native APIs consist of C language headers, function prototypes, structure definitions and defines. They are divided into one of these areas.</p>    Area Description     Ioto Agent API   Web Server Embedded Web Server   DB Embedded Database   MQTT MQTT protocol client   URL Http Client   JSON JSON parser and query engine   Crypt Crypto APIs   R Portable Runtime   OSDEP O/S Portability Layer","location":"ref/#programming-apis"},{"title":"Stability Classifications","text":"<p>In addition to supporting SemVer for Ioto version policy, we provide stability classifications.</p> <p>APIs stability classifications document the likelihood of future change on a per-API basis. Rather than a general, meaningless backwards compatibility promise, these Stability Classifications assist developers to understand the future risk of change.</p>","location":"ref/#stability-classifications"},{"title":"Compatibility","text":"<p>Ioto APIs are evolving, and are thus subject to change between minor releases.</p> <p>The Ioto documentation provides a Stability Classification for each API group that reflects their stability with respect to forward changes.</p>","location":"ref/compatibility/"},{"title":"Migrating to from Appweb or GoAhead","text":"<p>The Ioto web server configuration and APIs are simpler and different to those in Appweb or GoAhead. Porting from Appweb or GoAhead is feasible, but not trivial.</p>","location":"ref/compatibility/#migrating-to-from-appweb-or-goahead"},{"title":"Web Server Action Routines","text":"<p>The Ioto web server action routines are very similar to those in GoAhead and Appweb. So action code written for GoAhead and Appweb and should map easily to Ioto. However, some of the web server utility routines to read and write data are different.</p> <p>The Ioto portable runtime (R) was adapted from GoAhead 5 and Appweb 8 and so the string, list, hashing and buffering APIs are very similar.</p>","location":"ref/compatibility/#web-server-action-routines"},{"title":"Standards","text":"<p>Ioto supports the following standards web standards:</p> <ul> <li>HTTP/1.1</li> <li>File Upload</li> </ul>","location":"ref/compatibility/#standards"},{"title":"API Stability Classification","text":"<p>The programming interfaces and data structures are classified with a stability class. These classifications help developers understand which interfaces may change in future releases and may need to be wrapped within their applications.</p> <p>When the classification is applied to an API, it applies to the complete function signature. When applied to a data structure or typedef, it applies to the structure name and not the internal structure fields. All structure fields are regarded as internal unless explicitly stated otherwise.</p> <p>The version numbering for Embedthis products follows the SemVer scheme. For example 2.1.3 is major version 2, minor version 1 and patch version 3.</p>    Classification Description     Mature Must be interoperable across at least two consecutive major releases so that applications are not required to change. These APIs must be deprecated before change or removal.   Stable Will not change between minor releases (e.g. 2.0 to 2.1). May change between major releases.   Evolving May change between major or minor releases. May not change between patch releases (e.g. 2.0.0 to 2.0.1) release.   Prototype May change between any major, minor or patch releases.   Deprecated For use by legacy applications only. Customers are advised that these interfaces may be removed in the next major or minor release.   Internal Internal API or data structure and may change at any time. Customers are strongly advised not to use these APIs. Please notify Embedthis if you feel compelled to use an internal API and we'll consider providing a better public interface that can be supported.","location":"ref/stability/"},{"title":"Crypt API","text":"<p>The crypt library provides a minimal set of crypto for connected devices. It provides Base64 encode/decode, MD5, SHA256, Bcrypt crypto and password utilities.</p> <p></p>","location":"ref/api/crypt/"},{"title":"Extensions","text":"Crypt Minimal Crypto Library.  <p></p>","location":"ref/api/crypt/#extensions"},{"title":"Functions","text":"boolcryptCheckPassword(cchar *plainTextPassword, cchar *passwordHash) Check a plain-text password against a password hash. char*cryptDecode64(cchar *str) Decode a block that has been base64 encoded. char*cryptDecode64Block(cchar *block, ssize *len, int flags) Decode a block that has been base64 encoded. char*cryptEncode64(cchar *str) Encode a string using base64 encoding. char*cryptEncode64Block(cchar *block, ssize len) Encode a block using base64 encoding. char*cryptGetFileMd5(cchar *path) Get an MD5 string hash for a file. char*cryptGetFileSha256(cchar *path) Get a SHA256 hash for the contents of a file. char*cryptGetMd5(uchar *block, ssize length) Get an MD5 hash for a block and return a string hash. voidcryptGetMd5Block(uchar *block, ssize length, uchar hash[CRYPT_MD5_SIZE]) Get an MD5 hash for a block and return a binary hash. char*cryptGetPassword(cchar *prompt) Read a password from the console. intcryptGetRandomBytes(char *buf, ssize length, bool block) Get random data. char*cryptGetSha256(cuchar *block, ssize length) Get a SHA256 hash for a block and return a string hash. voidcryptGetSha256Block(cuchar *block, ssize length, uchar hash[CRYPT_SHA256_SIZE]) Get a SHA256 hash for a block and return a binary hash. char*cryptMakePassword(cchar *password, int saltLength, int rounds) Make a password using the Blowfish cipher (Bcrypt). voidcryptMd5Finalize(RMd5 *ctx, uchar digest[CRYPT_MD5_SIZE]),typedef,struct,RSha256 Low level MD5 hashing API to finalize an MD5 hash compuation and return a binary hash result. char*cryptMd5HashToString(uchar hash[CRYPT_MD5_SIZE]) Convert an MD5 hash to a hex string. voidcryptMd5Init(RMd5 *ctx) Low level MD5 hashing API to initialize an MD5 hash computation. voidcryptMd5Update(RMd5 *ctx, uchar *block, uint length) Low level MD5 hashing API to update an MD5 hash computation with a block of data. voidcryptSha256Finalize(RSha256 *ctx, uchar hash[CRYPT_SHA256_SIZE]) Low level SHA256 hashing API to finalize a SHA256 hash compuation and return a binary result. char*cryptSha256HashToString(uchar hash[CRYPT_SHA256_SIZE]) Convert a SHA256 hash to a string. voidcryptSha256Init(RSha256 *ctx) Low level SHA256 hashing API to initialize a SHA256 hash computation. voidcryptSha256Start(RSha256 *ctx) Low level SHA256 hashing API to start a SHA256 hash computation. voidcryptSha256Term(RSha256 *ctx) Low level SHA256 hashing API to terminate a SHA256 hash compuation. voidcryptSha256Update(RSha256 *ctx, cuchar *block, int length) Low level SHA256 hashing API to update a SHA256 hash computation with input data.  <p></p>","location":"ref/api/crypt/#functions"},{"title":"Typedefs","text":"RMd5MD5 computation block.  <p></p>","location":"ref/api/crypt/#typedefs"},{"title":"Defines","text":"#defineCRYPT_BLOWFISH\u00a0\u00a0\u00a0\"BF1\"   Blowfish hash tag.  #defineCRYPT_BLOWFISH_ROUNDS\u00a0\u00a0\u00a0128   Number of computation rounds.  #defineCRYPT_BLOWFISH_SALT_LENGTH\u00a0\u00a0\u00a016   Length of salt text.  #defineCRYPT_DECODE_TOKEQ\u00a0\u00a0\u00a01   Decode base64 blocks up to a NULL or equals.","location":"ref/api/crypt/#defines"},{"title":"Crypt","text":"<p></p>  Crypt  <p>Minimal Crypto Library.</p> Description:The crypt library provides a minimal set of crypto for connected devices. It provides Base64 encode/decode, MD5, SHA256, Bcrypt crypto and password utilities. API Stability:Evolving. API Stability:Evolving. Fields:     <p></p>   bool     cryptCheckPassword (cchar *plainTextPassword, cchar *passwordHash)     <p>Check a plain-text password against a password hash.</p> Parameters:  plainTextPasswordInput plain-text password. passwordHashHash previously computed via cryptMakePassword  Returns:True if the password matches. API Stability:Evolving. See Also: cryptGetPassword, cryptMakePassword   <p></p>       char *     cryptDecode64 (cchar *str)     <p>Decode a block that has been base64 encoded.</p> Parameters:  strBase64 encoded string.  Returns:Null terminated decoded string. Caller must free. API Stability:Evolving. See Also: cryptEncode64   <p></p>       char *     cryptDecode64Block (cchar *block, ssize *len, int flags)     <p>Decode a block that has been base64 encoded.</p> Parameters:  blockBase64 encoded string. lenPointer to receive the length of the decoded block. flagsStop decoding at the end of the block or '=' if CRYPT_DECODE_TOKEQ is specified.  Returns:Decoded block string. Caller must free. The length is described via *len. API Stability:Evolving. See Also: cryptDecode64, cryptEncode64, cryptEncode64Block   <p></p>       char *     cryptEncode64 (cchar *str)     <p>Encode a string using base64 encoding.</p> Parameters:  strNull terminated string to encode.  Returns:Base64 encoded string. Caller must free. API Stability:Evolving. See Also: cryptEncode64Block   <p></p>       char *     cryptEncode64Block (cchar *block, ssize len)     <p>Encode a block using base64 encoding.</p> Parameters:  blockBlock of data to encode. lenLength of the block.  Returns:Base64 encoded string. Caller must free. API Stability:Evolving. See Also: cryptEncode64   <p></p>       char *     cryptGetFileMd5 (cchar *path)     <p>Get an MD5 string hash for a file.</p> Parameters:  pathFilename for the file for which to compute the hash.  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also: cryptGetMd5, cryptGetMd5Block   <p></p>       char *     cryptGetFileSha256 (cchar *path)     <p>Get a SHA256 hash for the contents of a file.</p> Parameters:  pathFilename of the file.  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also: cryptGetSha256, cryptGetSha256Block   <p></p>       char *     cryptGetMd5 (uchar *block, ssize length)     <p>Get an MD5 hash for a block and return a string hash.</p> Parameters:  blockBlock of data for which to compute the hash. lengthLength of the block. If the length is -1, the block is assumed to be a string and its length is determined by strlen on the block.  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also: cryptGetMd5Block   <p></p>       void     cryptGetMd5Block (uchar *block, ssize length, uchar hash)     <p>Get an MD5 hash for a block and return a binary hash.</p> Parameters:  blockBlock of data for which to compute the hash. lengthLength of the block. If the length is -1, the block is assumed to be a string and its length is determined by strlen on the block. hashArray to receive the hash.  API Stability:Evolving. See Also: cryptGetMd5   <p></p>       char *     cryptGetPassword (cchar *prompt)     <p>Read a password from the console.</p> Description:Used by utility programs to read passwords from the console. Parameters:  promptPassword user prompt.  Returns:The input password. Caller must free. API Stability:Evolving. See Also: cryptMakePassword   <p></p>       int     cryptGetRandomBytes (char *buf, ssize length, bool block)     <p>Get random data.</p> Parameters:  bufResult buffer to hold the random data. lengthSize of the buffer. blockSet to true to read from a blocking random generator that will guarantee the return of random data in the situation of insufficient entropy at the time the call was made.  Returns:The input password. Caller must free. API Stability:Evolving. See Also: cryptMakePassword   <p></p>       char *     cryptGetSha256 (cuchar *block, ssize length)     <p>Get a SHA256 hash for a block and return a string hash.</p> Parameters:  blockBlock of data for which to compute the hash. If set to -1, the block is assumed to be a null terminated string. lengthLength of the data block.  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also:    <p></p>       void     cryptGetSha256Block (cuchar *block, ssize length, uchar hash)     <p>Get a SHA256 hash for a block and return a binary hash.</p> Parameters:  blockBlock of data for which to compute the hash. lengthLength of the data block. If set to -1, the block is assumed to be a null terminated string. hashArray to receive the hash result.  API Stability:Evolving. See Also: cryptGetFileSha256, cryptGetSha256   <p></p>       char *     cryptMakePassword (cchar *password, int saltLength, int rounds)     <p>Make a password using the Blowfish cipher (Bcrypt).</p> Parameters:  passwordInput plain-text password. saltLengthLength of salt text to add. roundsNumber of computation rounds. Default is 128. Longer is slower, but more secure.  Returns:The computed password hash. Caller must free. API Stability:Evolving. See Also: cryptCheckPassword, cryptGetPassword   <p></p>       void     cryptMd5Finalize (RMd5 *ctx, uchar digest)     <p>Low level MD5 hashing API to finalize an MD5 hash compuation and return a binary hash result.</p> Description:Finalize the hash computation. Parameters:  ctxMD5 context. digestMD5 array to receive the hash result.  API Stability:Evolving. See Also: cryptMd5Init, cryptMd5Update API Stability:Internal.   <p></p>       char *     cryptMd5HashToString (uchar hash)     <p>Convert an MD5 hash to a hex string.</p> Parameters:  hashPreviously computed MD5 hash.  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also: cryptGetMd5, cryptGetMd5Block   <p></p>       void     cryptMd5Init (RMd5 *ctx)     <p>Low level MD5 hashing API to initialize an MD5 hash computation.</p> Description:Initialize the hash computation. Parameters:  ctxMD5 context.  API Stability:Evolving. See Also: cryptMd5Finalize, cryptMd5Update   <p></p>       void     cryptMd5Update (RMd5 *ctx, uchar *block, uint length)     <p>Low level MD5 hashing API to update an MD5 hash computation with a block of data.</p> Description:Update the hash computation with input. Parameters:  ctxMD5 context. blockInput block to add to the hash. lengthLength of the input block.  API Stability:Evolving. See Also: cryptMd5Finalize, cryptMd5Init   <p></p>       void     cryptSha256Finalize (RSha256 *ctx, uchar hash)     <p>Low level SHA256 hashing API to finalize a SHA256 hash compuation and return a binary result.</p> Description:Finalize the hash computation and return a binary hash result. Parameters:  ctxSHA256 context. hashArray to receive the hash result.  API Stability:Evolving. See Also: cryptSha256Init, cryptSha256Start, cryptSha256Term, cryptSha256Update   <p></p>       char *     cryptSha256HashToString (uchar hash)     <p>Convert a SHA256 hash to a string.</p> Parameters:  hashHash result from cryptGetSha256Block  Returns:A hex string representation of the hash. Caller must free. API Stability:Evolving. See Also: cryptGetSha256, cryptGetSha256Block   <p></p>       void     cryptSha256Init (RSha256 *ctx)     <p>Low level SHA256 hashing API to initialize a SHA256 hash computation.</p> Description:Initialize the hash computation. Parameters:  ctxSHA256 context.  API Stability:Evolving. See Also: cryptSha256Finalize, cryptSha256Start, cryptSha256Update   <p></p>       void     cryptSha256Start (RSha256 *ctx)     <p>Low level SHA256 hashing API to start a SHA256 hash computation.</p> Description:Start the hash computation. Parameters:  ctxSHA256 context.  API Stability:Evolving. See Also: cryptSha256Finalize, cryptSha256Init, cryptSha256Term, cryptSha256Update   <p></p>       void     cryptSha256Term (RSha256 *ctx)     <p>Low level SHA256 hashing API to terminate a SHA256 hash compuation.</p> Description:Terminate (conclude) the hash computation. This erases in-memory state and should be the final step in computing a hash. Parameters:  ctxSHA256 context.  API Stability:Evolving. See Also: cryptSha256Finalize, cryptSha256Init, cryptSha256Start, cryptSha256Update   <p></p>       void     cryptSha256Update (RSha256 *ctx, cuchar *block, int length)     <p>Low level SHA256 hashing API to update a SHA256 hash computation with input data.</p> Description:Update the hash computation with a block of data. Parameters:  ctxSHA256 context. blockBlock of data to hash. lengthLength of the input block.  API Stability:Evolving. See Also: cryptSha256Finalize, cryptSha256Init, cryptSha256Start, cryptSha256Term","location":"ref/api/crypt/#crypt"},{"title":"Typedefs","text":"<p></p>  RMd5  <p>MD5 computation block.</p> API Stability:Internal. Fields:  uintstate[4] MD5 hashing state.","location":"ref/api/crypt/#typedefs_1"},{"title":"DB API","text":"<p>The DB library is a high performance NoSQL database for embedded applications. It supports fast, flexible local data access and transparent synchronization of data to the cloud. It is modeled after DynamoDB and the OneTable access library.</p> <p>DB is a NoSQL database where database items items are documents of arbitrary complexity. Data items are implemented as JSON documents and are organized into entity tables. Application entities are defined via an entity schema that specifies data fields and attributes.</p> <p>DB uses Red/black binary search indexes and has controllable local persistency to disk and to the cloud on a per-table basis.</p> <p> The embedded database is a high performance NoSQL management document database. It offers JSON document items with flexible query API with efficient import and export of database items. The database uses fast red/black binary search indexes.  </p>","location":"ref/api/db/"},{"title":"Extensions","text":"Db Embedded Database based on DynamoDB.  <p></p>","location":"ref/api/db/#extensions"},{"title":"Functions","text":"voiddbAddContext(Db *db, cchar *name, cchar *value) Add global context properties. voiddbClose(Db *db) Close a database. const DbItem*dbCreate(Db *db, cchar *model, Json *props, DbParams *params) Create a new item. cchar*dbField(const DbItem *item, cchar *fieldName) Fetch a field value from an item as a string. booldbFieldBool(const DbItem *item, cchar *fieldName) Fetch a field value from an item as a boolean. TimedbFieldDate(const DbItem *item, cchar *fieldName) Fetch a field value from an item as a date. doubledbFieldDouble(const DbItem *item, cchar *fieldName) Fetch a field value from an item as a double. int64dbFieldNumber(const DbItem *item, cchar *fieldName) Fetch a field value from an item as a number (64 bit). DbGrid*dbFind(Db *db, cchar *model, Json *props, DbParams *params) Find matching items in the database. const DbItem*dbFindOne(Db *db, cchar *model, Json *props, DbParams *params) Find the first matching item. voiddbFreeGrid(DbGrid *grid) Free a grid returned by dbFind. const DbItem*dbGet(Db *db, cchar *model, Json *props, DbParams *params) Read a matching item from the database. const cchar*dbGetError(Db *db) Get an error message for the most recent API call. cchar*dbGetField(Db *db, cchar *model, cchar *fieldName, Json *props, DbParams *params) Get a field from a matching item from the database. DbModel*dbGetItemModel(Db *db, DbItem *item) Get the model object for a data item. DbModel*dbGetModel(Db *db, cchar *name) Get the model object for a model name. Json*dbJson(cchar *fmt, ...) Parse a string into Json properties. Json*dbJsonProps(cchar *props[]) Convert a list of keyword / value pairs into a JSON object. cchar*dbNext(DbGrid *grid) Get the next key when using paginated find requests. Db*dbOpen(cchar *path, cchar *schema, int flags) Open a database. intdbRemove(Db *db, cchar *model, Json *props, DbParams *params) Remove matching items in the database. intdbSave(Db *db, cchar *filename) Save the database. const DbItem*dbSetBool(Db *db, cchar *model, cchar *fieldName, bool value, Json *props, DbParams *params) Set an item field value as a boolean. voiddbSetCallback(Db *db, DbCallback proc, void *arg) Set the database change trigger callback. const DbItem*dbSetDate(Db *db, cchar *model, cchar *fieldName, Time value, Json *props, DbParams *params) Set an item field value as a date. const DbItem*dbSetDouble(Db *db, cchar *model, cchar *fieldName, double value, Json *props, DbParams *params) Set an item field value as a double. const DbItem*dbSetField(Db *db, cchar *model, cchar *fieldName, cchar *value, Json *props, DbParams *params) Set an item field value. const DbItem*dbSetNum(Db *db, cchar *model, cchar *fieldName, int64 value, Json *props, DbParams *params) Set an item field value as a number. const DbItem*dbUpdate(Db *db, cchar *model, Json *props, DbParams *params) Update an item.  <p></p>","location":"ref/api/db/#functions"},{"title":"Typedefs","text":"DbCallbackDatabase callback on changes. DbGridDatabase grid of items returned from dbFind. DbItemDatabase items stored in RB indexes. DbModelModel schema. DbParamsDatabase parameters.  <p></p>","location":"ref/api/db/#typedefs"},{"title":"Defines","text":"#defineDB_JSON dbJson(__VA_ARGS__)   Macro for supplying API properties as a JSON parsable string.  #defineDB_MAX_ITEM\u00a0\u00a0\u00a0(256 * 1024)   Maximum database item length.  #defineDB_MAX_KEY\u00a0\u00a0\u00a01024   Maximum sort key length.  #defineDB_MAX_LOG_AGE (60 * TPS)   Maximum age of log file.  #defineDB_MAX_LOG_SIZE\u00a0\u00a0\u00a0(1024 * 1024)   Maximum sort key length.  #defineDB_PARAMS &amp; (DbParams) { __VA_ARGS__ }   Macro for supplying API parameters.  #defineDB_PROPS dbJsonProps((cchar*[]) { __VA_ARGS__, NULL })   Macro for supplying API properties as key/value pairs.  #defineDB_READ_ONLY\u00a0\u00a0\u00a00x1   Database flags.  #defineDB_JSON dbJson(__VA_ARGS__)   Macro for supplying API properties as a JSON parsable string.  #defineDB_PARAMS &amp; (DbParams) { __VA_ARGS__ }   Macro for supplying API parameters.  #defineDB_PROPS dbJsonProps((cchar*[]) { __VA_ARGS__, NULL })   Macro for supplying API properties as key/value pairs.","location":"ref/api/db/#defines"},{"title":"Db","text":"<p></p>  Db  <p>Embedded Database based on DynamoDB.</p> Description:The DB library is a high performance NoSQL in-memory database for embedded applications modeled on DynamoDB. Data items are implemented as JSON documents and are organized into tables. Application entities are defined via an entity schema that specifies data fields and attributes. Data items are JSON documents and are accessed via a flexible API and dot notation queries. DB uses Red/black binary search indexes and has controllable persistency locally to disk and to the cloud on a per-table basis. API Stability:Evolving. Fields:  DbCallbackcallback Database change notification trigger.  void *callbackArg Argument for the trigger callback.  intcode API error code.  Json *context Global context properties - overwrites API properties.  char *error API error message.  intflags Reserved.  char *journal On-disk journal of changes.  TicksjournalCreated When journal file recreated.  booljournalError Journal I/O error.  REventjournalEvent Timeout for journal save.  intjournalFd Journal file descriptor.  ssizejournalSize Current size of journal file.  TicksmaxJournalAge Maximum age of journal file before saving.  ssizemaxJournalSize Maximum size of the journal before saving.  RHash *models List of schema models.  char *path On-disk path.  RbTree *primary Red/black tree primary index.  Json *schema OneTable schema.  booltimestamps Maintain created/updated timestamps (if in schema).  cchar *type Item schema type property.     <p></p>       void     dbAddContext (Db *db, cchar *name, cchar *value)     <p>Add global context properties.</p> Description:A global context property can be added to the set of properties supplied to each API. These property values are added at the top level only. Dotted notation is not supported. Parameters:  dbDatabase instance. nameName of the property. valueProperty value to set.  API Stability:Evolving. See Also:    <p></p>       void     dbClose (Db *db)     <p>Close a database.</p> Description:This will immediately save any unsaved changes and then close the database. Parameters:  dbDatabase instance returned via dbOpen  API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbCreate (Db *db, cchar *model, Json *props, DbParams *params)     <p>Create a new item.</p> Description:Create a new item of the required model type. Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model entity to create. The model determines the valid set of properties for the created item. Set to NULL if no model is required. propsJSON object containing the item properties to create. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   bool upsert : 1; // Update on create if present. Create on update if missing.   Returns:The created database item. The DbItem \"name\" property is the indexed key value. The value \"json\" property contains the item values as a cached JSON object. Caller must not free the returned item. Returns null on errors. Use dbGetError to retrieve an error message. API Stability:Evolving. See Also:    <p></p>   cchar *     dbField (const DbItem *item, cchar *fieldName)     <p>Fetch a field value from an item as a string.</p> Description:Use to examine an item returned via dbGet or other APIs that return items. Parameters:  itemDatabase item returned from other APIs. fieldNameName of the field to examine.  Returns:The field value as a string. Caller must not free. API Stability:Evolving. See Also:    <p></p>   bool     dbFieldBool (const DbItem *item, cchar *fieldName)     <p>Fetch a field value from an item as a boolean.</p> Description:Use to examine an item returned via dbGet or other APIs that return items. Will return true if the item field value is set to \"true\" or \"1\". Parameters:  itemDatabase item returned from other APIs. fieldNameName of the field to examine.  Returns:The field value as a boolean. API Stability:Evolving. See Also:    <p></p>   Time     dbFieldDate (const DbItem *item, cchar *fieldName)     <p>Fetch a field value from an item as a date.</p> Description:Use to examine an item returned via dbGet or other APIs that return items. This requires that the date value be stored as an ISO date string. Parameters:  itemDatabase item returned from other APIs. fieldNameName of the field to examine.  Returns:The field value as a date in a Time value. This is the time in milliseconds since Jan 1 1970. API Stability:Evolving. See Also:    <p></p>       double     dbFieldDouble (const DbItem *item, cchar *fieldName)     <p>Fetch a field value from an item as a double.</p> Description:Use to examine an item returned via dbGet or other APIs that return items. This requires that the date value be stored as an ISO date string. Parameters:  itemDatabase item returned from other APIs. fieldNameName of the field to examine.  Returns:The field value as a double. API Stability:Evolving. See Also:    <p></p>   int64     dbFieldNumber (const DbItem *item, cchar *fieldName)     <p>Fetch a field value from an item as a number (64 bit).</p> Description:Use to examine an item returned via dbGet or other APIs that return items. Parameters:  itemDatabase item returned from other APIs. fieldNameName of the field to examine.  Returns:The field value as a 64 bit integer. API Stability:Evolving. See Also:    <p></p>   DbGrid *     dbFind (Db *db, cchar *model, Json *props, DbParams *params)     <p>Find matching items in the database.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for matching items. Set to NULL if no model is required. propsJSON object containing item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   int limit; // Limit the number of returned or removed items.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   cchar *next; // Next pagination token to use as the starting point for the next page of results.   DbWhere where; // Where query expression callback function.   Returns:A grid of matching items. The DbGrid returned contains a property \"items\" that is an instance of RList. Items can be enumerated or accessed using ITERATE_ITEMS, rGetNextItem and rGetItem. Caller must free the grid using dbFreeGrid. API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbFindOne (Db *db, cchar *model, Json *props, DbParams *params)     <p>Find the first matching item.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for matching items. Set to NULL if no model is required. propsJSON object containing item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   DbWhere where; // Where query expression callback function.   Returns:The first matching item. Returns null if no match found. API Stability:Evolving. See Also:    <p></p>       void     dbFreeGrid (DbGrid *grid)     <p>Free a grid returned by dbFind.</p> Parameters:  gridGrid returned by calling dbFind  API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbGet (Db *db, cchar *model, Json *props, DbParams *params)     <p>Read a matching item from the database.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for matching items. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The matching database item. The DbItem \"name\" property is the indexed key. The value \"json\" property contains the item values as a cached JSON object. If null, the \"value\" property contains the item's value as an unparsed JSON string. Use dbField to access the individual field values in the item. Caller must not free the returned item. API Stability:Evolving. See Also:    <p></p>       const cchar *     cchar* dbGetError (Db *db)     <p>Get an error message for the most recent API call.</p> Parameters:  dbDatabase instance returned via dbOpen  Returns:A static error message string. Caller must not free. API Stability:Evolving. See Also:    <p></p>   cchar *     dbGetField (Db *db, cchar *model, cchar *fieldName, Json *props, DbParams *params)     <p>Get a field from a matching item from the database.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for matching items. fieldNameName of the item field to return. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:A string containing the required field in the data item. Caller must not free. API Stability:Evolving. See Also:    <p></p>   DbModel *     dbGetItemModel (Db *db, DbItem *item)     <p>Get the model object for a data item.</p> Parameters:  dbDatabase instance. itemData item with a model type field.  Returns:A model instance. API Stability:Prototype. See Also:    <p></p>   DbModel *     dbGetModel (Db *db, cchar *name)     <p>Get the model object for a model name.</p> Parameters:  dbDatabase instance. nameModel name.  Returns:A model instance. API Stability:Prototype. See Also:    <p></p>   Json *     dbJson (cchar *fmt, ...)     <p>Parse a string into Json properties.</p> Parameters:  fmtPrintf style format string. ...Arguments to fmt.  Returns:A JSON object containing the supplied property values. API Stability:Internal. See Also:    <p></p>   Json *     dbJsonProps (cchar *props)     <p>Convert a list of keyword / value pairs into a JSON object.</p> Parameters:  propsNULL terminated array of keyword / value pairs.  Returns:A JSON object containing the supplied property values. API Stability:Internal. See Also:    <p></p>   cchar *     dbNext (DbGrid *grid)     <p>Get the next key when using paginated find requests.</p> Parameters:  gridA grid returned from a prior dbFind request.  Returns:A reference into the last item returned in the grid. API Stability:Prototype. See Also:    <p></p>   Db *     dbOpen (cchar *path, cchar *schema, int flags)     <p>Open a database.</p> Parameters:  pathFilename for from which to load and save the database when calling dbSave. On open, an initial load is performed from the file at path. schemaOneTable data schema describing the indexes and data models. flagsReserved. Set to zero.  API Stability:Evolving. See Also: dbClose   <p></p>       int     dbRemove (Db *db, cchar *model, Json *props, DbParams *params)     <p>Remove matching items in the database.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for matching items. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify. int limit; // Limit the number of items to remove.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:A count of the number of items removed. API Stability:Evolving. See Also:    <p></p>       int     dbSave (Db *db, cchar *filename)     <p>Save the database.</p> Parameters:  dbDatabase instance. filenameOptional filename to save data to. If set to NULL, the data is saved to the name given when opening the database via dbOpen  API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbSetBool (Db *db, cchar *model, cchar *fieldName, bool value, Json *props, DbParams *params)     <p>Set an item field value as a boolean.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. fieldNameName of the item field to set. valueValue to assign to the item's field. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. API Stability:Evolving. See Also:    <p></p>       void     dbSetCallback (Db *db, DbCallback proc, void *arg)     <p>Set the database change trigger callback.</p> Description:When database items are changed, the trigger callback is invoked to notify regarding the change. Parameters:  dbDatabase instance. procDatabase trigger function. argArgument to pass to the trigger function.  API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbSetDate (Db *db, cchar *model, cchar *fieldName, Time value, Json *props, DbParams *params)     <p>Set an item field value as a date.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. fieldNameName of the item field to set. valueValue to assign to the item's field. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbSetDouble (Db *db, cchar *model, cchar *fieldName, double value, Json *props, DbParams *params)     <p>Set an item field value as a double.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. fieldNameName of the item field to set. valueValue to assign to the item's field. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbSetField (Db *db, cchar *model, cchar *fieldName, cchar *value, Json *props, DbParams *params)     <p>Set an item field value.</p> Description:Update a field in an existing item. The item must already exist. Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. fieldNameName of the item field to set. valueValue to assign to the item's field. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbSetNum (Db *db, cchar *model, cchar *fieldName, int64 value, Json *props, DbParams *params)     <p>Set an item field value as a number.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. fieldNameName of the item field to set. valueValue to assign to the item's field. propsJSON object containing the item properties to match. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. API Stability:Evolving. See Also:    <p></p>       const DbItem *     DbItem* dbUpdate (Db *db, cchar *model, Json *props, DbParams *params)     <p>Update an item.</p> Parameters:  dbDatabase instance returned via dbOpen modelName of the schema model for the item. Set to NULL if no model is required. propsJSON object containing the item properties to update. Use the macro DB_PROP(name, value, ...) to specify the properties as a list of keyword / value pairs. Use DB_JSON to provide the properties as a JSON/5 string. For example: DB_PROP(\"name\", name, \"address\", \"12 Wishbury lane\") or DB_JSON(\"{role: 'user'}\"). If a model is provided, the properties are validated against the model and unknown property names will not be written to the database. paramsList of API parameters. Use the macro DB_PARAMS(key = value, ...) to specify.   cchar *index; // Name of the index to use. Defaults to \"primary\". Currently only supports \"primary\".   Returns:The updated item. Caller must not free. Returns null on errors. Use dbGetError to retrieve an error message. API Stability:Evolving. See Also:","location":"ref/api/db/#db"},{"title":"Typedefs","text":"<p></p>       typedef void(* DbCallback) (void *arg, struct Db *db, struct DbModel *model, struct DbItem *item, struct DbParams *params, cchar *cmd).     <p>Database callback on changes.</p> Parameters:  argUser argument provided to dbSetCallback. dbDatabase instance. modelDbModel reference describing the item's schema model. itemDatabase item that is changing. paramsUser params provided to the API that caused the change. cmdThe nature of the change. Set to \"create\", \"update\" or \"remove\".  API Stability:Evolving. See Also:    <p></p>       typedef RList DbGrid.     <p>Database grid of items returned from dbFind.</p> API Stability:Evolving. See Also:    <p></p>  DbItem  <p>Database items stored in RB indexes.</p> API Stability:Evolving. Fields:  uintallocatedName The name is allocated and must be freed when removed.  uintallocatedValue The value is allocated and must be freed when removed.  Json *json Parsed JSON value of the item.  char *key Indexed name of the item.  Used as the sort key.  char *value Text value of the item (JSON string).     <p></p>  DbModel  <p>Model schema.</p> Description:The model schema defines an application entity and the supported entity fields. Fields:  RHash *fields Hash of model fields.  cchar *name Name of the model.  uintsync Sync model items to the cloud.  TimesyncDelay Time to delay syncing changes to the cloud.   API Stability:Evolving.   <p></p>  DbParams  <p>Database parameters.</p> API Stability:Evolving. Fields:  cvoid *arg Argument to where callback.  boolbypass Bypass change trigger.  cchar *index Name of index to use.  Defaults to \"primary\". Currently only supports \"primary\".  intlimit Limit the number of returned or removed items.  boollog Emit trace information to the log.  cchar *next Next pagination token to use as the starting point for the next page of results.  boolupsert Update on create if present.  Create on update if missing.  DbWherewhere Where query expression callback.","location":"ref/api/db/#typedefs_1"},{"title":"Ioto API","text":"<p>The Ioto library provides some utility routines and cloud helper functions.</p> <p>Most of the Ioto API is provided by the following component libraries:</p> <ul> <li>Crypt</li> <li>Database</li> <li>Embedded Web Server</li> <li>JSON parser</li> <li>MQTT client</li> <li>Safe Runtime</li> <li>Url HTTP Client</li> </ul> <p></p>","location":"ref/api/ioto/"},{"title":"Extensions","text":"Aws AWS Support.  Ioto Ioto control structure.  <p></p>","location":"ref/api/ioto/#extensions"},{"title":"Functions","text":"intaws(Url *up, cchar *region, cchar *service, cchar *target, cchar *body, ssize bodyLen, cchar *headers, ...) Invoke an AWS API request. intawsPutFileToS3(cchar *region, cchar *bucket, cchar *key, cchar *filename) Put a file to AWS S3. intawsPutToS3(cchar *region, cchar *bucket, cchar *key, cchar *data, ssize dataLen) Put a data block to AWS S3. char*awsSign(cchar *region, cchar *service, cchar *target, cchar *method, cchar *path, cchar *query, cchar *body, ssize bodyLen, cchar *headers, ...) Create a set of signed headers to use with AWS SigV4 REST APIs. intioConfig(Json *config) User config entry point. cchar*ioGetShadow(cchar *key, cchar *defaultValue) Get a value from the shadow state. voidioInit(cchar *profile) Initialize Ioto. voidioSaveShadow(void) Save the shadow state immediately. voidioSetShadow(cchar *key, cchar *value, bool save) Set a key value in the shadow. intioStart(void) User start entry point. voidioStop(void) User stop entry point. voidioTerm(void) Terminate Ioto. ssizewebWriteItem(Web *web, const DbItem *item) Write a database item as part of a web response. ssizewebWriteItems(Web *web, const DbGrid *items) Write a grid of database items as part of a web response.  <p></p>","location":"ref/api/ioto/#functions"},{"title":"Typedefs","text":"<p></p>","location":"ref/api/ioto/#typedefs"},{"title":"Defines","text":"#defineIO_CERTIFICATE\u00a0\u00a0\u00a0\"ioto.crt\"   Name of the AWS thing certificate file.  #defineIO_CONFIG_FILE\u00a0\u00a0\u00a0\"config/config.json5\"   Name of the primary control config file.  #defineIO_DEVICE_FILE\u00a0\u00a0\u00a0\"config/device.json5\"   Name of the device identification config file.  #defineIO_KEY\u00a0\u00a0\u00a0\"ioto.key\"   Name of the AWS thing key file.  #defineIO_LOCAL_FILE\u00a0\u00a0\u00a0\"config/local.json5\"   Development overrides.  #defineIO_LOG_FILE\u00a0\u00a0\u00a0\"ioto.log\"   Name of the ioto log file.  #defineIO_LOG_GROUP\u00a0\u00a0\u00a0\"ioto\"   AWS log group name.  #defineIO_LOG_LINGER\u00a0\u00a0\u00a05000   Delay before flushing log events to the cloud.  #defineIO_LOG_MAX_EVENTS\u00a0\u00a0\u00a01000   Max log events to buffer.  #defineIO_LOG_MAX_SIZE\u00a0\u00a0\u00a032767   Max size of log events to buffer.  #defineIO_LOG_STREAM\u00a0\u00a0\u00a0\"agent\"   AWS log stream name.  #defineIO_MAX_URL\u00a0\u00a0\u00a0256   Sanity length of a URL.  #defineIO_MESSAGE_SIZE\u00a0\u00a0\u00a0128 * 1024 * 1024   Maximum MQTT message size.  #defineIO_PROVISION_FILE\u00a0\u00a0\u00a0\"provision.json5\"   Name of the device provisioning config file.  #defineIO_SAVE_DELAY\u00a0\u00a0\u00a05000   Delay before saving updated shadow state.  #defineIO_SHADOW_FILE\u00a0\u00a0\u00a0\"shadow.json5\"   Name of the persisted AWS shadow state file.  #defineIO_SIGNATURES_FILE\u00a0\u00a0\u00a0\"config/signatures.json5\"   Name of the optional REST API signatures file.  #defineIO_WEB_FILE\u00a0\u00a0\u00a0\"config/web.json5\"   Name of the web server config file.","location":"ref/api/ioto/#defines"},{"title":"Aws","text":"<p></p>  Aws  <p>AWS Support.</p> Description:This is suite of AWS helper routines that implement AWS SigV4 signed REST API requests. API Stability:Evolving. See Also: aws, awsPutFileToS3, awsPutToS3, awsSign Fields:     <p></p>       int     aws (Url *up, cchar *region, cchar *service, cchar *target, cchar *body, ssize bodyLen, cchar *headers, ...)     <p>Invoke an AWS API request.</p> Parameters:  upUrl object allocated via urlAlloc. regionAWS Region to target. serviceAWS Service name. E.g. \"s3\". targetAWS Target name. If not supplied, this is deduced from the service name and the \"x-amz-target\" header. bodyRequest body data. bodyLenLength of the request body. headersFormat string containing HTTP headers. This format string can use printf embedded tokens that will be expanded to form the HTTP headers. The header format is of the form: \"Key:Value\\n...\" with an extra new line at the end. ...Headers arguments.  API Stability:Evolving. See Also: awsPutFileToS3, awsPutToS3, awsSign   <p></p>       int     awsPutFileToS3 (cchar *region, cchar *bucket, cchar *key, cchar *filename)     <p>Put a file to AWS S3.</p> Parameters:  regionAWS Region to target. bucketAWS S3 bucket name. keyAWS S3 bucket key (filename). If set to null, the key is set to the filename. filenameFile name to put to S3.  API Stability:Evolving. See Also: aws, awsPutToS3, awsSign   <p></p>       int     awsPutToS3 (cchar *region, cchar *bucket, cchar *key, cchar *data, ssize dataLen)     <p>Put a data block to AWS S3.</p> Parameters:  regionAWS Region to target. bucketAWS S3 bucket name. keyAWS S3 bucket key (filename). dataData block to write to S3. dataLenLength of the data block.  API Stability:Evolving. See Also: aws, awsPutFileToS3, awsSign   <p></p>       char *     awsSign (cchar *region, cchar *service, cchar *target, cchar *method, cchar *path, cchar *query, cchar *body, ssize bodyLen, cchar *headers, ...)     <p>Create a set of signed headers to use with AWS SigV4 REST APIs.</p> Description:The AWS SDK is big and relatively slow. If you only need a few AWS APIs, you can use the AWS REST APIs and avoid the AWS SDK. This routine processes HTTP request parameters to create a set of signed HTTP headers that can be used with the URL HTTP client. Parameters:  regionAWS Region to target. serviceAWS Service name. E.g. \"s3\". targetAWS Target name. If not supplied, this is deduced from the service name and the \"x-amz-target\" header. methodHTTP method to utilize. pathURL request path. queryURL request query. bodyRequest body data. bodyLenLength of the request body. headersFormat string containing HTTP headers. This format string can use printf embedded tokens that will be expanded to form the HTTP headers. The header format is of the form: \"Key:Value\\n...\" with an extra new line at the end. ...Headers arguments.  Returns:The HTTP headers to use with a URL HTTP client request. Caller must free. API Stability:Evolving. See Also: aws, awsPutFileToS3, awsPutToS3","location":"ref/api/ioto/#aws"},{"title":"Ioto","text":"<p></p>  Ioto  <p>Ioto control structure.</p> API Stability:Evolving. Fields:  cchar *accountId Owning manager accountId.  cchar *api Device cloud API endpoint.  cchar *apiToken Device cloud API authentication token.  Json *auth Auth configuraiton.  cchar *awsAccess AWS temp creds.  TimeawsExpires AWS cred expiry.  cchar *awsRegion Default AWS region.  cchar *awsSecret AWS cred secret.  cchar *awsToken AWS cred token.  cchar *builder Builder API endpoint.  boolcloudService Embedded database service.  Json *config Configuration.  Db *db Structured state database.  cchar *endpoint Device cloud API endpoint.  interrors Enforce strict signature compliance.  cchar *id Claim ID.  char *instance Network error count.  EC2 instance.  boolkeyService Manufacturing serialization.  cchar *loadPath Database file to load.  struct IotoLog *log Cloud Watch Log object.  cchar *logDir Directory for Ioto log files.  RList *logs Log file ingestion list.  boollogService AWS IAM key generation.  Mqtt *mqtt Mqtt object.  boolmqttService Log file ingest to CloudWatch logs.  char *profile Run profile.  Defaults to \"prod\".  boolprovisionService MQTT service.  boolregistered Web server.  boolregisterService Cloud provisioning service.  boolserializeService AWS IoT core service.  Json *shadow Shadow state.  cchar *shadowName AWS IoT shadow name.  boolshadowService Device registration service.  char *shadowTopic AWS IoT shadow topic.  Json *signatures Web Rest API signatures.  cchar *stateDir Directory for state files.  boolstrictSignatures Device has been registered.  boolsyncService AWS IoT core shadows.  Json *template Properties for templates.  cchar *thing Device Thing Name (same as claim ID).  cchar *version Your software version number (not Ioto version).  WebHost *webHost Web server host.  boolwebService Sync device state to AWS.     <p></p>       int     ioConfig (Json *config)     <p>User config entry point.</p> Description:The ioConfig function is invoked when Ioto has read its configuration into ioto-&gt;config and before Ioto initializes services. Users can provide their own ioConfig function and link with the Ioto library. Ioto will then invoke the user's ioConfig for custom configuratoiun. API Stability:Evolving. See Also: ioStart, ioStop   <p></p>   cchar *     ioGetShadow (cchar *key, cchar *defaultValue)     <p>Get a value from the shadow state.</p> Parameters:  keyProperty key value. May contain dots. defaultValueDefault value to return if the key is not found.  API Stability:Evolving. See Also:    <p></p>       void     ioInit (cchar *profile)     <p>Initialize Ioto.</p> Parameters:  profileConfiguration profile. Defaults to \"prod\".  API Stability:Evolving. See Also:    <p></p>       void     ioSaveShadow (void )     <p>Save the shadow state immediately.</p> API Stability:Evolving. See Also:    <p></p>       void     ioSetShadow (cchar *key, cchar *value, bool save)     <p>Set a key value in the shadow.</p> Parameters:  keyProperty key value. May contain dots. valueValue to set. saveSet to true to persist immediately.  API Stability:Evolving. See Also:    <p></p>       int     ioStart (void )     <p>User start entry point.</p> Description:The ioStart function is invoked when Ioto is fully initialized and ready to start. Users can provide their own ioStart and ioStop functions and link with the Ioto library. Ioto will then invoke the user's ioStart for custom initialization. API Stability:Evolving. See Also: ioConfig, ioStop   <p></p>       void     ioStop (void )     <p>User stop entry point.</p> Description:The ioStop function is invoked when Ioto is shutting down. Users can provide their own ioStart function and link with the Ioto library. Ioto will then invoke the user's ioStop for custom shutdown cleanup. API Stability:Evolving. See Also: ioConfig, ioStart   <p></p>       void     ioTerm (void )     <p>Terminate Ioto.</p> API Stability:Evolving. See Also:    <p></p>   ssize     webWriteItem (Web *web, const DbItem *item)     <p>Write a database item as part of a web response.</p> Description:This routine serialize a database item into JSON and write it as a response. Parameters:  webWeb object. itemDatabase item.  Returns:The number of bytes written. API Stability:Evolving. See Also:    <p></p>   ssize     webWriteItems (Web *web, const DbGrid *items)     <p>Write a grid of database items as part of a web response.</p> Description:This routine serializes a database grid into JSON and write it as a response. Parameters:  webWeb object. itemsGrid of database items.  Returns:The number of bytes written. API Stability:Evolving. See Also:","location":"ref/api/ioto/#ioto"},{"title":"Typedefs","text":"","location":"ref/api/ioto/#typedefs_1"},{"title":"JSON API","text":"<p>The JSON library provides JSON parsing, serialization and query capabilities. The library can parse strings and read files containing JSON text.</p> <p>JSON can be read and serialized in strict JSON or in the more human readable JSON/5 format. When parsed, JSON is stored in-memory in a binary search tree for efficient querying. The library supports searching, querying and updating JSON values using dot and array notation.</p> <p>The library supports the JSON and JSON/5 formats. JSON/5 is an extension of JSON that makes it easier to create, read and maintain configuration files in JSON. JSON/5 supports the following features to JSON:</p> <ul> <li>Object keys may be JavaScript identifiers without quotes.</li> <li>Objects or arrays may have a trailing comma.</li> <li>Strings may be single quoted.</li> <li>Strings may span multiple lines (single, double or back-tick quotes).</li> <li>Numbers may have a leading or trailing decimal point, be hexadecimal, may begin with a plus</li> <li>Values may be regular expressions.</li> <li>Undefined is a valid value.</li> <li>Single and multiline comments are allowed and preserved.</li> </ul> <p></p>","location":"ref/api/json/"},{"title":"Extensions","text":"Json JSON Object.  <p></p>","location":"ref/api/json/#extensions"},{"title":"Functions","text":"Json*jsonAlloc(int flags) Allocate a json object. intjsonBlend(Json *dest, int did, cchar *dkey, Json *src, int sid, cchar *skey, int flags) Blend nodes by copying from one Json to another. Json*jsonClone(Json *src, int flags) Clone a json object. voidjsonFree(Json *json) Free a json object. cchar*jsonGet(Json *json, int nid, cchar *key, cchar *defaultValue) Get a json node value as a string. booljsonGetBool(Json *json, int nid, cchar *key, bool defaultValue) Get a json node value as a boolean. JsonNode*jsonGetChildNode(Json *json, int nid, int nth) Get the Nth child node for a json node. intjsonGetId(Json *json, int nid, cchar *key) Get a json node ID. JsonNode*jsonGetNode(Json *json, int nid, cchar *key) Get a json node object. intjsonGetNum(Json *json, int nid, cchar *key, int defaultValue) Get a json node value as an integer. intjsonGetType(Json *json, int nid, cchar *key) Get the value type for a node. Json*jsonParse(cchar *text, int flags) Parse a json string into a json object. Json*jsonParseFile(cchar *path, char **errorMsg, int flags) Load a JSON object from a filename. Json*jsonParseString(cchar *text, char **errorMsg, int flags) Parse a JSON string into an object tree and return any errors. voidjsonPrint(cchar *label, Json *json) Print a JSON object. intjsonRemove(Json *obj, int nid, cchar *key) Remove a Property from a JSON object. intjsonSave(Json *obj, int nid, cchar *key, cchar *path, int mode, int flags) Save a JSON object to a filename. intjsonSet(Json *obj, int nid, cchar *key, cchar *value, int type) Update a key/value in the JSON object with a string value. intjsonSetBool(Json *obj, int nid, cchar *key, bool value) Update a property in the JSON object with a boolean value. intjsonSetDate(Json *json, int nid, cchar *key, Time value) Update a property in the JSON object with date value. intjsonSetDouble(Json *json, int nid, cchar *key, double value) Update a property with a floating point number value. voidjsonSetNodeType(JsonNode *node, int type) Update a node type. voidjsonSetNodeValue(JsonNode *node, cchar *value, int type, int flags) Directly update a node value. intjsonSetNumber(Json *json, int nid, cchar *key, int64 value) Update a property in the JSON object with a numeric value. cchar*jsonString(Json *json) Serialize an entire JSON object into a string using a human readable format (JSON_PRETTY). char*jsonTemplate(Json *json, cchar *str) Expand a string template with ${prop.prop...} references. voidjsonToBuf(RBuf *buf, cchar *value, int flags) Convert a json value to serialized JSON representation and save in the given buffer. char*jsonToString(Json *json, int nid, cchar *key, int flags) Serialize a JSON object into a string.  <p></p>","location":"ref/api/json/#functions"},{"title":"Typedefs","text":"JsonNodeJSON Node.  <p></p>","location":"ref/api/json/#typedefs"},{"title":"Defines","text":"#defineITERATE_JSON\u00a0\u00a0\u00a0    nid = (int) ((parent ? parent : json-&gt;nodes) - json-&gt;nodes + 1); \\         (json-&gt;count &gt; 0) &amp;&amp; json-&gt;nodes &amp;&amp; \\         (nid &lt; (parent ? parent : json-&gt;nodes)-&gt;last) &amp;&amp; \\         ((child = &amp;json-&gt;nodes[nid]) != 0); \\     nid = child-&gt;last   This iterates over the children under the \"parent\" id.  #defineJSON_APPEND\u00a0\u00a0\u00a00x4   Default to append to existing '+' (default).  #defineJSON_CCREATE\u00a0\u00a0\u00a00x10   Conditional create if not already existing '?'.  #defineJSON_COMBINE\u00a0\u00a0\u00a00x1   Combine properies using '+' '-' '=' '?' prefixes.  #defineJSON_OVERWRITE\u00a0\u00a0\u00a00x2   Default to overwrite existing properies '='.  #defineJSON_PASS_TEXT\u00a0\u00a0\u00a00x4   Transfer ownership of the parsed text to json.  #defineJSON_PRETTY\u00a0\u00a0\u00a00x10   Save in Json6 format without quotes arounds keys.  #defineJSON_PRIMITIVE\u00a0\u00a0\u00a00x10   True, false, null, undefined, number.  #defineJSON_QUOTES\u00a0\u00a0\u00a00x20   Save in strict JSON format.  #defineJSON_REGEXP\u00a0\u00a0\u00a00x20   Regular expressions.  #defineJSON_REMOVE_UNDEF\u00a0\u00a0\u00a00x20   Remove undefined (NULL) properties.  #defineJSON_REPLACE\u00a0\u00a0\u00a00x8   Replace existing properies '-'.  #defineJSON_SINGLE\u00a0\u00a0\u00a00x2   Save objects on a sinle line where possible.  #defineJSON_STRICT\u00a0\u00a0\u00a00x1   Expect strict JSON format.  #defineJSON_STRING\u00a0\u00a0\u00a00x8   Strings including dates encoded as ISO strings.","location":"ref/api/json/#defines"},{"title":"Json","text":"<p></p>  Json  <p>JSON Object.</p> API Stability:Evolving. See Also:  Fields:  uintcount Number of allocated nodes (count &lt;= size).  char *end End of text + 1.  char *errorMsg Parsing error details.  REventevent Saving event.  uintflags Use defined bits.  uintlineNumber Current parse line number.  char *next Pointer to next token.  char *path Filename being parsed.  uintsize Size of Json.nodes in elements (includes spare).  uintstrict Strict JSON standard mode.  char *text Text being parsed.  char *value Result from jsonString.     <p></p>   Json *     jsonAlloc (int flags)     <p>Allocate a json object.</p> Parameters:  flagsSet to one JSON_STRICT for strict JSON parsing. Otherwise permits JSON/5.  Returns:A json object. API Stability:Evolving. See Also:    <p></p>       int     jsonBlend (Json *dest, int did, cchar *dkey, Json *src, int sid, cchar *skey, int flags)     <p>Blend nodes by copying from one Json to another.</p> Description:This performs an N-level deep clone of the source JSON nodes to be blended into the destination object. By default, this add new object properies and overwrite arrays and string values. The Property combination prefixes: '+', '=', '-' and '?' to append, overwrite, replace and conditionally overwrite are supported if the JSON_COMBINE flag is present. Parameters:  destDestination json. didBase node ID from which to store the copied nodes. dkeyDestination property name to search for. srcSource json. sidBase node ID from which to copy nodes. skeySource property name to search for. flagsThe JSON_COMBINE flag enables Property name prefixes: '+', '=', '-', '?' to append, overwrite, replace and conditionally overwrite key values if not already present. When adding string properies, values will be appended using a space separator. Extra spaces will not be removed on replacement.   Without JSON_COMBINE or for properies without a prefix, the default is to blend objects by creating new properies if not already existing in the destination, and to treat overwrite arrays and strings. Use the JSON_OVERWRITE flag to override the default appending of objects and rather overwrite existing properies. Use the JSON_APPEND flag to override the default of overwriting arrays and strings and rather append to existing properies.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   Json *     jsonClone (Json *src, int flags)     <p>Clone a json object.</p> Parameters:  srcInput json object. flagsReserved, set to zero.  Returns:The copied JSON tree. Caller must free with jsonFree API Stability:Evolving. See Also:    <p></p>       void     jsonFree (Json *json)     <p>Free a json object.</p> Parameters:  jsonA json object.  API Stability:Evolving. See Also:    <p></p>   cchar *     jsonGet (Json *json, int nid, cchar *key, cchar *defaultValue)     <p>Get a json node value as a string.</p> Parameters:  jsonSource json. nidBase node ID from which to examine. Set to zero for the top level. keyProperty name to search for. This may include \".\". For example: \"settings.mode\". defaultValueIf the key is not defined, return the defaultValue.  Returns:The key value as a string or defaultValue if not defined. API Stability:Evolving. See Also:    <p></p>   bool     jsonGetBool (Json *json, int nid, cchar *key, bool defaultValue)     <p>Get a json node value as a boolean.</p> Parameters:  jsonSource json. nidBase node ID from which to examine. Set to zero for the top level. keyProperty name to search for. This may include \".\". For example: \"settings.mode\". defaultValueIf the key is not defined, return the defaultValue.  Returns:The key value as a boolean or defaultValue if not defined. API Stability:Evolving. See Also:    <p></p>   JsonNode *     jsonGetChildNode (Json *json, int nid, int nth)     <p>Get the Nth child node for a json node.</p> Parameters:  jsonSource json. nidBase node ID to examine. nthSpecify which child to return.  Returns:The Nth child node object for the specified node. API Stability:Evolving. See Also:    <p></p>       int     jsonGetId (Json *json, int nid, cchar *key)     <p>Get a json node ID.</p> Parameters:  jsonSource json. nidBase node ID from which to start the search. Set to zero for the top level. keyProperty name to search for. This may include \".\". For example: \"settings.mode\".  Returns:The node ID for the specified key. API Stability:Evolving. See Also:    <p></p>   JsonNode *     jsonGetNode (Json *json, int nid, cchar *key)     <p>Get a json node object.</p> Parameters:  jsonSource json. nidBase node ID from which to start the search. Set to zero for the top level. keyProperty name to search for. This may include \".\". For example: \"settings.mode\".  Returns:The node object for the specified key. Returns NULL if not found. API Stability:Evolving. See Also:    <p></p>       int     jsonGetNum (Json *json, int nid, cchar *key, int defaultValue)     <p>Get a json node value as an integer.</p> Parameters:  jsonSource json. nidBase node ID from which to examine. Set to zero for the top level. keyProperty name to search for. This may include \".\". For example: \"settings.mode\". defaultValueIf the key is not defined, return the defaultValue.  Returns:The key value as an integer or defaultValue if not defined. API Stability:Evolving. See Also:    <p></p>       int     jsonGetType (Json *json, int nid, cchar *key)     <p>Get the value type for a node.</p> Parameters:  jsonSource json. nidBase node ID from which to start the search. keyProperty name to search for. This may include \".\". For example: \"settings.mode\".  Returns:The data type. Set to JSON_OBJECT, JSON_ARRAY, JSON_COMMENT, JSON_STRING, JSON_PRIMITIVE or JSON_REGEXP. API Stability:Evolving. See Also:    <p></p>   Json *     jsonParse (cchar *text, int flags)     <p>Parse a json string into a json object.</p> Description:Use this method if you are sure the supplied JSON text is valid. Use jsonParseString if you need to receive notification of parse errors. Parameters:  textJson string to parse. flagsSet to JSON_STRICT to parse json, otherwise a relaxed json6 syntax is supported. Set JSON_PASS_TEXT to transfer ownership of the text to json which will free when jsonFree is called.  Returns:Json object if successful. Caller must free via jsonFree. Returns null if the text will not parse. API Stability:Evolving. See Also:    <p></p>   Json *     jsonParseFile (cchar *path, char **errorMsg, int flags)     <p>Load a JSON object from a filename.</p> Parameters:  pathFilename path containing a JSON string to load. errorMsgError message string set if the parse fails. Caller must not free. flagsSet to JSON_STRICT to parse json, otherwise a relaxed json6 syntax is supported.  Returns:JSON object tree. Caller must free errorMsg via rFree on errors. API Stability:Evolving. See Also:    <p></p>   Json *     jsonParseString (cchar *text, char **errorMsg, int flags)     <p>Parse a JSON string into an object tree and return any errors.</p> Description:Deserializes a JSON string created into an object. The top level of the JSON string must be an object, array, string, number or boolean value. Parameters:  textJSON string to deserialize. errorMsgError message string set if the parse fails. Caller must not free. flagsSet to JSON_STRICT to parse json, otherwise a relaxed json6 syntax is supported. Set JSON_PASS_TEXT to transfer ownership of the text to json which will free when jsonFree is called.  Returns:Returns a tree of Json objects. Each object represents a level in the JSON input stream. Caller must free errorMsg via rFree on errors. API Stability:Evolving. See Also:    <p></p>       void     jsonPrint (cchar *label, Json *json)     <p>Print a JSON object.</p> Description:Prints a JSON object in pretty format. Parameters:  labelText label to print before the json object. jsonSource json.  API Stability:Evolving. See Also:    <p></p>       int     jsonRemove (Json *obj, int nid, cchar *key)     <p>Remove a Property from a JSON object.</p> Parameters:  objParsed JSON object returned by jsonParse. nidBase node ID from which to start searching for key. Set to zero for the top level. keyProperty name to remove for. This may include \".\". For example: \"settings.mode\".  Returns:Returns a JSON object array of all removed properies. Array will be empty if not qualifying properies were found and removed. API Stability:Evolving. See Also:    <p></p>       int     jsonSave (Json *obj, int nid, cchar *key, cchar *path, int mode, int flags)     <p>Save a JSON object to a filename.</p> Parameters:  objParsed JSON object returned by jsonParse. nidBase node ID from which to start searching for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". pathFilename path to contain the saved JSON string. flagsSame flags as for jsonToString: JSON_PRETTY, JSON_QUOTES. modePermissions mode.  Returns:Zero if successful, otherwise a negative RT error code. API Stability:Evolving. See Also:    <p></p>       int     jsonSet (Json *obj, int nid, cchar *key, cchar *value, int type)     <p>Update a key/value in the JSON object with a string value.</p> Description:This call takes a multipart Property name and will operate at any level of depth in the JSON object. Parameters:  objParsed JSON object returned by jsonParse. nidBase node ID from which to start search for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". valueCharacter string value. typeSet to JSON_ARRAY, JSON_OBJECT, JSON_PRIMITIVE or JSON_STRING.  Returns:Positive node id if updated successfully. Otherwise a negative error code. API Stability:Evolving. See Also:    <p></p>       int     jsonSetBool (Json *obj, int nid, cchar *key, bool value)     <p>Update a property in the JSON object with a boolean value.</p> Description:This call takes a multipart Property name and will operate at any level of depth in the JSON object. Parameters:  objParsed JSON object returned by jsonParse. nidBase node ID from which to start search for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". valueBoolean string value.  Returns:Positive node id if updated successfully. Otherwise a negative error code. API Stability:Evolving. See Also:    <p></p>       int     jsonSetDate (Json *json, int nid, cchar *key, Time value)     <p>Update a property in the JSON object with date value.</p> Description:This call takes a multipart Property name and will operate at any level of depth in the JSON object. Parameters:  jsonParsed JSON object returned by jsonParse. nidBase node ID from which to start search for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". valueDate value expressed as a Time (Elapsed milliseconds since Jan 1, 1970).  Returns:Positive node id if updated successfully. Otherwise a negative error code. API Stability:Evolving. See Also:    <p></p>       int     jsonSetDouble (Json *json, int nid, cchar *key, double value)     <p>Update a property with a floating point number value.</p> Description:This call takes a multipart Property name and will operate at any level of depth in the JSON object. Parameters:  jsonParsed JSON object returned by jsonParse. nidBase node ID from which to start search for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". valueDouble floating point value.  Returns:Positive node id if updated successfully. Otherwise a negative error code. API Stability:Evolving. See Also:    <p></p>       void     jsonSetNodeType (JsonNode *node, int type)     <p>Update a node type.</p> Description:This is an internal API and is subject to change without notice. It offers a higher performance path to update node types. Parameters:  nodeJson node. typeJson node type.  API Stability:Internal. See Also:    <p></p>       void     jsonSetNodeValue (JsonNode *node, cchar *value, int type, int flags)     <p>Directly update a node value.</p> Description:This is an internal API and is subject to change without notice. It offers a higher performance path to update node values. Parameters:  nodeJson node. valueString value to update with. typeJson node type. flagsSet to JSON_PASS_TEXT to transfer ownership of a string. JSON will then free.  API Stability:Internal. See Also:    <p></p>       int     jsonSetNumber (Json *json, int nid, cchar *key, int64 value)     <p>Update a property in the JSON object with a numeric value.</p> Description:This call takes a multipart Property name and will operate at any level of depth in the JSON object. Parameters:  jsonParsed JSON object returned by jsonParse. nidBase node ID from which to start search for key. Set to zero for the top level. keyProperty name to add/update. This may include \".\". For example: \"settings.mode\". valueNumber to update.  Returns:Positive node id if updated successfully. Otherwise a negative error code. API Stability:Evolving. See Also:    <p></p>   cchar *     jsonString (Json *json)     <p>Serialize an entire JSON object into a string using a human readable format (JSON_PRETTY).</p> Parameters:  jsonSource json.  Returns:Returns a serialized JSON character string. Caller must free. API Stability:Evolving. See Also:    <p></p>       char *     jsonTemplate (Json *json, cchar *str)     <p>Expand a string template with ${prop.prop...} references.</p> Parameters:  jsonJson object. strString template to expand.  Returns:An allocated expanded string. Caller must free. API Stability:Evolving. See Also:    <p></p>       void     jsonToBuf (RBuf *buf, cchar *value, int flags)     <p>Convert a json value to serialized JSON representation and save in the given buffer.</p> Parameters:  bufDestination buffer. valueValue to convert. flagsJson flags.  API Stability:Evolving. See Also:    <p></p>       char *     jsonToString (Json *json, int nid, cchar *key, int flags)     <p>Serialize a JSON object into a string.</p> Description:Serializes a top level JSON object created via jsonParse into a characters string in JSON format. Parameters:  jsonSource json. nidBase node ID from which to convert. Set to zero for the top level. keyProperty name to serialize below. This may include \".\". For example: \"settings.mode\". flagsSerialization flags. Supported flags include JSON_PRETTY for a human-readable multiline format. JSON_QUOTES to wrap Property names in quotes. Use JSON_QUOTES to emit all Property values as quoted strings.  Returns:Returns a serialized JSON character string. Caller must free. API Stability:Evolving. See Also:","location":"ref/api/json/#json"},{"title":"Typedefs","text":"<p></p>  JsonNode  <p>JSON Node.</p> API Stability:Evolving. Fields:  uintallocatedName True if the node text was allocated and must be freed.  uintallocatedValue True if the node text was allocated and must be freed.  intlast Index +1 of last node for which this node is parent.  char *name Property name - null terminated.  uinttype Primitive type of the node (object, array, string or primitive).  char *value Property value - null terminated.","location":"ref/api/json/#typedefs_1"},{"title":"MQTT API","text":"<p>This Library is a high-performance [MQTT] library for IoT publish/subscribe communications.</p> <p>The library supports MQTT version 3.1.1 and has the following features:</p> <ul> <li>Supports connect, publish, subscribe, ping and disconnect messages.</li> <li>Message quality of service for reliable delivery.</li> <li>Retained messages.</li> <li>TLS encryption with ALPN over port 443.</li> <li>High message throughput with exceptionally low overhead.</li> <li>Wait for delivery or acknowledgement options.</li> <li>Auto reconnect on network failures.</li> <li>Parallelism via fiber coroutines.</li> </ul> <p></p>","location":"ref/api/mqtt/"},{"title":"Extensions","text":"Mqtt MQTT Protocol.  <p></p>","location":"ref/api/mqtt/#extensions"},{"title":"Functions","text":"Mqtt*mqttAlloc(RSocket *sock, cchar *clientId, MqttEventProc proc) Allocate an MQTT object. intmqttConnect(Mqtt *mq, cchar *username, cchar *password, int flags, MqttWaitFlags waitFlags) Establish a session with the MQTT broker. voidmqttFree(Mqtt *mq) Free an Mqtt instance. cchar*mqttGetError(struct Mqtt *mq) Returns an error message for error code, error. boolmqttIsConnected(Mqtt *mq) Return true if the MQTT instance is connected to a peer. intmqttMsgsInQueue(Mqtt *mq) Get the number of messages to send in the send queue. intmqttMsgsToSend(Mqtt *mq) Get the number of messages in the queue. intmqttPing(Mqtt *mq) Ping the broker. intmqttPublish(Mqtt *mq, cvoid *msg, ssize size, int qos, MqttWaitFlags waitFlags, cchar *topic, ...) Publish an application message to the MQTT broker. intmqttPublishRetained(Mqtt *mq, cvoid *msg, ssize size, int qos, MqttWaitFlags waitFlags, cchar *topic, ...) Publish a retained message to the MQTT broker. voidmqttSetMessageSize(Mqtt *mq, int size) Set the maximum message size. voidmqttSetWill(Mqtt *mq, cchar *topic, cvoid *msg, ssize length) Set the will and testament message. intmqttSubscribe(Mqtt *mq, MqttCallback callback, int maxQos, MqttWaitFlags waitFlags, cchar *topic, ...) Subscribe to a topic. intmqttUnsubscribe(Mqtt *mq, cchar *topic, MqttWaitFlags wait) Unsubscribe from a topic.  <p></p>","location":"ref/api/mqtt/#functions"},{"title":"Typedefs","text":"MqttMQTT instance. MqttCallbackMessage receipt callback. MqttEventProcMQTt event callback. MqttHdrFixed header of a packet. MqttMsgMqtt message. MqttRecvA struct used to deserialize/interpret an incoming packet from the broker.  <p></p>","location":"ref/api/mqtt/#typedefs"},{"title":"Defines","text":"#defineMQTT_BUF_SIZE\u00a0\u00a0\u00a04096   Receive buffer size.  #defineMQTT_EVENT_CONNECT\u00a0\u00a0\u00a01   A new connection was established.  #defineMQTT_EVENT_DISCONNECT\u00a0\u00a0\u00a02   The connection was terminated.  #defineMQTT_EVENT_STOPPING\u00a0\u00a0\u00a03   The application is stopping.  #defineMQTT_INLINE_BUF_SIZE\u00a0\u00a0\u00a0128   Size of inline buffer.  #defineMQTT_KEEP_ALIVE\u00a0\u00a0\u00a0(20 * 60)   Default connection keep alive time in seconds.  #defineMQTT_MAX_MESSAGE_SIZE\u00a0\u00a0\u00a0256 * 1024 * 1024   Max message size.  #defineMQTT_MSG_TIMEOUT\u00a0\u00a0\u00a030   Default message timeout in seconds.  #defineMQTT_PROTOCOL_LEVEL\u00a0\u00a0\u00a00x04   Protocol version 3.1.1.  #defineMQTT_TOPIC_SIZE\u00a0\u00a0\u00a0128   Max topic size.  #defineMQTT_PROTOCOL_LEVEL\u00a0\u00a0\u00a00x04   Protocol version 3.1.1.","location":"ref/api/mqtt/#defines"},{"title":"Mqtt","text":"<p></p>  Mqtt  <p>MQTT Protocol.</p> API Stability:Evolving. Fields:  RBuf *buf I/O read buffer.  uintconnected Mqtt is currently connected flag.  interror Mqtt error flag.  char *errorMsg Mqtt error message.  MqttMsghead Head of message queue.  char *id Client ID.  intkeepAlive Keep alive duration in seconds.  time_tlastSend Time of last send in seconds.  intmask R library wait event mask.  intmaxMessage Maximum message size.  intmsgTimeout Message timeout for retransmit.  intnextId Next message ID.  MqttEventProcproc Notification event callback   RSocket *sock Underlying socket transport.  uintsubscribedApi Reserved.  RList *topics List of subscribed topics.  char *willMsg Will and testament message.  ssizewillMsgSize Size of will message.  char *willTopic Will and testament topic.     <p></p>   Mqtt *     mqttAlloc (RSocket *sock, cchar *clientId, MqttEventProc proc)     <p>Allocate an MQTT object.</p> Description:This layers an MQTT transport over an existing connected socket. Parameters:  sockA connected socket object created via rAllocSocket and rConnectSocket. clientIdUnique client identifier string. procEvent notification callback procedure.  API Stability:Evolving. See Also:    <p></p>       int     mqttConnect (Mqtt *mq, cchar *username, cchar *password, int flags, MqttWaitFlags waitFlags)     <p>Establish a session with the MQTT broker.</p> Parameters:  mqThe Mqtt object. usernameThe username to use when establishing the session with the MQTT broker. Set to NULL if a username is not required. passwordThe password to use when establishing the session with the MQTT broker. Set to NULL if a password is not required. flagsAdditional MqttConnectFlags to use when establishing the connection. These flags are for forcing the session to start clean: MQTT_CONNECT_CLEAN_SESSION, the QOS level to publish the will and testament messages with, and whether or not the broker should retain the will_message, MQTT_CONNECT_WILL_RETAIN. waitFlagsWait flags. Set to MQTT_WAIT_NONE, MQTT_WAIT_SENT or MQTT_WAIT_ACK.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   cchar *     mqttGetError (struct Mqtt *mq)     <p>Returns an error message for error code, error.</p> Parameters:  mqMqtt object.  Returns:The associated error message. API Stability:Evolving. See Also:    <p></p>   bool     mqttIsConnected (Mqtt *mq)     <p>Return true if the MQTT instance is connected to a peer.</p> Parameters:  mqThe MQTT mq.  Returns:True if connected. API Stability:Prototype. See Also:    <p></p>       int     mqttMsgsInQueue (Mqtt *mq)     <p>Get the number of messages to send in the send queue.</p> Parameters:  mqThe MQTT mq.  Returns:The number of messages in the queue to send. API Stability:Evolving. See Also:    <p></p>       int     mqttMsgsToSend (Mqtt *mq)     <p>Get the number of messages in the queue.</p> Parameters:  mqThe MQTT mq.  Returns:The number of messages in the queue. API Stability:Evolving. See Also:    <p></p>       int     mqttPing (Mqtt *mq)     <p>Ping the broker.</p> Parameters:  mqThe MQTT mq.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>       int     mqttPublish (Mqtt *mq, cvoid *msg, ssize size, int qos, MqttWaitFlags waitFlags, cchar *topic, ...)     <p>Publish an application message to the MQTT broker.</p> Parameters:  mqThe Mqtt object. msgThe data to be published. sizeThe size of application_message in bytes. qosQuality of service. 0, 1, or 2. waitFlagsWait flags. topicPrintf style topic string. ...Topic args.  Returns:Zero if successful. See Also:    <p></p>       int     mqttPublishRetained (Mqtt *mq, cvoid *msg, ssize size, int qos, MqttWaitFlags waitFlags, cchar *topic, ...)     <p>Publish a retained message to the MQTT broker.</p> Parameters:  mqThe Mqtt object. msgThe data to be published. sizeThe size of application_message in bytes. qosQuality of service. 0, 1, or 2. waitFlagsWait flags. topicPrintf style topic string. ...Topic args.  Returns:Zero if successful. See Also:    <p></p>       void     mqttSetMessageSize (Mqtt *mq, int size)     <p>Set the maximum message size.</p> Description:AWS supports a smaller maximum message size. Parameters:  mqThe MQTT mq. sizeThe maximum message size.  API Stability:Evolving. See Also:    <p></p>       void     mqttSetWill (Mqtt *mq, cchar *topic, cvoid *msg, ssize length)     <p>Set the will and testament message.</p> Parameters:  mqThe MQTT mq. topicWill message topic. msgMessage to send. lengthMessage size.  API Stability:Evolving. See Also:    <p></p>       int     mqttSubscribe (Mqtt *mq, MqttCallback callback, int maxQos, MqttWaitFlags waitFlags, cchar *topic, ...)     <p>Subscribe to a topic.</p> Parameters:  mqMqtt object. callbackFunction to invoke on receipt of messages. maxQosMaximum quality of service message to receive. waitFlagsWait flags. topicPrintf style topic string. ...Topic args.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>       int     mqttUnsubscribe (Mqtt *mq, cchar *topic, MqttWaitFlags wait)     <p>Unsubscribe from a topic.</p> Parameters:  mqThe MQTT mq. topicThe name of the topic to unsubscribe from. waitWait flags.  Returns:Zero if successful. API Stability:Evolving. See Also:","location":"ref/api/mqtt/#mqtt"},{"title":"Functions","text":"<p></p>       void     mqttFree (Mqtt *mq)     <p>Free an Mqtt instance.</p> Parameters:  mqMqtt instance allocated via mqttAlloc","location":"ref/api/mqtt/#functions_1"},{"title":"Typedefs","text":"<p></p>       typedef void(* MqttCallback) (struct MqttRecv *resp).     <p>Message receipt callback.</p> Parameters:  respMessage received structure.  API Stability:Evolving. See Also:    <p></p>       typedef void(* MqttEventProc) (struct Mqtt *mq, int event).     <p>MQTt event callback.</p> Parameters:  mqMqtt object created via mqttAlloc eventEvent type, set to MQTT_EVENT_CONNECT, MQTT_EVENT_DISCONNECT or MQTT_EVENT_STOPPING.  API Stability:Evolving. See Also:    <p></p>  Mqtt  <p>MQTT instance.</p> API Stability:Evolving. Fields:  RBuf *buf I/O read buffer.  uintconnected Mqtt is currently connected flag.  interror Mqtt error flag.  char *errorMsg Mqtt error message.  MqttMsghead Head of message queue.  char *id Client ID.  intkeepAlive Keep alive duration in seconds.  time_tlastSend Time of last send in seconds.  intmask R library wait event mask.  intmaxMessage Maximum message size.  intmsgTimeout Message timeout for retransmit.  intnextId Next message ID.  MqttEventProcproc Notification event callback   RSocket *sock Underlying socket transport.  uintsubscribedApi Reserved.  RList *topics List of subscribed topics.  char *willMsg Will and testament message.  ssizewillMsgSize Size of will message.  char *willTopic Will and testament topic.     <p></p>  MqttHdr  <p>Fixed header of a packet.</p> API Stability:Evolving. Fields:  intflags Packet control flags.  intlength Size in of the variable portion after fixed header and packet length.     <p></p>  MqttMsg  <p>Mqtt message.</p> API Stability:Internal. Fields:  uchar *buf External message text buffer for large messages.  uchar *end End of message.  uchar *endbuf End of message buffer.  RFiber *fiber Message fiber to process the message.  intid Message sequence ID.  ucharinlineBuf[MQTT_INLINE_BUF_SIZE] Inline message text buffer for small message efficiency.  struct MqttMsg *next Next message in the queue.  struct MqttMsg *prev Previous message in the queue.  intqos Message quality of service.  time_tsent Time in seconds the message was sent.  uchar *start Start of message.  MqttMsgStatestate Message send status.  MqttPacketTypetype Message packet type.  MqttWaitFlagswait Message wait for send flags.     <p></p>  MqttRecv  <p>A struct used to deserialize/interpret an incoming packet from the broker.</p> API Stability:Evolving. Fields:  MqttConnCodecode Connection response code.  cuchar *codes Array of return codes for subscribed topics.  cchar *data Published message.  intdataSize Size of data.  uchardup Set to 0 on first attempt to send packet.  uinthasSession Connection using an existing session.  struct MqttHdrhdr MQTT message fixed header.  intid Message ID.  MqttTopic *matched Matched topic.  struct Mqtt *mq Message queue.  intnumCodes Size of codes.  ucharqos Quality of service.  ucharretain Message is retained.  char *topic Topic string.","location":"ref/api/mqtt/#typedefs_1"},{"title":"OSDEP API","text":"<p>This module provides a portable cross-platform abstraction layer. By including \"osdep.h\", you will include most common O/S headers and define a set of useful cross-platform constants.</p> <p></p>","location":"ref/api/osdep/"},{"title":"Extensions","text":"Osdep Operating system dependent layer that provides a portable cross-platform abstraction layer.  <p></p>","location":"ref/api/osdep/#extensions"},{"title":"Functions","text":"<p></p>","location":"ref/api/osdep/#functions"},{"title":"Typedefs","text":"OffsetSigned file offset data type. SocketArgument for sockets. SocklenSize to hold the length of a socket address. TicksElapsed time data type. TimeTime in milliseconds since Jan 1, 1970. boolBoolean data type. int16Integer 16 bits data type. int32Integer 32 bits data type. int8Integer 8 bits data type. scharSigned char data type. ssizeSigned integer size field large enough to hold a pointer offset. ucharUnsigned char data type. uintUnsigned integer (machine dependent bit size) data type. uint16Unsigned integer 16 bits data type. uint32Unsigned integer 32 bits data type. uint8Unsigned integer 8 bits data type. ulongUnsigned long (machine dependent bit size) data type. ushortUnsigned short data type. wsizeWindows uses uint for write/read counts (Ugh!).  <p></p>","location":"ref/api/osdep/#typedefs"},{"title":"Defines","text":"#defineME_BIG_ENDIAN\u00a0\u00a0\u00a02   Big endian byte ordering.  #defineME_BUFSIZE\u00a0\u00a0\u00a04096   Reasonable size for buffers.  #defineME_CPU_ARM\u00a0\u00a0\u00a01   Arm.  #defineME_CPU_ITANIUM\u00a0\u00a0\u00a02   Intel Itanium.  #defineME_CPU_MIPS\u00a0\u00a0\u00a05   Mips.  #defineME_CPU_PPC\u00a0\u00a0\u00a06   Power PC.  #defineME_CPU_SH\u00a0\u00a0\u00a09   SuperH.  #defineME_CPU_SPARC\u00a0\u00a0\u00a07   Sparc.  #defineME_CPU_TIDSP\u00a0\u00a0\u00a08   TI DSP.  #defineME_CPU_X64\u00a0\u00a0\u00a04   AMD64 or EMT64.  #defineME_CPU_X86\u00a0\u00a0\u00a03   X86.  #defineME_DEBUG\u00a0\u00a0\u00a00   Default to a debug build.  #defineME_LITTLE_ENDIAN\u00a0\u00a0\u00a01   Little endian byte ordering.  #defineME_MAX_ARGC\u00a0\u00a0\u00a032   Maximum number of command line args if using MAIN().  #defineME_MAX_FNAME\u00a0\u00a0\u00a0256   Reasonable filename size.  #defineME_MAX_PATH\u00a0\u00a0\u00a01024   Reasonable filename size.  #defineME_STACK_SIZE\u00a0\u00a0\u00a0(128 * 1024)   Default thread stack size (0 means use system default).  #defineTPS\u00a0\u00a0\u00a01000   Time/Ticks units per second (milliseconds).  #defineTPS\u00a0\u00a0\u00a01000   Time/Ticks units per second (milliseconds).","location":"ref/api/osdep/#defines"},{"title":"Osdep","text":"<p></p>  Osdep  <p>Operating system dependent layer that provides a portable cross-platform abstraction layer.</p> API Stability:Evolving. Fields:  const typedef charconst typedef char cchar Constant char data type.  API Stability:Stable   const typedef intconst typedef int cint Constant int data type.  API Stability:Stable   const typedef unsigned charconst typedef unsigned char cuchar Unsigned char data type.  API Stability:Stable   const typedef unsigned shortconst typedef unsigned short cushort Constant unsigned short data type.  API Stability:Stable   const typedef voidconst typedef void cvoid Constant void data type.  API Stability:Stable","location":"ref/api/osdep/#osdep"},{"title":"Typedefs","text":"<p></p>       typedef char bool.     <p>Boolean data type.</p> API Stability:Stable. See Also:    <p></p>       typedef short int16.     <p>Integer 16 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef int int32.     <p>Integer 32 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef char int8.     <p>Integer 8 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef int64 Offset.     <p>Signed file offset data type.</p> Supports large files greater than 4GB in size on all systems     API Stability:Stable. See Also:    <p></p>       typedef signed char schar.     <p>Signed char data type.</p> API Stability:Stable. See Also:    <p></p>       typedef int Socket.     <p>Argument for sockets.</p> API Stability:Stable. See Also:    <p></p>       typedef int Socklen.     <p>Size to hold the length of a socket address.</p> API Stability:Stable. See Also:    <p></p>       typedef ssize_t ssize.     <p>Signed integer size field large enough to hold a pointer offset.</p> API Stability:Stable. See Also:    <p></p>       typedef int64 Ticks.     <p>Elapsed time data type.</p> Stores time in milliseconds from some arbitrary start epoch     API Stability:Stable. See Also:    <p></p>       typedef int64 Time.     <p>Time in milliseconds since Jan 1, 1970.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned char uchar.     <p>Unsigned char data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned int uint.     <p>Unsigned integer (machine dependent bit size) data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned short uint16.     <p>Unsigned integer 16 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned int uint32.     <p>Unsigned integer 32 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned char uint8.     <p>Unsigned integer 8 bits data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned long ulong.     <p>Unsigned long (machine dependent bit size) data type.</p> API Stability:Stable. See Also:    <p></p>       typedef unsigned short ushort.     <p>Unsigned short data type.</p> API Stability:Stable. See Also:    <p></p>       typedef ssize wsize.     <p>Windows uses uint for write/read counts (Ugh!).</p> API Stability:Stable. See Also:","location":"ref/api/osdep/#typedefs_1"},{"title":"R API","text":"<p>The Safe Runtime (R) is a portable runtime library for embedded applications.</p> <p>The R library provides management for binary searching, buffering, error handling, events, events, files, hashing, lists, logging, memory, ssl, sockets, strings, and date/time functions. It also provides a foundation of safe routines for secure programming, that help to prevent buffer overflows and other security threats. The library can be used in both C and C++ programs.</p> <p>The R library uses a set extended typedefs for common types. These include: bool, cchar, cvoid, uchar, short, ushort, int, uint, long, ulong, int32, uint32, int64, uint64, float, and double. The cchar type is a const char, cvoid is const void. Several types have \"u\" prefixes to denote unsigned qualifiers.</p> <p>The library includes a memory allocator and global memory allocation handler.</p> <p>The library provides support for fiber coroutines to enable parallel programming without callbacks or complex threads. The network APIs use fibers to transparently block the fiber and resume other fibers automatically. This enables a straight-line \"blocking\" programming paradigm while enabling other fibers to run as required.</p> <p></p>","location":"ref/api/r/"},{"title":"Extensions","text":"RBuf Dynamic Buffer Module.  REvent Event Subsystem.  RFile R File Module.  RHash Hash table structure.  RList List data structure.  RLog Log Services.  RString R String Module.  RWait Wait object.  RbTree Red/Black Tree.  <p></p>","location":"ref/api/r/#extensions"},{"title":"Functions","text":"PUBLIC voidassert(bool cond) Asser that a condition is true. PUBLIC RName*rAddFmtName(RHash *hash, cchar *name, int flags, cchar *fmt, ...) Add a name and formatted string value into the hash table. PUBLIC RName*rAddIntName(RHash *hash, cchar *name, int64 value) Add a name and integer value. PUBLIC intrAddItem(RList *list, cvoid *item) Add an item to a list. PUBLIC RName*rAddName(RHash *table, cchar *name, void *ptr, int flags) Add a name and value into the hash table. PUBLIC RName*rAddNameSubstring(RHash *hash, cchar *name, ssize nameSize, char *value, ssize valueSize) Add a name and value substring into the hash table. PUBLIC intrAddNullItem(RList *list) Add a null item to the list. PUBLIC voidrAddNullToBuf(RBuf *buf) Add a null character to the buffer contents. PUBLIC voidrAdjustBufEnd(RBuf *buf, ssize count) Adjust the buffer end position. PUBLIC voidrAdjustBufStart(RBuf *buf, ssize count) Adjust the buffer start position. PUBLIC void*rAlloc(size_t size) Allocate a block of memory. PUBLIC RBuf*rAllocBuf(ssize initialSize) Create a new buffer. PUBLIC REventrAllocEvent(RFiber *fiber, REventProc proc, void *data, Ticks delay) Allocate and schedule a new event to be run from the event loop. PUBLIC voidrAllocException(int cause, size_t size) Signal a memory allocation exception. PUBLIC RFiber*rAllocFiber(RFiberProc fn, cvoid *data) Allocate a fiber coroutine object. PUBLIC RHash*rAllocHash(int size, int flags) Create a hash table. PUBLIC RList*rAllocList(int size, int flags) Allocate a list. PUBLIC RLock*rAllocLock(void) Allocate a lock object. PUBLIC RSocket*rAllocSocket(void) Allocate a socket object. PUBLIC void*rAllocType(RType type) Allocate an object of a given type. PUBLIC RWait*rAllocWait(int fd) Allocate a wait object for a file descriptor. PUBLIC voidrAssert(cchar *loc, cchar *msg) Output an assert failed message. PUBLIC intrBackupFile(cchar *path, int count) Backup the given file. PUBLIC voidrBackupLog(void) Backup a log. PUBLIC cchar*rBasename(cchar *path) Return the basename (filename) portion of a filename. PUBLIC voidrBreakpoint(void) Trigger a breakpoint. PUBLIC char*rBufToString(RBuf *buf) Return a reference to the buffer contents. PUBLIC char*rBufToStringAndFree(RBuf *buf) Convert the buffer contents to a string. PUBLIC voidrClearList(RList *list) Clears the list of all items. PUBLIC RHash*rCloneHash(RHash *master) Copy a hash table. PUBLIC voidrCloseSocket(RSocket *sp) Close a socket. PUBLIC voidrCompactBuf(RBuf *buf) Compact the buffer contents. PUBLIC intrConnectSocket(RSocket *sp, cchar *host, int port, Ticks deadline) Connect a client socket. PUBLIC intrCreateThread(cchar *name, void *proc, void *data) Create an O/S thread. PUBLIC intrDaemonize(void) For the current process and run as a daemon. PUBLIC voidrDebug(cchar *source, cchar *fmt, ...) Emit a debug message to the log. PUBLIC voidrDefaultLogHandler(cchar *type, cchar *source, cchar *msg) The default log handler. PUBLIC boolrEmitLog(cchar *type, cchar *source) Test if a log message should be emitted. PUBLIC voidrError(cchar *source, cchar *fmt, ...) Emit an error message to the log. PUBLIC voidrFlushBuf(RBuf *buf) Flush the buffer contents. PUBLIC char*rFormatLocalTime(cchar *format, Time time) Convert a time value to local time and format as a string. PUBLIC RBuf*rFormatLog(RBuf *buf, cchar *type, cchar *source, cchar *msg) Format a log message into a buffer. PUBLIC char*rFormatUniversalTime(cchar *format, Time time) Convert a time value to universal time and format as a string. PUBLIC voidrFree(void *ptr) Free a block of memory allocated via rAlloc. PUBLIC voidrFreeBuf(RBuf *buf) Free a buffer. PUBLIC voidrFreeFiber(RFiber *fiber) Free a fiber coroutine. PUBLIC voidrFreeHash(RHash *hash) Free a hash table. PUBLIC voidrFreeList(RList *list) Free a list. PUBLIC voidrFreeLock(RLock *mutex) Free a dynamically allocated lock object. PUBLIC voidrFreeSocket(RSocket *sp) Free a socket object. PUBLIC voidrFreeWait(RWait *wp) Free a wait object. PUBLIC char*rGetAppDir(void) Get the directory containing the application executable. PUBLIC cchar*rGetAppName(void) Get the application name defined via rSetAppName. PUBLIC ssizerGetBlockFromBuf(RBuf *buf, char *blk, ssize count) Get a block of data from the buffer. PUBLIC cchar*rGetBuf(RBuf *buf) Get the origin of the buffer content storage. PUBLIC cchar*rGetBufEnd(RBuf *buf) Get a reference to the end of the buffer contents. PUBLIC ssizerGetBufLength(RBuf *buf) Get the buffer content length. PUBLIC ssizerGetBufSize(RBuf *buf) Get the current size of the buffer content storage. PUBLIC ssizerGetBufSpace(RBuf *buf) Get the space available to store content. PUBLIC cchar*rGetBufStart(RBuf *buf) Get the start of the buffer contents. PUBLIC intrGetCharFromBuf(RBuf *buf) Get a character from the buffer. PUBLIC RThreadrGetCurrentThread(void) Get the current Thread. PUBLIC char*rGetCwd(void) Get the current application working directory. PUBLIC char*rGetDate(cchar *format) Get a string representation of the current date/time. PUBLIC TicksrGetElapsedTicks(Ticks mark) Get the elapsed time since a ticks mark. PUBLIC cchar*rGetError(int error) Return a string representation of an R error code. PUBLIC RFiber*rGetFiber(void) Get the current fiber object. PUBLIC void*rGetFiberStack(void) Get the base address of the fiber stack. PUBLIC RList*rGetFiles(cchar *base, cchar *pattern, int flags) Create a list of files in a directory or subdirectories that match the given wildcard pattern. PUBLIC RList*rGetFilesEx(RList *results, cchar *base, cchar *pattern, int flags) Get a list of files in a directory or subdirectories that match the given wildcard pattern. PUBLIC intrGetHashLength(RHash *hash) Return the count of symbols in a symbol entry. uint64rGetHiResTicks(void) Get the CPU tick count. PUBLIC char*rGetIsoDate(Time time) Get an ISO Date string representation of the given date/time. PUBLIC void*rGetItem(RList *list, int index) Get an list item. PUBLIC intrGetListLength(RList *list) Get the number of items in the list. PUBLIC intrGetLogFile(void) Get the log file file handle. PUBLIC RLogHandlerrGetLogHandler(void) Return the currently configured log handler defined via rSetLogHandler PUBLIC void*rGetNextItem(RList *list, int *lastIndex) Get the next item in the list. PUBLIC RName*rGetNextName(RHash *hash, RName *next) Return the next symbol in a symbol entry. PUBLIC intrGetOsError(void) Return the native O/S error code. PUBLIC TicksrGetRemainingTicks(Ticks mark, Ticks timeout) Return the time remaining until a timeout has elapsed. PUBLIC cchar*rGetServerName(void) Get the application server name string. PUBLIC intrGetSocketAddr(RSocket *sp, char *ipbuf, int ipbufLen, int *port) Get the locally bound socket IP address and port for the socket. PUBLIC SocketrGetSocketHandle(RSocket *sp) Get the socket file descriptor. PUBLIC intrGetState(void) Get the current R state. PUBLIC char*rGetTempFile(cchar *dir, cchar *prefix) Get a temp filename. PUBLIC TicksrGetTicks(void) Get the system time. PUBLIC TimerGetTime(void) Get the time. PUBLIC boolrGetTimeouts(void) Return true if timeouts are enabled. PUBLIC intrGetWaitFd(void) Get the global wait descriptor. PUBLIC voidrGlobalLock(void) Globally lock the application. PUBLIC voidrGlobalUnlock(void) Unlock the global mutex. PUBLIC voidrGracefulStop(void) Gracefully stop the app. PUBLIC intrGrowBuf(RBuf *buf, ssize count) Grow the buffer. PUBLIC intrGrowList(RList *list, int size) Grow the list to be at least the requested size in elements. PUBLIC char*rHashToJson(RHash *hash, int pretty) Convert a hash into JSON. PUBLIC RBuf*rHashToJsonBuf(RHash *hash, RBuf *buf, int pretty) Convert a hash into JSON in the given buffer. PUBLIC char*rHashToString(RHash *hash, cchar *join) Convert a hash of strings to a single string. PUBLIC voidrInfo(cchar *source, cchar *fmt, ...) Emit an informational message to the log. PUBLIC intrInit(RFiberProc fn, cvoid *arg, ssize stackSize) Initialize the runtime. PUBLIC intrInitBuf(RBuf *buf, ssize size) Initialize the buffer and set the initial buffer size. PUBLIC intrInitFibers(ssize stackSize) Initialize the fiber coroutine module. PUBLIC RLock*rInitLock(RLock *mutex) Initialize a statically allocated lock object. PUBLIC intrInitLog(void) Initialize the logging subsystem. PUBLIC intrInitOs(void) Create and initialze the O/S dependent subsystem. PUBLIC intrInitWait(void) Initialize the I/O wait subsystem. PUBLIC intrInserCharToBuf(RBuf *buf, int c) Inser a character into the buffer. PUBLIC intrInsertItemAt(RList *list, int index, cvoid *item) Inser an item into a list at a specific position. PUBLIC boolrIsFileAbs(cchar *path) Determine if a file path is an absolute path. PUBLIC boolrIsLogSet(void) Test if the log has been configured. PUBLIC boolrIsMain(void) Test if a fiber is the main fiber. PUBLIC boolrIsSocketClosed(RSocket *sp) Test if the socket has been closed. PUBLIC boolrIsSocketConnected(RSocket *sp) Determine if the socket has connected to a remote pper. PUBLIC boolrIsSocketEof(RSocket *sp) Test if the other end of the socket has been closed. PUBLIC boolrIsSocketHandshaking(RSocket *sp) Determine if the socket is partway through a TLS handshake. PUBLIC boolrIsSocketSecure(RSocket *sp) Determine if the socket is secure. PUBLIC char*rJoinFile(cchar *base, cchar *other) Join file paths. PUBLIC char*rJoinFileBuf(char *buf, ssize bufsize, cchar *base, cchar *other) Join paths into a buffer. PUBLIC char*rListToString(RList *list, cchar *join) Convert a list of strings to a single string. PUBLIC intrListenSocket(RSocket *sp, cchar *host, int port, RSocketProc handler, void *arg) Listen on a server socket for incoming connections. PUBLIC voidrLog(char *type, cchar *source, cchar *fmt, ...) Write a message to the error log file. PUBLIC voidrLogConfig(void) Print the product configuration at the start of the log file. PUBLIC voidrLogv(cchar *type, cchar *source, cchar *fmt, va_list args) Write a message to the log file. PUBLIC intrLookAtLastCharInBuf(RBuf *buf) Peek at the last character in the buffer. PUBLIC intrLookAtNextCharInBuf(RBuf *buf) Peek at the next character in the buffer. PUBLIC boolrLookupEvent(REvent id) Lookup an event ID. PUBLIC intrLookupItem(RList *list, cvoid *item) Find an item and return its index. PUBLIC void*rLookupName(RHash *hash, cchar *name) Lookup a symbol in the hash table. PUBLIC RName*rLookupNameEntry(RHash *hash, cchar *name) Lookup a symbol in the hash table and return the hash entry. PUBLIC intrLookupStringItem(RList *list, cchar *str) Find a string item and return its index. PUBLIC boolrMatchFile(cchar *path, cchar *pattern) Matach a file against a glob pattern. PUBLIC void*rMemdup(cvoid *ptr, size_t size) Duplicate a block of memory. PUBLIC voidrMetrics(cchar *message, cchar *namespace, cchar *dimensions, cchar *values, ...) Emit an EMF metrics message suitable for AWS CloudWatch Metrics. PUBLIC TimerParseIsoDate(cchar *when) Parse an ISO date string. PUBLIC void*rPopItem(RList *list) Pop an item. PUBLIC voidrPushItem(RList *list, void *item) Push an item onto the list. PUBLIC ssizerPutBlockToBuf(RBuf *buf, cchar *ptr, ssize size) Put a block to the buffer. PUBLIC intrPutCharToBuf(RBuf *buf, int c) Put a character to the buffer. PUBLIC ssizerPutIntToBuf(RBuf *buf, int64 i) Put an integer to the buffer. PUBLIC ssizerPutStringToBuf(RBuf *buf, cchar *str) Put a string to the buffer. PUBLIC ssizerPutSubToBuf(RBuf *buf, cchar *str, ssize count) Put a substring to the buffer. PUBLIC ssizerPutToBuf(RBuf *buf, cchar *fmt, ...) Put a formatted string to the buffer. PUBLIC char*rReadFile(cchar *path, ssize *lenp) Read data from a file. PUBLIC ssizerReadSocket(RSocket *sp, char *buf, ssize bufsize, Ticks deadline) Read from a socket. PUBLIC ssizerReadSocketSync(RSocket *sp, char *buf, ssize bufsize) Read from a socket. PUBLIC intrRemoveItem(RList *list, cvoid *item) Remove an item from the list. PUBLIC intrRemoveItemAt(RList *list, int index) Remove an item from the list. PUBLIC intrRemoveName(RHash *hash, cchar *name) Remove a symbol entry from the hash table. PUBLIC intrRemoveStringItem(RList *list, cchar *str) Remove a string item from the list. PUBLIC intrReserveBufSpace(RBuf *buf, ssize need) Grow the buffer so that there is at least the needed minimum space available. PUBLIC voidrResetBufIfEmpty(RBuf *buf) Reset the buffer. PUBLIC voidrResetSocket(RSocket *sp) Reset a socket. PUBLIC void*rResumeFiber(RFiber *fiber, void *result) Resume a fiber. PUBLIC TicksrRunEvents(void) Run due events. PUBLIC intrServiceEvents(void) Service events. PUBLIC intrSetAppName(cchar *name, cchar *title, cchar *version) Set the application name, title and version. PUBLIC voidrSetDefaultSocketCa(cchar *ca) Set the default CA root certificate bundle. PUBLIC voidrSetError(int error) Set the error code. PUBLIC voidrSetFiberStack(ssize size) Set the default fiber stack size. PUBLIC void*rSetItem(RList *list, int index, cvoid *item) Set a list item. PUBLIC intrSetLog(cchar *spec, cchar *format, bool force) Initialize logging. PUBLIC voidrSetLogFilter(cchar *types, cchar *sources, bool force) Define a filter for log messages. PUBLIC RLogHandlerrSetLogHandler(RLogHandler handler) Define a log handler routine that will be invoked to process log messages. PUBLIC voidrSetMemHandler(RMemProc handler) Define a global memory exhaustion handler. PUBLIC voidrSetOsError(int error) Set the O/S error code. PUBLIC voidrSetSocketBlocking(RSocket *sp, bool on) Set a socket into blocking I/O mode. PUBLIC voidrSetSocketCerts(RSocket *sp, cchar *key, cchar *cert, cchar *ca, cchar *revoke) Configure the socket TLS certificates. PUBLIC voidrSetSocketCiphers(RSocket *sp, cchar *ciphers) Set the ciphers to use for communications. PUBLIC voidrSetSocketVerify(RSocket *sp, int verifyPeer, int verifyIssuer) Set the socket TLS verification parameters. PUBLIC voidrSetSocketWaitMask(RSocket *sp, int64 mask, Ticks deadline) Update the wait mask for a socket. PUBLIC voidrSetState(int state) Set the R state. PUBLIC voidrSetTimeouts(bool on) Control timeouts. PUBLIC voidrSetWaitHandler(RWait *wp, RWaitProc handler, cvoid *arg, int64 mask) Define a wait handler function on a wait object. PUBLIC voidrSetWaitMask(RWait *wp, int64 mask, Ticks deadline) Update the wait mask for a wait handler. PUBLIC voidrSignal(cchar *name, cvoid *arg) Signal watches of a named event. PUBLIC voidrSleep(Ticks ticks) Sleep a fiber for the requested number of milliseconds. PUBLIC void*rSort(void *base, ssize num, ssize width, RSortProc compare, void *ctx) Quicksort. PUBLIC RList*rSortList(RList *list, RSortProc compare, void *ctx) Sor a list. PUBLIC intrSpawnFiber(RFiberProc fn, void *arg) Spawn a fiber coroutine. PUBLIC void*rSpawnThread(RThreadProc fn, void *arg) Spawn an O/S thread. PUBLIC REventrStartEvent(REventProc proc, void *data, Ticks delay) Start a callback event. PUBLIC voidrStartFiber(RFiber *fiber, void *data) Start a fiber coroutine. PUBLIC voidrStop(void) Immediately stop the app. PUBLIC intrStopEvent(REvent id) Stop an event. PUBLIC voidrTermBuf(RBuf *buf) Terminate a buffer. PUBLIC voidrTermFibers(void) Terminate the fiber coroutine module. PUBLIC voidrTermLock(RLock *mutex) Terminate a statically allocated lock object. PUBLIC voidrTermLog(void) Terminate logging. PUBLIC voidrTermOs(void) Stop the O/S dependent subsystem. PUBLIC voidrTermWait(void) Terminate the I/O wait subsystem. PUBLIC boolrTryLock(RLock *lock) Attempt to lock access. PUBLIC intrWait(Ticks timeout) Wait for an I/O event. PUBLIC void*rWaitForIO(RWait *wp, int mask, Ticks deadline) Wait for an IO event on a wait object. PUBLIC intrWalkDir(cchar *dir, cchar *pattern, RWalkDirProc callback, void *arg, int flags) Walk a directory tree and invoke a callback for each path that matches a given pattern. PUBLIC voidrWatch(cchar *name, RWatchProc proc, void *data) Watch for a named event to happen. PUBLIC voidrWatchOff(cchar *name, RWatchProc proc, void *data) Stop watching for a named event to happen. PUBLIC ssizerWriteFile(cchar *path, cchar *buf, ssize len, int mode) Write data to a file. PUBLIC intrWritePid(void) Write the current process pid to /var/run. PUBLIC ssizerWriteSocket(RSocket *sp, cvoid *buf, ssize bufsize, Ticks deadline) Write to a socket. PUBLIC ssizerWriteSocketSync(RSocket *sp, cvoid *buf, ssize len) Write to a socket. PUBLIC void*rYieldFiber(void *value) Yield a fiber back to the main fiber. PUBLIC RbTree*rbAlloc(int flags, RbFree free, RbCompare compare) Allocate a red/black tree. PUBLIC RbNode*rbFirst(RbTree *rbt) Return the lexically first node. PUBLIC voidrbFree(RbTree *rbt) Free a red/black tree. PUBLIC RbNode*rbInsert(RbTree *rbt, void *data) Insert a new data item in the tree. PUBLIC RbNode*rbLookup(RbTree *rbt, void *data, void *ctx) Lookup a data item. PUBLIC RbNode*rbLookupFirst(RbTree *rbt, void *data, void *ctx) Return the lexically first matching node. PUBLIC RbNode*rbLookupNext(RbTree *rbt, RbNode *node, void *data, void *ctx) Return the next matching node after the given node. PUBLIC RbNode*rbNext(RbTree *rbt, RbNode *node) Return the next node in sequence. PUBLIC void*rbRemove(RbTree *rbt, RbNode *node, int keep) Remove a data item from the tree. PUBLIC char*scamel(cchar *str) Create a camel case version of the string. PUBLIC intscaselesscmp(cchar *s1, cchar *s2) Compare strings ignoring case. PUBLIC boolscaselessmatch(cchar *s1, cchar *s2) Compare strings ignoring case. PUBLIC char*schr(cchar *str, int c) Find a character in a string. PUBLIC char*sclone(cchar *str) Clone a string. PUBLIC intscmp(cchar *s1, cchar *s2) Compare strings. PUBLIC char*scontains(cchar *str, cchar *pattern) Find a pattern in a string. PUBLIC ssizescopy(char *dest, ssize destMax, cchar *src) Copy a string. PUBLIC cchar*sends(cchar *str, cchar *suffix) Test if the string ends with a given pattern. PUBLIC char*sfmt(cchar *fmt, ...) Format a string. PUBLIC char*sfmtbuf(char *buf, ssize maxSize, cchar *fmt, ...) Format a string into a static buffer. PUBLIC char*sfmtbufv(char *buf, ssize maxSize, cchar *fmt, va_list args) Format a string into a statically allocated buffer. PUBLIC char*sfmtv(cchar *fmt, va_list args) Format a string. PUBLIC uintshash(cchar *str, ssize len) Compute a hash code for a string. PUBLIC uintshashlower(cchar *str, ssize len) Compute a caseless hash code for a string. PUBLIC char*sitos(int64 value) Convert an integer to a string. PUBLIC char*sitosbuf(char *buf, ssize size, int64 value, int radix) Convert an integer to a string buffer. PUBLIC char*sitosradix(int64 value, int radix) Convert an integer to a string. PUBLIC char*sjoin(cchar *str, ...) Catenate strings. PUBLIC cchar*sjoinArgs(int argc, cchar **argv, cchar *sep) Join an array of strings. PUBLIC char*sjoinfmt(cchar *str, cchar *fmt, ...) Join a formatted string to an existing string. PUBLIC char*sjoinv(cchar *str, va_list args) Catenate strings. PUBLIC ssizeslen(cchar *str) Return the length of a string. PUBLIC char*slower(char *str) Convert a string to lower case. PUBLIC boolsmatch(cchar *s1, cchar *s2) Compare strings. PUBLIC intsncaselesscmp(cchar *s1, cchar *s2, ssize len) Compare strings ignoring case. PUBLIC char*sncaselesscontains(cchar *str, cchar *pattern, ssize limit) Find a pattern in a string with a limit using a caseless comparison. PUBLIC char*snclone(cchar *str, ssize len) Clone a substring. PUBLIC intsncmp(cchar *s1, cchar *s2, ssize len) Compare strings. PUBLIC char*sncontains(cchar *str, cchar *pattern, ssize limit) Find a pattern in a string with a limit. PUBLIC ssizesncopy(char *dest, ssize destMax, cchar *src, ssize len) Copy characters from a string. PUBLIC char*spbrk(cchar *str, cchar *set) Locate the a character from a set in a string. PUBLIC char*sptok(char *str, cchar *pattern, char **last) Tokenize a string. PUBLIC char*srchr(cchar *str, int c) Find a character in a string by searching backwards. PUBLIC char*ssplit(char *str, cchar *delim, char **last) Split a string at a delimiter. PUBLIC ssizesspn(cchar *str, cchar *set) Find the end of a spanning prefix. PUBLIC boolsstarts(cchar *str, cchar *prefix) Test if the string starts with a given pattern. PUBLIC char*ssub(cchar *str, ssize offset, ssize length) Create a substring. PUBLIC char*stemplate(cchar *str, void *tokens) Replace template tokens in a string with values from a lookup table. PUBLIC char*stitle(cchar *str) Create a Title Case version of the string. PUBLIC doublestof(cchar *str) Convert a string to a double. PUBLIC int64stoi(cchar *str) Convert a string to an integer. PUBLIC int64stoiradix(cchar *str, int radix, int *err) Convert a string to an integer. PUBLIC char*stok(char *str, cchar *delim, char **last) Tokenize a string. PUBLIC struct,RList*stolist(cchar *src) String to list. PUBLIC char*strim(char *str, cchar *set, int where) Trim a string. PUBLIC char*supper(char *str) Convert a string to upper case. PUBLIC voidszero(char *str) Erase the contents of a string.  <p></p>","location":"ref/api/r/#functions"},{"title":"Typedefs","text":"REventProcCallback function for events. RFiberFiber state. RFiberContextFiber coroutine stack context. RFiberProcFiber entry point function. RHashProcHashing function to use for the table. RListCompareProcList comparison procedure for soring. RLockMultithreading lock control structure. RLogHandlerLog handler callback type. RMemProcMemory exhaustion callback procedure. RNamePer item structure. RSortProcQuicksort callback function. RThreadProcThread entry point function. RWaitProcCallback function for IO wait events. RWalkDirProcCallback function for rWalkDir RWatchProcCallback function for watched events. RbCompareCallback to compare a data nodes. RbFreeCallback to free a nodes associated data. SocketArgument for sockets. size_tUnsigned integral type. time_tUnsigned time type.  <p></p>","location":"ref/api/r/#typedefs"},{"title":"Defines","text":"#defineITERATE_INDEX node = rbLookupFirst(rbt, key, ctx); node; node = rbLookupNext(rbt, node, key, ctx)   Traverse an index over matching nodes.  #defineME_R_LOGGING\u00a0\u00a0\u00a01   Default for logging is \"on\".  #defineR_DEFAULT_DATE\u00a0\u00a0\u00a0\"%a %b %d %T %Y %Z\"   Default date format used in rFormatLocalTime/rFormatUniversalTime when no format supplied E.g.  #defineR_DYNAMIC_NAME\u00a0\u00a0\u00a00x8   Dynamic name provided, hash will free.  #defineR_DYNAMIC_VALUE\u00a0\u00a0\u00a00x1   Dynamic (allocated) value provided, hash will free.  #defineR_EVENT_ASYNC\u00a0\u00a0\u00a01   Windows async select.  #defineR_EVENT_EPOLL\u00a0\u00a0\u00a02   epoll_wait.  #defineR_EVENT_KQUEUE\u00a0\u00a0\u00a03   BSD kqueue.  #defineR_EVENT_SELECT\u00a0\u00a0\u00a04   traditional select().  #defineR_HASH_CASELESS\u00a0\u00a0\u00a00x40   Ignore case in comparisons.  #defineR_IO\u00a0\u00a0\u00a00x6   Wait mask for readable or writeable events.  #defineR_MEM_FAIL\u00a0\u00a0\u00a00x4   Memory allocation failed - immediate exit.  #defineR_MEM_LIMIT\u00a0\u00a0\u00a00x2   Memory use exceeds memory limit - invoking policy.  #defineR_MEM_TOO_BIG\u00a0\u00a0\u00a00x8   Memory allocation request is too big - immediate exit.  #defineR_MEM_WARNING\u00a0\u00a0\u00a00x1   Memory use exceeds warnHeap level limit.  #defineR_MODIFIED\u00a0\u00a0\u00a00x200   Wait mask for modify events.  #defineR_READABLE\u00a0\u00a0\u00a00x2   Wait mask for readable events.  #defineR_SOCKET_CLOSED\u00a0\u00a0\u00a00x1   RSocket has been closed.  #defineR_SOCKET_EOF\u00a0\u00a0\u00a00x2   Seen end of file.  #defineR_SOCKET_LISTENER\u00a0\u00a0\u00a00x4   RSocket is server listener.  #defineR_SOCKET_SERVER\u00a0\u00a0\u00a00x8   Socket is on the server-side.  #defineR_STATIC_NAME\u00a0\u00a0\u00a00x10   Static name provided no need to clone or free.  #defineR_STATIC_VALUE\u00a0\u00a0\u00a00x2   Static value provided, no need to clone or free.  #defineR_TEMPORAL_NAME\u00a0\u00a0\u00a00x20   Temporal name provided, hash will clone and free.  #defineR_TEMPORAL_VALUE\u00a0\u00a0\u00a00x4   Temporal value provided, hash will clone and free.  #defineR_TRIM_BOTH\u00a0\u00a0\u00a00x3   Flag for strim to trim from both the start and the end of the string.  #defineR_TRIM_END\u00a0\u00a0\u00a00x2   Flag for strim to trim from the end of the string.  #defineR_TRIM_START\u00a0\u00a0\u00a00x1   Flag for strim to trim from the start of the string.  #defineR_WALK_DEPTH_FIRST\u00a0\u00a0\u00a00x1   Flag for rGetFiles to do a depth-first traversal.  #defineR_WALK_DIRS\u00a0\u00a0\u00a00x4   Include hidden files starting with \".\" except for \".\" and \"..\".  #defineR_WALK_FILES\u00a0\u00a0\u00a00x8   Include hidden files starting with \".\" except for \".\" and \"..\".  #defineR_WALK_HIDDEN\u00a0\u00a0\u00a00x2   Include hidden files starting with \".\" except for \".\" and \"..\".  #defineR_WALK_MISSING\u00a0\u00a0\u00a00x20   Allow walking missing paths.  #defineR_WALK_RELATIVE\u00a0\u00a0\u00a00x10   Return paths relative to the original path.  #defineR_WRITABLE\u00a0\u00a0\u00a00x4   Wait mask for writable events.  #defineRB_DUP\u00a0\u00a0\u00a00x1   Flags for rbAlloc to permit duplicate keys.  #defineITERATE_INDEX node = rbLookupFirst(rbt, key, ctx); node; node = rbLookupNext(rbt, node, key, ctx)   Traverse an index over matching nodes.","location":"ref/api/r/#defines"},{"title":"RBuf","text":"<p></p>  RBuf  <p>Dynamic Buffer Module.</p> Description:RBuf is a flexible, dynamic growable buffer structure. It has start and end pointers to the data buffer which act as read/write pointers. Routines are provided to get and put data into and out of the buffer and automatically advance the appropriate start/end pointer. By definition, the buffer is empty when the start pointer == the end pointer. Buffers can be created with a fixed size or can grow dynamically as more data is added to the buffer.  For performance, the specification of RBuf is deliberately exposed. All members of RBuf are implicitly public. However, it is still recommended that wherever possible, you use the accessor routines provided. See Also: rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty API Stability:Internal. Fields:  char *buf Actual buffer for data.  ssizebuflen Current size of buffer.  char *end Pointer one past the last data chr.  char *endbuf Pointer one past the end of buffer.  char *start Pointer to next data char.     <p></p>   PUBLIC void     void rAddNullToBuf (RBuf *buf)     <p>Add a null character to the buffer contents.</p> Description:Add a null byte but do not change the buffer content lengths. The null is added outside the \"official\" content length. This is useful when calling rGetBufStart and using the returned pointer as a \"C\" string pointer. Parameters:  bufBuffer created via rAllocBuf.  API Stability:Evolving. See Also: RBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rAdjustBufEnd (RBuf *buf, ssize count)     <p>Adjust the buffer end position.</p> Description:Adjust the buffer end position by the specified amount. This is typically used to advance the end position as content is appended to the buffer. Adjusting the start or end position will change the value returned by rGetBufLength. If using the rPutBlock or rPutChar routines, adjusting the end position is done automatically. Parameters:  bufBuffer created via rAllocBuf. countPositive or negative count of bytes to adjust the end position.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rAdjustBufStart (RBuf *buf, ssize count)     <p>Adjust the buffer start position.</p> Description:Adjust the buffer start position by the specified amount. This is typically used to advance the start position as content is consumed. Adjusting the start or end position will change the value returned by rGetBufLength. If using the rGetBlock or rGetChar routines, adjusting the start position is done automatically. Parameters:  bufBuffer created via rAllocBuf. countPositive or negative count of bytes to adjust the start position.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC RBuf,*     RBuf* rAllocBuf (ssize initialSize)     <p>Create a new buffer.</p> Description:Create a new buffer. Parameters:  initialSizeInitial size of the buffer.  Returns:A new buffer. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC char,*     char* rBufToString (RBuf *buf)     <p>Return a reference to the buffer contents.</p> Parameters:  bufBuffer created via rAllocBuf.  Returns:A pointer into the buffer data. Caller must not free. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC char,*     char* rBufToStringAndFree (RBuf *buf)     <p>Convert the buffer contents to a string.</p> The string is allocated and the buffer is freed     Parameters:  bufBuffer created via rAllocBuf.  Returns:Allocated string. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rCompactBuf (RBuf *buf)     <p>Compact the buffer contents.</p> Description:Compact the buffer contents by copying the contents down to start the the buffer origin. Parameters:  bufBuffer created via rAllocBuf.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rFlushBuf (RBuf *buf)     <p>Flush the buffer contents.</p> Description:Discard the buffer contents and reset the start end content pointers. Parameters:  bufBuffer created via rAllocBuf.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rFreeBuf (RBuf *buf)     <p>Free a buffer.</p> Parameters:  bufBuffere created via rAllocBuf  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rGetBlockFromBuf (RBuf *buf, char *blk, ssize count)     <p>Get a block of data from the buffer.</p> Description:Get a block of data from the buffer start and advance the start position. If the requested length is greater than the available buffer content, then return whatever data is available. Parameters:  bufBuffer created via rAllocBuf. blkDestination block for the read data. countCount of bytes to read from the buffer.  Returns:The count of bytes read into the block or -1 if the buffer is empty. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC cchar,*     cchar* rGetBuf (RBuf *buf)     <p>Get the origin of the buffer content storage.</p> Description:Get a pointer to the start of the buffer content storage. This is always and allocated block. Parameters:  bufBuffer created via rAllocBuf.  Returns:A pointer to the buffer content storage. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC cchar,*     cchar* rGetBufEnd (RBuf *buf)     <p>Get a reference to the end of the buffer contents.</p> Description:Get a pointer to the location immediately after the end of the buffer contents. Parameters:  bufBuffer created via rAllocBuf.  Returns:Pointer to the end of the buffer data contents. Points to the location one after the last data byte. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rGetBufLength (RBuf *buf)     <p>Get the buffer content length.</p> Description:Get the length of the buffer contents. This is not the same as the buffer size which may be larger. Parameters:  bufBuffer created via rAllocBuf.  Returns:The length of the content stored in the buffer in bytes. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rGetBufSize (RBuf *buf)     <p>Get the current size of the buffer content storage.</p> Description:This returns the size of the memory block allocated for storing the buffer contents. Parameters:  bufBuffer created via rAllocBuf.  Returns:The size of the buffer content storage. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rGetBufSpace (RBuf *buf)     <p>Get the space available to store content.</p> Description:Get the number of bytes available to store content in the buffer. Parameters:  bufBuffer created via rAllocBuf.  Returns:The number of bytes available. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC cchar,*     cchar* rGetBufStart (RBuf *buf)     <p>Get the start of the buffer contents.</p> Description:Get a pointer to the start of the buffer contents. Use rGetBufLength to determine the length of the content. Use rGetBufEnd to get a pointer to the location after the end of the content. Parameters:  bufBuffer created via rAllocBuf.  Returns:Pointer to the start of the buffer data contents. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rGetCharFromBuf (RBuf *buf)     <p>Get a character from the buffer.</p> Description:Get the next byte from the buffer start and advance the start position. Parameters:  bufBuffer created via rAllocBuf.  Returns:The character or -1 if the buffer is empty. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rGrowBuf (RBuf *buf, ssize count)     <p>Grow the buffer.</p> Description:Grow the storage allocated for content for the buffer. The new size must be less than the maximum limit specified via rAllocBuf or rInitBuf Parameters:  bufBuffer created via rAllocBuf. countCount of bytes by which to grow the buffer content size.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rInitBuf (RBuf *buf, ssize size)     <p>Initialize the buffer and set the initial buffer size.</p> Description:This initializes a buffer that is already allocated and is useful for static buffer declarations. This call sets the initial buffer content size. Setting a non-zero size will immediately grow the buffer to be this size. Parameters:  bufBuffer created via rAllocBuf. sizeSize to make the buffer.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rInserCharToBuf (RBuf *buf, int c)     <p>Inser a character into the buffer.</p> Description:Inser a character into to the buffer prior to the current buffer start point. Parameters:  bufBuffer created via rAllocBuf. cCharacter to append.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rLookAtLastCharInBuf (RBuf *buf)     <p>Peek at the last character in the buffer.</p> Description:Non-destructively return the last character from just prior to the end position in the buffer. The character is returned and the end position is not altered. Parameters:  bufBuffer created via rAllocBuf.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rLookAtNextCharInBuf (RBuf *buf)     <p>Peek at the next character in the buffer.</p> Description:Non-destructively return the next character from the start position in the buffer. The character is returned and the start position is not altered. Parameters:  bufBuffer created via rAllocBuf.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rPutBlockToBuf (RBuf *buf, cchar *ptr, ssize size)     <p>Put a block to the buffer.</p> Description:Append a block of data to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. ptrBlock to append. sizeSize of block to append.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rPutCharToBuf (RBuf *buf, int c)     <p>Put a character to the buffer.</p> Description:Append a character to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. cCharacter to append.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rPutIntToBuf (RBuf *buf, int64 i)     <p>Put an integer to the buffer.</p> Description:Append a integer to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. iInteger to append to the buffer.  Returns:Number of characters added to the buffer, otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rPutStringToBuf (RBuf *buf, cchar *str)     <p>Put a string to the buffer.</p> Description:Append a null terminated string to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. strString to append.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rPutSubToBuf (RBuf *buf, cchar *str, ssize count)     <p>Put a substring to the buffer.</p> Description:Append a null terminated substring to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. strString to append. countPut at most count characters to the buffer.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rResetBufIfEmpty   <p></p>   PUBLIC ssize     ssize rPutToBuf (RBuf *buf, cchar *fmt, ...)     <p>Put a formatted string to the buffer.</p> Description:Format a string and append to the buffer at the end position and increment the end pointer. Parameters:  bufBuffer created via rAllocBuf. fmtPrintf style format string. ...Variable arguments for the format string.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC int     int rReserveBufSpace (RBuf *buf, ssize need)     <p>Grow the buffer so that there is at least the needed minimum space available.</p> Description:Grow the storage allocated for content for the buffer if required to ensure the minimum specified by \"need\" is available. Parameters:  bufBuffer created via rAllocBuf. needRequired free space in bytes.  Returns:Zero if successful and otherwise a negative error code. API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty   <p></p>   PUBLIC void     void rResetBufIfEmpty (RBuf *buf)     <p>Reset the buffer.</p> Description:If the buffer is empty, reset the buffer start and end pointers to the beginning of the buffer. Parameters:  bufBuffer created via rAllocBuf.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf   <p></p>   PUBLIC void     void rTermBuf (RBuf *buf)     <p>Terminate a buffer.</p> Description:This frees memory allocated by the buffer. This call should be used for buffers initialized via rInitBuf Parameters:  bufBuffer created via rAllocBuf.  API Stability:Evolving. See Also: RBuf, rAddNullToBuf, rAdjustBufEnd, rAdjustBufStart, rAllocBuf, rBufToString, rCompactBuf, rFlushBuf, rGetBlockFromBuf, rGetBufEnd, rGetBufLength, rGetBufSize, rGetBufSpace, rGetBufStart, rGetCharFromBuf, rGrowBuf, rInitBuf, rInserCharToBuf, rLookAtLastCharInBuf, rLookAtNextCharInBuf, rPutBlockToBuf, rPutCharToBuf, rPutIntToBuf, rPutStringToBuf, rPutSubToBuf, rResetBufIfEmpty","location":"ref/api/r/#rbuf"},{"title":"REvent","text":"<p></p>  REvent  <p>Event Subsystem.</p> Description:R provides a simple based eventing mechanism. Events are described by REvent objects which are created and queued via rStartEvent. Events are scheduled once unless restarted via rRestartEvent. API Stability:Internal. Fields:     <p></p>   PUBLIC bool     bool rLookupEvent (REvent id)     <p>Lookup an event ID.</p> Parameters:  idEvent id allocated by rStartEvent.  Returns:True if the event exists. API Stability:Evolving. See Also:    <p></p>   PUBLIC Ticks     Ticks rRunEvents (void )     <p>Run due events.</p> Returns:Time delay till the next event. API Stability:Evolving. See Also:    <p></p>   PUBLIC int     int rServiceEvents (void )     <p>Service events.</p> Description:This call blocks and continually services events on the event loop until the app is instructed to exit via $rStop. An app should call rServiceEvents from the main program. Returns:The current R state. API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rSetWaitMask (RWait *wp, int64 mask, Ticks deadline)     <p>Update the wait mask for a wait handler.</p> Parameters:  wpRWait object. maskSet to R_READABLE or R_WRITABLE or both. deadlineSystem time in ticks to wait until.  API Stability:Evolving. Returns:Zero if successful. See Also:    <p></p>   PUBLIC void     void rSignal (cchar *name, cvoid *arg)     <p>Signal watches of a named event.</p> Parameters:  nameNamed event. argData argument to pass to the function.  API Stability:Evolving. See Also:    <p></p>   PUBLIC REvent     REvent rStartEvent (REventProc proc, void *data, Ticks delay)     <p>Start a callback event.</p> Description:This schedules an event to run once. The event can be rescheduled in the callback by invoking rRestartEvent. Parameters:  procCallback procedure function. Signature is: void (*fn)(void *data, int id). dataData reference to pass to the callback. delayDelay in milliseconds in which to run the callback.  Returns:A positive integer event ID. API Stability:Evolving. See Also:    <p></p>   PUBLIC int     int rStopEvent (REvent id)     <p>Stop an event.</p> Parameters:  idEvent id allocated by rStartEvent.  Returns:Integer handle index. Otherwise return -1 on allocation errors. API Stability:Evolving. See Also:    <p></p>   PUBLIC int     int rWait (Ticks timeout)     <p>Wait for an I/O event.</p> Description:This is typically called by $rServiceEvents to wait for I/O events. Parameters:  timeoutMaximum time in milliseconds to wait for an I/O event.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   PUBLIC void,*     void* rWaitForIO (RWait *wp, int mask, Ticks deadline)     <p>Wait for an IO event on a wait object.</p> Description:Wait for an IO event by yielding the current coroutine fiber until the IO event arrives. When the IO event occurs, the wait handler will be invoked on the fiber. Parameters:  wpRWait object. maskSet to R_READABLE or R_WRITABLE or both. deadlineSystem time in ticks to wait until.  API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rWatch (cchar *name, RWatchProc proc, void *data)     <p>Watch for a named event to happen.</p> Parameters:  nameNamed event. procFunction to call. dataData argument to pass to the function.  API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rWatchOff (cchar *name, RWatchProc proc, void *data)     <p>Stop watching for a named event to happen.</p> This will remove the watch for a previous rWatch call with exactly the same proc and data arguments     Parameters:  nameNamed event. procFunction provided to a previous rWatch call. dataData argument supplied to a previous rWatch call.  API Stability:Evolving. See Also:","location":"ref/api/r/#revent"},{"title":"RFile","text":"<p></p>  RFile  <p>R File Module.</p> See Also:  API Stability:Internal. Fields:     <p></p>   PUBLIC int     int rBackupFile (cchar *path, int count)     <p>Backup the given file.</p> Description:This creates backup copies of the file using the form: filename-d.ext. Parameters:  pathFilename to backup. countNumber of backup copies to keep.  API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC cchar,*     cchar* rBasename (cchar *path)     <p>Return the basename (filename) portion of a filename.</p> Parameters:  pathFilename to examine.  Returns:A pointer to the basename portion of the supplied filename path. This call does not allocate a new string. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rGetAppDir (void )     <p>Get the directory containing the application executable.</p> Returns:An allocated string containing the application directory. Caller must free. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rGetCwd (void )     <p>Get the current application working directory.</p> Returns:An allocated string containing the working directory. Caller must free. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC RList,*     RList* rGetFiles (cchar *base, cchar *pattern, int flags)     <p>Create a list of files in a directory or subdirectories that match the given wildcard pattern.</p> This call returns a list of filenames     Description:Get the list of files in a directory and return a list. The pattern list may contain wildcards. The supported wildcard patterns are: \"?\" Matches any single character, \"*\" matches zero or more characters of the file or directory, \"**\"/ matches zero or more directories, \"**\" matches zero or more files or directories.  If the pattern is absolute. Parameters:  baseBase directory from which to interpret the pattern. If the patternDirectory to list. patternWild card patterns to match. flagsSet to R_FILES_HIDDEN to include hidden files that start with \".\". Set to R_FILES_DEPTH_FIRST to do a depth-first traversal, i.e. traverse subdirectories before considering adding the directory to the list. Set R_FILES_RELATIVE to return files relative to the given base. Set R_FILES_NO_DIRS to omit directories. Use R_FILES_DIRS_ONLY to omit regular files.  Returns:A list (RList) of filenames. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC RList,*     RList* rGetFilesEx (RList *results, cchar *base, cchar *pattern, int flags)     <p>Get a list of files in a directory or subdirectories that match the given wildcard pattern.</p> This call adds the files to the supplied results list     Description:Get the list of files in a directory and return a list. The pattern list may contain wildcards. The supported wildcard patterns are: \"?\" Matches any single character, \"*\" matches zero or more characters of the file or directory, \"**\"/ matches zero or more directories, \"**\" matches zero or more files or directories. Parameters:  resultsInstance of RList. See rAllocList baseBase directory from which to interpret the pattern. If the patternDirectory to list. patternWild card patterns to match. flagsSet to R_FILES_HIDDEN to include hidden files that start with \".\". Set to R_FILES_DEPTH_FIRST to do a depth-first traversal, i.e. traverse subdirectories before considering adding the directory to the list. Set R_FILES_RELATIVE to return files relative to the given base. Set R_FILES_NO_DIRS to omit directories. Use R_FILES_DIRS_ONLY to omit regular files.  Returns:A list (RList) of filenames. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rGetTempFile (cchar *dir, cchar *prefix)     <p>Get a temp filename.</p> Description:Create a temp file name in the given directory with the specified prefix. Parameters:  dirDirectory to contain the temporary file. If null, use system default temp directory (/tmp). prefixOptional filename prefix.  Returns:An allocated string containing the file name. Caller must free. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC bool     bool rIsFileAbs (cchar *path)     <p>Determine if a file path is an absolute path.</p> Parameters:  pathFilename path to test.  Returns:True if the path is an absolute path. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rJoinFile (cchar *base, cchar *other)     <p>Join file paths.</p> Description:Join a path to a base path. If the other path is absolute, it will be returned. Parameters:  baseDirectory filename to use as the base. otherOther filename path to join to the base filename.  Returns:Allocated string containing the resolved filename. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rJoinFileBuf (char *buf, ssize bufsize, cchar *base, cchar *other)     <p>Join paths into a buffer.</p> Description:Join a path to a base path. If path is absolute, it will be returned. Parameters:  bufDestination path buffer. bufsizeSize of buf. baseDirectory filename to use as the base. otherOther filename path to join to the base filename.  Returns:Allocated string containing the resolved filename. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC bool     bool rMatchFile (cchar *path, cchar *pattern)     <p>Matach a file against a glob pattern.</p> Description:This tests a filename against a file pattern. The pattern list may contain wildcards. The supported wildcard patterns are: \"?\" Matches any single character, \"*\" matches zero or more characters of the file or directory, \"**\"/ matches zero or more directories, \"**\" matches zero or more files or directories,and a trailing \"/\" matches directories only.  If the pattern is absolute. Parameters:  pathFilename to test. patternWild card patterns to match.  Returns:True if the path matches the pattern. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC char,*     char* rReadFile (cchar *path, ssize *lenp)     <p>Read data from a file.</p> Description:Reads data from a file. Parameters:  pathFilename to read. lenpPointer to receive the length of the file read.  Returns:The contents of the file in an allocated string. API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC int     int rWalkDir (cchar *dir, cchar *pattern, RWalkDirProc callback, void *arg, int flags)     <p>Walk a directory tree and invoke a callback for each path that matches a given pattern.</p> Description:The pattern may contain wildcards. The supported wildcard patterns are: \"?\" Matches any single character, \"*\" matches zero or more characters of the file or directory, \"**\"/ matches zero or more directories, \"**\" matches zero or more files or directories.  Parameters:  dirBase directory from which to interpret the pattern. patternWild card patterns to match. callbackCallback function of the signature RWalkDirProc argArgument to callback function. flagsSet to R_FILES_HIDDEN to include hidden files that start with \".\". Set to R_FILES_DEPTH_FIRST to do a depth-first traversal, i.e. traverse subdirectories before considering adding the directory to the list. Set R_FILES_RELATIVE to return files relative to the given base. Set R_FILES_NO_DIRS to omit directories. Use R_FILES_DIRS_ONLY to omit regular files.  API Stability:Evolving. See Also: RFile   <p></p>   PUBLIC ssize     ssize rWriteFile (cchar *path, cchar *buf, ssize len, int mode)     <p>Write data to a file.</p> Description:Write data from a file. The file will be created if required. Parameters:  pathFilename to write. bufBuffer of data to write to the file. lenLength of the buffer. modeCreate file mode.  Returns:The length of bytes written to the file. Should equal len. API Stability:Evolving. See Also: RFile","location":"ref/api/r/#rfile"},{"title":"RHash","text":"<p></p>  RHash  <p>Hash table structure.</p> Description:The hash structure supports growable hash tables collision resistant hashes. See Also: RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName API Stability:Evolving. Fields:  int *buckets Hash collision bucket table.  uintflags Hash control flags.  RHashProcfn Hash function.  intfree Free list of names.  uintlength Number of names in the hash.  struct RName *names Hash items.  uintnumBuckets Number of buckets in the first-level hash.  uintsize Size of allocated names.     <p></p>   PUBLIC RName,*     RName* rAddFmtName (RHash *hash, cchar *name, int flags, cchar *fmt, ...)     <p>Add a name and formatted string value into the hash table.</p> Description:Associate an arbitrary value with a string name and inser into the hash table. Parameters:  hashHash table returned via rAllocHash. nameString name to associate with the data. flagsSet flags to R_STATIC_NAME if providing statically allocated names. Set to R_TEMPORAL_NAME if the hash must copy the names. Set to R_DYNAMIC_NAME when providing allocated names that the hash may use, own and ultimately free when the hash is free. Set flags to R_STATIC_VALUE if providing statically allocated values. Set to R_DYNAMIC_VALUE when providing allocated values that the hash may use, own and ultimately free when the hash is free. If flags are zero, the flags provided to rAllocHash are used. fmtPrintf style format string. ...Variable arguments for the format string.  Returns:Added RName reference. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RName,*     RName* rAddIntName (RHash *hash, cchar *name, int64 value)     <p>Add a name and integer value.</p> Parameters:  hashHash table returned via rAllocHash. nameString name to associate with the data. valueA 64 bit integer value.  Returns:Added RName reference. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RName,*     RName* rAddName (RHash *table, cchar *name, void *ptr, int flags)     <p>Add a name and value into the hash table.</p> Description:Associate an arbitrary value with a string name and inser into the hash table. Parameters:  tableHash table returned via rAllocHash. nameString name to associate with the data. ptrArbitrary pointer to associate with the name in the table. flagsSet flags to R_STATIC_NAME if providing statically allocated names. Set to R_TEMPORAL_NAME if the hash must copy the names. Set to R_DYNAMIC_NAME when providing allocated names that the hash may use, own and ultimately free when the hash is free. Set flags to R_STATIC_VALUE if providing statically allocated values. Set to R_DYNAMIC_VALUE when providing allocated values that the hash may use, own and ultimately free when the hash is free. If flags are zero, the flags provided to rAllocHash are used.  Returns:Added RName reference. API Stability:Evolving. See Also: RHash, RName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RName,*     RName* rAddNameSubstring (RHash *hash, cchar *name, ssize nameSize, char *value, ssize valueSize)     <p>Add a name and value substring into the hash table.</p> Description:Associate an arbitrary value with a string name and inser into the hash table. The flags used are: R_DYNAMIC_NAME | R_DYNAMIC_VALUE. Parameters:  hashHash table returned via rAllocHash. nameString name to associate with the data. nameSizeSize of the name string. valueValue string to store. valueSizeLength of string value.  Returns:Added RName reference. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RHash,*     RHash* rAllocHash (int size, int flags)     <p>Create a hash table.</p> Description:Creates a hash table that can store arbitrary objects associated with string names. Parameters:  sizeEstimated number of names in the hash table. Set to 0 or -1 to get a default (small) hash table. flagsSet flags to R_STATIC_NAME if providing statically allocated names. Set to R_TEMPORAL_NAME if the hash must copy the names. Set to R_DYNAMIC_NAME when providing allocated names that the hash may use, own and ultimately free when the hash is free. Set flags to R_STATIC_VALUE if providing statically allocated values. Set to R_DYNAMIC_VALUE when providing allocated values that the hash may use, own and ultimately free when the hash is free. Set to R_HASH_CASELESS for case insensitive matching for names. The default flags is: R_STATIC_NAME | R_STATIC_VALUE.  Returns:Returns a pointer to the allocated hash table. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RHash,*     RHash* rCloneHash (RHash *master)     <p>Copy a hash table.</p> Parameters:  masterOriginal hash table.  Returns:Returns a pointer to the new allocated hash table. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC void     void rFreeHash (RHash *hash)     <p>Free a hash table.</p> Parameters:  hashHash table to free.  API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC int     int rGetHashLength (RHash *hash)     <p>Return the count of symbols in a symbol entry.</p> Description:Returns the number of symbols currently existing in a symbol table. Parameters:  hashSymbol table returned via rAllocHash.  Returns:Integer count of the number of entries. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RName,*     RName* rGetNextName (RHash *hash, RName *next)     <p>Return the next symbol in a symbol entry.</p> Description:Continues walking the contents of a symbol table by returning the next entry in the symbol table. A previous call to rGetFirstSymbol or rGetNextSymbol is required to supply the value of the last argument. Parameters:  hashHash table hash returned via rAllocHash. nextIndex of next name.  Returns:Pointer to the first entry in the symbol table. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC char,*     char* rHashToString (RHash *hash, cchar *join)     <p>Convert a hash of strings to a single string.</p> Parameters:  hashHash pointer returned from rCreateHash. joinString to use as the element join string.  Returns:String consisting of the joined hash values. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC void,*     void* rLookupName (RHash *hash, cchar *name)     <p>Lookup a symbol in the hash table.</p> Description:Lookup a name and return the value associated with that name. Parameters:  hashSymbol table returned via rAllocHash. nameString name of the symbole entry to delete.  Returns:Value associated with the name when the entry was insered via rInserSymbol. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupNameEntry, rRemoveName   <p></p>   PUBLIC RName,*     RName* rLookupNameEntry (RHash *hash, cchar *name)     <p>Lookup a symbol in the hash table and return the hash entry.</p> Description:Lookup a name and return the hash table descriptor associated with that name. Parameters:  hashSymbol table returned via rAllocHash. nameString name of the symbole entry to delete.  Returns:RName for the entry. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rRemoveName   <p></p>   PUBLIC int     int rRemoveName (RHash *hash, cchar *name)     <p>Remove a symbol entry from the hash table.</p> Description:Removes a symbol entry from the symbol table. The entry is looked up via the supplied name. Parameters:  hashSymbol table returned via rAllocHash. nameString name of the symbole entry to delete.  Returns:Returns zero if successful, otherwise a negative RT error code is returned. API Stability:Evolving. See Also: RHash, RName, rAddName, rGetHashLength, rGetNextName, rLookupName, rLookupNameEntry","location":"ref/api/r/#rhash"},{"title":"RList","text":"<p></p>  RList  <p>List data structure.</p> Description:The RList is a dynamic, growable list suitable for storing simple primitive data types or pointers to arbitrary objects. See Also: RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList API Stability:Internal. Fields:  uintcapacity Current list capacity.  uintflags Items should be freed when list is freed.  void **items List item data.  uintlength Current length of the list contents.     <p></p>   PUBLIC int     int rAddItem (RList *list, cvoid *item)     <p>Add an item to a list.</p> Description:Add the specified item to the list. The list must have been previously created via rAllocList. The list will grow as required to store the item. Parameters:  listList pointer returned from rAllocList itemPointer to item to store.  Returns:Returns a positive list index for the insered item. If the item cannot be insered due to a memory allocation failure, -1 is returned. API Stability:Evolving. See Also: RList, RListCompareProc, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rAddNullItem (RList *list)     <p>Add a null item to the list.</p> Description:Add a null item to the list. This item does not count in the length returned by rGetListLength and will not be visible when iterating using rGetNextItem API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC RList,*     RList* rAllocList (int size, int flags)     <p>Allocate a list.</p> Description:Creates an empty list. RList's can store generic pointers. They automatically grow as required when items are added to the list. Parameters:  sizeInitial capacity of the list. Set to &lt; 0 to get a growable list with a default initial size. Set to 0 to to create the list but without any initial list storage. Then call rSetListLimits to define the initial list size. flagsSet to R_DYNAMIC_VALUE when providing allocated values that the hash may use, own and ultimately free when the hash is free. Default is R_STATIC_VALUE.  Returns:Returns a pointer to the list. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void     void rClearList (RList *list)     <p>Clears the list of all items.</p> Description:Resets the list length to zero and clears all items. Parameters:  listList pointer returned from rAllocList.  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void     void rFreeList (RList *list)     <p>Free a list.</p> Parameters:  listList pointer returned from rAllocList  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void,*     void* rGetItem (RList *list, int index)     <p>Get an list item.</p> Description:Get an list item specified by its index. Parameters:  listList pointer returned from rAllocList. indexItem index into the list. Indexes have a range from zero to the lenghth of the list - 1.  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rGetListLength (RList *list)     <p>Get the number of items in the list.</p> Description:Returns the number of items in the list. This will always be less than or equal to the list capacity. Parameters:  listList pointer returned from rAllocList.  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void,*     void* rGetNextItem (RList *list, int *lastIndex)     <p>Get the next item in the list.</p> Description:Returns the value of the next item in the list. Parameters:  listList pointer returned from rAllocList. lastIndexPointer to an integer that will hold the last index retrieved.  Returns:Next item in list or null for an empty list or after the last item. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rInsertItemAt (RList *list, int index, cvoid *item)     <p>Inser an item into a list at a specific position.</p> Description:Insert the item into the list before the specified position. The list will grow as required to store the item. Parameters:  listList pointer returned from rAllocList indexLocation at which to store the item. The previous item at this index is moved to make room. itemPointer to item to store.  Returns:The position index (positive integer) if successful. If the item cannot be insered due to a memory allocation failure, -1 is returned. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC char,*     char* rListToString (RList *list, cchar *join)     <p>Convert a list of strings to a single string.</p> This uses the specified join string between the elements     Parameters:  listList pointer returned from rAllocList. joinString to use as the element join string. May be null.  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rLookupItem (RList *list, cvoid *item)     <p>Find an item and return its index.</p> Description:Search for an item in the list and return its index. Parameters:  listList pointer returned from rAllocList. itemPointer to value stored in the list.  Returns:Positive list index if found, otherwise a negative RT error code. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rLookupStringItem (RList *list, cchar *str)     <p>Find a string item and return its index.</p> Description:Search for the first matching string in the list and return its index. Parameters:  listList pointer returned from rAllocList. strPointer to string to look for.  Returns:Positive list index if found, otherwise a negative RT error code. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void,*     void* rPopItem (RList *list)     <p>Pop an item.</p> Description:Treat the list as a stack and pop the last pushed item. Parameters:  listList pointer returned from rAllocList.  Returns:The last pushed item. If the list is empty, returns NULL. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC void     void rPushItem (RList *list, void *item)     <p>Push an item onto the list.</p> Description:Treat the list as a stack and push the last pushed item. Parameters:  listList pointer returned from rAllocList. itemItem to push onto the list.  API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rRemoveItem (RList *list, cvoid *item)     <p>Remove an item from the list.</p> Description:Search for a specified item and then remove it from the list. Parameters:  listList pointer returned from rAllocList. itemItem pointer to remove.  Returns:The positive index of the removed item, otherwise a negative RT error code. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rRemoveItemAt (RList *list, int index)     <p>Remove an item from the list.</p> Description:Removes the element specified by index, from the list. The list index is provided by rInsertItem. Returns:The positive index of the removed item, otherwise a negative RT error code. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC int     int rRemoveStringItem (RList *list, cchar *str)     <p>Remove a string item from the list.</p> Description:Search for the first matching string and then remove it from the list. Parameters:  listList pointer returned from rAllocList. strString value to remove.  Returns:The positive index of the removed item, otherwise a negative RT error code. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rSetItem, rSortList   <p></p>   PUBLIC void,*     void* rSetItem (RList *list, int index, cvoid *item)     <p>Set a list item.</p> Description:Update the list item stored at the specified index. Parameters:  listList pointer returned from rAllocList. indexLocation to update. itemPointer to item to store.  Returns:The old item previously at that location index. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSortList   <p></p>   PUBLIC void,*     void* rSort (void *base, ssize num, ssize width, RSortProc compare, void *ctx)     <p>Quicksort.</p> Description:This is a quicksor with a context argument. Parameters:  baseBase of array to sor. numNumber of array elements. widthWidth of array elements. compareComparison function. ctxContext argument to provide to comparison function.  Returns:The base array for chaining. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>   PUBLIC RList,*     RList* rSortList (RList *list, RSortProc compare, void *ctx)     <p>Sor a list.</p> Description:Sor a list using the sor ordering dictated by the supplied compare function. Parameters:  listList pointer returned from rAllocList. compareComparison function. If null, then a default string comparison is used. ctxContext to provide to comparison function.  Returns:The sorted list. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem","location":"ref/api/r/#rlist"},{"title":"RLog","text":"<p></p>  RLog  <p>Log Services.</p> See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog API Stability:Internal. Fields:     <p></p>   PUBLIC void     void assert (bool cond)     <p>Asser that a condition is true.</p> Parameters:  condBoolean result of a conditional test.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rAssert (cchar *loc, cchar *msg)     <p>Output an assert failed message.</p> Description:This will emit an assert failed message to the standard error output. It may bypass the logging system. Parameters:  locSource code location string. Use R_LOC to define a file name and line number string suitable for this parameter. msgSimple string message to output.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rBackupLog (void )     <p>Backup a log.</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC int     int rDaemonize (void )     <p>For the current process and run as a daemon.</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rDebug (cchar *source, cchar *fmt, ...)     <p>Emit a debug message to the log.</p> Parameters:  sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. ...Variable arg list from va_list.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rDefaultLogHandler (cchar *type, cchar *source, cchar *msg)     <p>The default log handler.</p> Parameters:  typeLog message type. sourceSource of the message. msgLog message.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC bool     bool rEmitLog (cchar *type, cchar *source)     <p>Test if a log message should be emitted.</p> Description:This call enables routines to test if messages should be logd for a given type/source pair. Parameters:  typeLog message type string. sourceLog message source.  Returns:True if the message should be logd. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rError (cchar *source, cchar *fmt, ...)     <p>Emit an error message to the log.</p> Parameters:  sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. ...Variable arg list from va_list.  API Stability:Evolving. See Also: RLogHandler, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC RBuf,*     RBuf* rFormatLog (RBuf *buf, cchar *type, cchar *source, cchar *msg)     <p>Format a log message into a buffer.</p> Description:This formats the log message according to the current log format string. Parameters:  bufRBuf instance. typeLog message type string. sourceLog message source. msgMessage to log.  Returns:The buffer suitable for chaining calls. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC int     int rGetLogFile (void )     <p>Get the log file file handle.</p> Description:Returns the file handle used for logging. Returns:An file handle. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC RLogHandler     RLogHandler rGetLogHandler (void )     <p>Return the currently configured log handler defined via rSetLogHandler</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rLog, rSetLog   <p></p>   PUBLIC void     void rInfo (cchar *source, cchar *fmt, ...)     <p>Emit an informational message to the log.</p> Parameters:  sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. ...Variable arg list from va_list.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC int     int rInitLog (void )     <p>Initialize the logging subsystem.</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC bool     bool rIsLogSet (void )     <p>Test if the log has been configured.</p> Returns:True if the log has been defined. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rLog (cchar *source, cchar *fmt, ...)     <p>Emit a log message to the log.</p> Parameters:  sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. ...Variable arg list from va_list.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rSetLog   <p></p>   PUBLIC void     void rLog (char *type, cchar *source, cchar *fmt, ...)     <p>Write a message to the error log file.</p> Description:Send a message to the error log file. The purpose of the error log is to record essential configuration and error conditions. Per-request log typically is sent to a separate log.   By default, error log messages are sent to the standard output. Applications may redirect output by installing a log handler using rSetLogHandler.   Log messages should be a single text line to facilitate machine processing of log files.   Log typically is enabled in both debug and release builds and may be controlled via the build define ME_R_LOGGING which is typically set via the MakeMe setting \"logging: true\".  Parameters:  typeMessage type. sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. ...Variable number of arguments for printf data.  Remarks:RLog is highly useful as a debugging aid. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rSetLog   <p></p>   PUBLIC void     void rLogConfig (void )     <p>Print the product configuration at the start of the log file.</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rLogv (cchar *type, cchar *source, cchar *fmt, va_list args)     <p>Write a message to the log file.</p> Description:Send a message to the logging subsystem. The purpose of the log is to record essential configuration and error conditions. Per-request log typically is sent to a separate log.   By default, error messages are sent to the standard output. Applications may redirect output by installing a log handler using rSetLogHandler.   Log messages should be a single text line to facilitate machine processing of log files.   Log typically is enabled in both debug and release builds and may be controlled via the build define ME_R_LOGGING which is typically set via the MakeMe setting \"logging: true\".  Parameters:  typeMessage type. sourceModule emitting the log message. fmtPrintf style format string. Variable number of arguments to. argsVariable arg list from va_list.  Remarks:RLog is highly useful as a debugging aid. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rMetrics (cchar *message, cchar *namespace, cchar *dimensions, cchar *values, ...)     <p>Emit an EMF metrics message suitable for AWS CloudWatch Metrics.</p> Parameters:  messagePrefix message string. namespaceMetric namespace. dimensionsMetric dimensions. valuesFormat string of values. ...Arguments for values format string.  API Stability:Prototype. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rSetError (int error)     <p>Set the error code.</p> Description:Set errno or equivalent. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC int     int rSetLog (cchar *spec, cchar *format, bool force)     <p>Initialize logging.</p> Parameters:  specThe spec is of the form: \"destination:filter\". The destination may be a filename, \"stdout\", \"stderr\" or \"none\". The log filter portion is of the form: \"types:sources\" and is passed to rSetLogFilter. formatThe log pattern to use to format the message. The format can use Letter tokens that are expanded at runtime. The tokens supported are: 'A' for the application name, 'D' for the local datetime, 'H' for the system hostname, 'P' for the process ID , 'S' for the message source, and 'T' for the log message type. forceSet to true to overwrite a previous definition.  Returns:Zero if successful, otherwise a negative R error code. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog   <p></p>   PUBLIC void     void rSetLogFilter (cchar *types, cchar *sources, bool force)     <p>Define a filter for log messages.</p> Parameters:  typesComma separated list of types to emit. Can prefix a type with \"!\" to subtract from the list. Defaults to \"error, info\". sourcesComma separated list of sources to emit. Can prefix a type with \"!\" to subtract from the list. Defaults to \"all\". forceSet to true to overwrite a previous definition.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC RLogHandler     RLogHandler rSetLogHandler (RLogHandler handler)     <p>Define a log handler routine that will be invoked to process log messages.</p> Parameters:  handlerLog handler callback function.  Returns:The previous log handler function. API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rSetTimeouts (bool on)     <p>Control timeouts.</p> Parameters:  onSet to false to disable timeouts for debugging.  API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC void     void rTermLog (void )     <p>Terminate logging.</p> API Stability:Evolving. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>   PUBLIC int     int rWritePid (void )     <p>Write the current process pid to /var/run.</p> Returns:Zero on success, otherwise a negative status code. See Also: RLogHandler, rError, rGetLogFile, rGetLogHandler, rLog, rSetLog","location":"ref/api/r/#rlog"},{"title":"RString","text":"<p></p>  RString  <p>R String Module.</p> Description:The RT provides a suite of r ascii string manipulation routines to help prevent buffer overflows and other potential security traps. See Also: scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper API Stability:Internal. Fields:     <p></p>   PUBLIC char,*     char* scamel (cchar *str)     <p>Create a camel case version of the string.</p> Description:Copy a string into a newly allocated block and make the first character lower case. Parameters:  strPointer to the block to duplicate.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int     int scaselesscmp (cchar *s1, cchar *s2)     <p>Compare strings ignoring case.</p> This is a r replacement for strcasecmp. It can handle NULL args     Description:Compare two strings ignoring case differences. This call operates similarly to strcmp. Parameters:  s1First string to compare. s2Second string to compare.  Returns:Returns zero if the strings are equivalent, &lt; 0 if s1 sors lower than s2 in the collating sequence or &gt; 0 if it sors higher. API Stability:Evolving. See Also: RString, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC bool     bool scaselessmatch (cchar *s1, cchar *s2)     <p>Compare strings ignoring case.</p> This is similar to scaselesscmp but it returns a boolean     Description:Compare two strings ignoring case differences. Parameters:  s1First string to compare. s2Second string to compare.  Returns:Returns true if the strings are equivalent, otherwise false. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* schr (cchar *str, int c)     <p>Find a character in a string.</p> Description:This is a r replacement for strchr. It can handle NULL args. Parameters:  strString to examine. cCharacter to search for.  Returns:If the character is found, the call returns a reference to the character position in the string. Otherwise, returns NULL. API Stability:Evolving. See Also: RString, scaselesscmp, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sclone (cchar *str)     <p>Clone a string.</p> Description:Copy a string into a newly allocated block. Parameters:  strPointer to the block to duplicate.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int     int scmp (cchar *s1, cchar *s2)     <p>Compare strings.</p> Description:Compare two strings. This is a r replacement for strcmp. It can handle null args. Parameters:  s1First string to compare. s2Second string to compare.  Returns:Returns zero if the strings are identical. Return -1 if the first string is less than the second. Return 1 if the first string is greater than the second. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* scontains (cchar *str, cchar *pattern)     <p>Find a pattern in a string.</p> Description:Locate the first occurrence of pattern in a string. Parameters:  strPointer to the string to search. patternString pattern to search for.  Returns:Returns a reference to the start of the pattern in the string. If not found, returns NULL. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC ssize     ssize scopy (char *dest, ssize destMax, cchar *src)     <p>Copy a string.</p> Description:R replacement for strcpy. Copy a string and ensure the destination buffer is not overflowed. The call returns the length of the resultant string or an error code if it will not fit into the target string. This is similar to strcpy, but it will enforce a maximum size for the copied string and will ensure it is always terminated with a null. Parameters:  destPointer to a pointer that will hold the address of the allocated block. destMaxMaximum size of the target string in characters. srcString to copy.  Returns:The number of characters in the target string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC cchar,*     cchar* sends (cchar *str, cchar *suffix)     <p>Test if the string ends with a given pattern.</p> Parameters:  strString to examine. suffixPattern to search for.  Returns:Returns a pointer to the start of the pattern if found. Otherwise returns NULL. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sfmt (cchar *fmt, ...)     <p>Format a string.</p> This is a secure verion of printf that can handle null args     Description:Format the given arguments according to the printf style format. See rPrintf for a full list of the format specifies. This is a secure replacement for sprintf, it can handle null arguments without crashes. Parameters:  fmtPrintf style format string. ...Variable arguments for the format string.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sfmtbuf (char *buf, ssize maxSize, cchar *fmt, ...)     <p>Format a string into a static buffer.</p> Description:This call format a string using printf style formatting arguments. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. Parameters:  bufPointer to the buffer. maxSizeSize of the buffer. fmtPrintf style format string. ...Variable arguments to format.  Returns:The buffer. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sfmtbufv (char *buf, ssize maxSize, cchar *fmt, va_list args)     <p>Format a string into a statically allocated buffer.</p> Description:This call format a string using printf style formatting arguments. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. Parameters:  bufPointer to the buffer. maxSizeSize of the buffer. fmtPrintf style format string. argsVarargs argument obtained from va_start.  Returns:The buffer;. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sfmtv (cchar *fmt, va_list args)     <p>Format a string.</p> This is a secure verion of printf that can handle null args     Description:Format the given arguments according to the printf style format. See rPrintf for a full list of the format specifies. This is a secure replacement for sprintf, it can handle null arguments without crashes. Parameters:  fmtPrintf style format string. argsVarargs argument obtained from va_start.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC uint     uint shash (cchar *str, ssize len)     <p>Compute a hash code for a string.</p> Parameters:  strString to examine. lenLength in characters of the string to include in the hash code.  Returns:Returns an unsigned integer hash code. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC uint     uint shashlower (cchar *str, ssize len)     <p>Compute a caseless hash code for a string.</p> Description:This computes a hash code for the string after convering it to lower case. Parameters:  strString to examine. lenLength in characters of the string to include in the hash code.  Returns:Returns an unsigned integer hash code. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sitos (int64 value)     <p>Convert an integer to a string.</p> Description:This call convers the supplied 64 bit integer to a string using base 10. Parameters:  valueInteger value to conver.  Returns:An allocated string with the convered number. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sitosbuf (char *buf, ssize size, int64 value, int radix)     <p>Convert an integer to a string buffer.</p> Description:This call convers the supplied 64 bit integer into a string formatted into the supplied buffer according to the specified radix. Parameters:  bufPointer to the buffer that will hold the string. sizeSize of the buffer. valueInteger value to conver. radixThe base radix to use when encoding the number.  Returns:Returns a reference to the string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sitosradix (int64 value, int radix)     <p>Convert an integer to a string.</p> Description:This call convers the supplied 64 bit integer to a string according to the specified radix. Parameters:  valueInteger value to conver. radixThe base radix to use when encoding the number.  Returns:An allocated string with the convered number. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sjoin (cchar *str, ...)     <p>Catenate strings.</p> Description:This catenates strings together with an optional string separator. If the separator is NULL, not separator is used. This call accepts a variable list of strings to append, terminated by a null argument. Parameters:  strFirst string to catentate. ...Variable number of string arguments to append. Terminate list with NULL.  Returns:Returns an allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC cchar,*     cchar* sjoinArgs (int argc, cchar **argv, cchar *sep)     <p>Join an array of strings.</p> Parameters:  argcnumber of strings to join. argvArray of strings. sepSeparator string to use. If NULL, then no separator is used.  Returns:A single joined string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sjoinfmt (cchar *str, cchar *fmt, ...)     <p>Join a formatted string to an existing string.</p> Description:This uses the format and args to create a string that is joined to the first string. Parameters:  strFirst string to catentate. fmtFirst string to catentate. ...Varargs argument obtained from va_start.  Returns:Returns an allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sjoinv (cchar *str, va_list args)     <p>Catenate strings.</p> Description:This catenates strings together. Parameters:  strFirst string to catentate. argsVarargs argument obtained from va_start.  Returns:Returns an allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC ssize     ssize slen (cchar *str)     <p>Return the length of a string.</p> Description:R replacement for strlen. This call returns the length of a string and tests if the length is less than a given maximum. It will return zero for NULL args. Parameters:  strString to measure.  Returns:The length of the string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* slower (char *str)     <p>Convert a string to lower case.</p> Description:Convert a string to its lower case equivalent. Parameters:  strString to conver.  API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC bool     bool smatch (cchar *s1, cchar *s2)     <p>Compare strings.</p> Description:Compare two strings. This is similar to scmp but it returns a boolean. Parameters:  s1First string to compare. s2Second string to compare.  Returns:Returns true if the strings are equivalent, otherwise false. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int     int sncaselesscmp (cchar *s1, cchar *s2, ssize len)     <p>Compare strings ignoring case.</p> Description:Compare two strings ignoring case differences for a given string length. This call operates similarly to strncasecmp. Parameters:  s1First string to compare. s2Second string to compare. lenLength of characters to compare.  Returns:Returns zero if the strings are equivalent, &lt; 0 if s1 sors lower than s2 in the collating sequence or &gt; 0 if it sors higher. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sncaselesscontains (cchar *str, cchar *pattern, ssize limit)     <p>Find a pattern in a string with a limit using a caseless comparison.</p> Description:Locate the first occurrence of pattern in a string, but do not search more than the given character limit. Use a caseless comparison. Parameters:  strPointer to the string to search. patternString pattern to search for. limitCount of characters in the string to search.  Returns:Returns a reference to the start of the pattern in the string. If not found, returns NULL. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* snclone (cchar *str, ssize len)     <p>Clone a substring.</p> Description:Copy a substring into a newly allocated block. Parameters:  strPointer to the block to duplicate. lenNumber of bytes to copy. The actual length copied is the minimum of the given length and the length of the supplied string. The result is null terminated.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int     int sncmp (cchar *s1, cchar *s2, ssize len)     <p>Compare strings.</p> Description:Compare two strings for a given string length. This call operates similarly to strncmp. Parameters:  s1First string to compare. s2Second string to compare. lenLength of characters to compare.  Returns:Returns zero if the strings are equivalent, &lt; 0 if s1 sors lower than s2 in the collating sequence or &gt; 0 if it sors higher. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sncontains (cchar *str, cchar *pattern, ssize limit)     <p>Find a pattern in a string with a limit.</p> Description:Locate the first occurrence of pattern in a string, but do not search more than the given character limit. Parameters:  strPointer to the string to search. patternString pattern to search for. limitCount of characters in the string to search.  Returns:Returns a reference to the start of the pattern in the string. If not found, returns NULL. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC ssize     ssize sncopy (char *dest, ssize destMax, cchar *src, ssize len)     <p>Copy characters from a string.</p> Description:R replacement for strncpy. Copy bytes from a string and ensure the target string is not overflowed. The call returns the length of the resultant string or an error code if it will not fit into the target string. This is similar to strcpy, but it will enforce a maximum size for the copied string and will ensure it is terminated with a null. Parameters:  destPointer to a pointer that will hold the address of the allocated block. destMaxMaximum size of the target string in characters. srcString to copy. lenMaximum count of characters to copy.  Returns:Returns a reference to the destination if successful or NULL if the string won't fit. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* spbrk (cchar *str, cchar *set)     <p>Locate the a character from a set in a string.</p> Description:This locates in the string the first occurence of any character from a given set of characters. Parameters:  strString to examine. setSet of characters to scan for.  Returns:Returns a reference to the first character from the given set. Returns NULL if none found. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* sptok (char *str, cchar *pattern, char **last)     <p>Tokenize a string.</p> Description:Split a string into tokens using a string pattern as delimiters. Parameters:  strString to tokenize. patternString pattern to use for token delimiters. lastLast token pointer.  Returns:Returns a pointer to the next token. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* srchr (cchar *str, int c)     <p>Find a character in a string by searching backwards.</p> Description:This locates in the string the last occurence of a character. Parameters:  strString to examine. cCharacter to scan for.  Returns:Returns a reference in the string to the requested character. Returns NULL if none found. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* ssplit (char *str, cchar *delim, char **last)     <p>Split a string at a delimiter.</p> Description:Split a string and return pars. The string is modified. This routiner never returns null. If there are leading delimiters, the empty string will be returned and *last will be set to the portion after the delimiters. If str is null, a managed reference to the empty string will be returned. If there are no characters after the delimiter, then *last will be set to the empty string. Parameters:  strString to tokenize. delimSet of characters that are used as token separators. lastReference to the portion after the delimiters. Will return an empty string if is not trailing portion.  Returns:Returns a pointer to the first par before the delimiters. If the string begins with delimiters, the empty string will be returned. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC ssize     ssize sspn (cchar *str, cchar *set)     <p>Find the end of a spanning prefix.</p> Description:This scans the given string for characters from the set and returns an index to the first character not in the set. Parameters:  strString to examine. setSet of characters to span.  Returns:Returns an index to the first character after the spanning set. If not found, returns the index of the first null. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC bool     bool sstarts (cchar *str, cchar *prefix)     <p>Test if the string starts with a given pattern.</p> Parameters:  strString to examine. prefixPattern to search for.  Returns:Returns true if the pattern was found. Otherwise returns zero. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* ssub (cchar *str, ssize offset, ssize length)     <p>Create a substring.</p> Parameters:  strString to examine. offsetStaring offset within str for the beginning of the substring. lengthLength of the substring in characters.  Returns:Returns a newly allocated substring. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* stemplate (cchar *str, void *tokens)     <p>Replace template tokens in a string with values from a lookup table.</p> Tokens are ${variable} references     Parameters:  strString to expand. tokensHash table of token values to use.  Returns:An expanded string. May return the original string if no \"$\" references are present. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* stitle (cchar *str)     <p>Create a Title Case version of the string.</p> Description:Copy a string into a newly allocated block and make the first character upper case. Parameters:  strPointer to the block to duplicate.  Returns:Returns a newly allocated string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stok, strim, supper   <p></p>   PUBLIC double     double stof (cchar *str)     <p>Convert a string to a double.</p> Description:This call convers the supplied string to a double. Parameters:  strPointer to the string to parse.  Returns:The double equivalent value of the string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int64     int64 stoi (cchar *str)     <p>Convert a string to an integer.</p> Description:This call convers the supplied string to an integer using base 10. Parameters:  strPointer to the string to parse.  Returns:The integer equivalent value of the string. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC int64     int64 stoiradix (cchar *str, int radix, int *err)     <p>Convert a string to an integer.</p> Description:This call convers the supplied string to an integer using the specified radix (base). Parameters:  strPointer to the string to parse. radixBase to use when parsing the string. errReturn error code. Set to 0 if successful.  Returns:The integer equivalent value of the string. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* stok (char *str, cchar *delim, char **last)     <p>Tokenize a string.</p> Description:Split a string into tokens using a character set as delimiters. Parameters:  strString to tokenize. delimSet of characters that are used as token separators. lastLast token pointer.  Returns:Returns a pointer to the next token. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, strim, supper   <p></p>   PUBLIC struct,RList,*     struct RList* stolist (cchar *src)     <p>String to list.</p> This parses the string of space separated arguments. Single and double quotes are supported     Parameters:  srcSource string to parse.  Returns:List of arguments. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper   <p></p>   PUBLIC char,*     char* strim (char *str, cchar *set, int where)     <p>Trim a string.</p> Description:Trim leading and trailing characters off a string. The original string is not modified and the return value is a newly allocated string. Parameters:  strString to trim. setString of characters to remove. whereFlags to indicate trim from the start, end or both. Use R_TRIM_START, R_TRIM_END, R_TRIM_BOTH.  Returns:Returns a newly allocated trimmed string. May not equal str. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, supper   <p></p>   PUBLIC char,*     char* supper (char *str)     <p>Convert a string to upper case.</p> Description:Convert a string to its upper case equivalent. Parameters:  strString to conver.  Returns:Returns a pointer to the convered string. Will always equal str. API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim   <p></p>   PUBLIC void     void szero (char *str)     <p>Erase the contents of a string.</p> Parameters:  strString to erase.  API Stability:Evolving. See Also: RString, scaselesscmp, schr, sclone, scmp, scontains, scopy, sends, sfmt, sfmtbuf, sfmtbufv, sfmtv, shash, shashlower, sjoin, sjoinv, slen, slower, smatch, sncaselesscmp, snclone, sncmp, sncontains, sncopy, spbrk, srchr, sspn, sstarts, ssub, stemplate, stitle, stok, strim, supper","location":"ref/api/r/#rstring"},{"title":"RWait","text":"<p></p>  RWait  <p>Wait object.</p> Description:The RWait service provides a flexible IO waiting mechansim. API Stability:Evolving. Fields:  cvoid *arg Argument to pass to the handler.  Ticksdeadline System deadline time to wait until.  intfd File descriptor to wait upon.  RFiber *fiber Current fiber for rWaitForIO.  RWaitProchandler Handler function to invoke as the entrypoint in the fiber coroute.  intmask Current event mask.     <p></p>   PUBLIC RWait,*     RWait* rAllocWait (int fd)     <p>Allocate a wait object for a file descriptor.</p> Returns:A RWait object. API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rFreeWait (RWait *wp)     <p>Free a wait object.</p> API Stability:Evolving. See Also:    <p></p>   PUBLIC int     int rInitWait (void )     <p>Initialize the I/O wait subsystem.</p> Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rSetWaitHandler (RWait *wp, RWaitProc handler, cvoid *arg, int64 mask)     <p>Define a wait handler function on a wait object.</p> Description:This will run the designated handler on a coroutine fiber in response to matching I/O events. Parameters:  wpRWait object. handlerFunction handler to invoke as the entrypoint in the new coroutine fiber. argParameter argument to pass to the handler. maskSet to R_READABLE or R_WRITABLE or both.  API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rTermWait (void )     <p>Terminate the I/O wait subsystem.</p> API Stability:Evolving. See Also:","location":"ref/api/r/#rwait"},{"title":"RbTree","text":"<p></p>  RbTree  <p>Red/Black Tree.</p> Description:Self-balancing binary search tree. API Stability:Evolving. Fields:     <p></p>   PUBLIC RbTree,*     RbTree* rbAlloc (int flags, RbFree free, RbCompare compare)     <p>Allocate a red/black tree.</p> Parameters:  flagsSet to RB_DUP if you wish to store duplicate nodes. freeCallback to free a node's item data. compareCallback to compare two nodes.  Returns:An RbTree instance. API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbFirst (RbTree *rbt)     <p>Return the lexically first node.</p> Parameters:  rbtRbTree allocated via rbAlloc.  Returns:The first node. API Stability:Evolving. See Also:    <p></p>   PUBLIC void     void rbFree (RbTree *rbt)     <p>Free a red/black tree.</p> Parameters:  rbtRbTree to free. Allocated via rbAlloc.  API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbInsert (RbTree *rbt, void *data)     <p>Insert a new data item in the tree.</p> Parameters:  rbtRbTree allocated via rbAlloc. dataUser data to store in the tree. The data should contain the lookup key value for the data. The comparison callback will be passed the data and it should be able to extract the key from the data.  Returns:The inserted node. API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbLookup (RbTree *rbt, void *data, void *ctx)     <p>Lookup a data item.</p> Parameters:  rbtRbTree allocated via rbAlloc. dataUser data item to search for. This is passed to the comparison callback supplied when calling rbOpen. ctxContext to provide to the comparison callback.  Returns:The located node or NULL if not found. If there are multiple matching nodes, the first node encountered is returned which may not be the first lexically. If you need the first item lexically, use rbLookupFirst. API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbLookupFirst (RbTree *rbt, void *data, void *ctx)     <p>Return the lexically first matching node.</p> Parameters:  rbtRbTree allocated via rbAlloc. dataUser data item to search for. This is passed to the comparison callback supplied when calling rbOpen. ctxContext to provide to the comparison callback.  Returns:The located node or NULL if not found. If there are multiple matching nodes, the first node encountered is returned which may not be the first lexically. If you need the first item lexically, use rbLookupFirst. API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbLookupNext (RbTree *rbt, RbNode *node, void *data, void *ctx)     <p>Return the next matching node after the given node.</p> Parameters:  rbtRbTree allocated via rbAlloc. nodeStarting node for the search. dataUser data item to search for. This is passed to the comparison callback supplied when calling rbOpen. ctxContext to provide to the comparison callback.  Returns:The located node or NULL if not found. If there are multiple matching nodes, the first node encountered is returned which may not be the first lexically. If you need the first item lexically, use rbLookupFirst. API Stability:Evolving. See Also:    <p></p>   PUBLIC RbNode,*     RbNode* rbNext (RbTree *rbt, RbNode *node)     <p>Return the next node in sequence.</p> Parameters:  rbtRbTree allocated via rbAlloc. nodeStarting node.  Returns:The next node in the tree. API Stability:Evolving. See Also:    <p></p>   PUBLIC void,*     void* rbRemove (RbTree *rbt, RbNode *node, int keep)     <p>Remove a data item from the tree.</p> Parameters:  rbtRbTree allocated via rbAlloc. nodeNode to remove. The node is identified by calling rbLookup. keepIf true, the data item will not be freed. Otherwise the free callback will be invoked on the data item.  API Stability:Evolving. See Also:","location":"ref/api/r/#rbtree"},{"title":"Functions","text":"<p></p>   PUBLIC void,*     void* rAlloc (size_t size)     <p>Allocate a block of memory.</p> Description:This is the lowest level of memory allocation routine. Memory is freed via rFree. Parameters:  sizeSize of the memory block to allocate.  Returns:Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler will be invoked. Remarks:Do not mix calls to rAlloc and malloc. API Stability:Evolving.   <p></p>   PUBLIC REvent     REvent rAllocEvent (RFiber *fiber, REventProc proc, void *data, Ticks delay)     <p>Allocate and schedule a new event to be run from the event loop.</p> Description:Allocate an event to run a callback via the event loop. The safe runtime (R) is not thread-safe in general. A few APIs are thread-safe to enable data interchange between R and foreign threads.   This API is thread-safe and may be called by foreign threads. This routine is the only safe way to invoke R services from a foreign-thread. Parameters:  fiberFiber object. procFunction to invoke when the event is run. dataData to associate with the event and stored in event-&gt;data. delayTime in milliseconds used by continuous events between firing of the event.  Returns:The event object. If called from a foreign thread, note that the event may have already run n return. API Stability:Internal.   <p></p>   PUBLIC void     void rAllocException (int cause, size_t size)     <p>Signal a memory allocation exception.</p> Description:R uses a global memory allocaction error handler. If doing direct malloc() allocations that fail, call this routine to signal the memory failure and run the allocation handler. Parameters:  causeSet to R_MEM_WARNING, R_MEM_LIMIT, R_MEM_FAIL or R_MEM_TO_BIG. sizeSize in bytes of the failing allocation.  API Stability:Evolving.   <p></p>   PUBLIC RFiber,*     RFiber* rAllocFiber (RFiberProc fn, cvoid *data)     <p>Allocate a fiber coroutine object.</p> Description:This allocates a new fiber coroutine. Use rStartFiber to launch. Parameters:  fnFiber entry point. dataEntry point argument.  Returns:A fiber object. API Stability:Internal.   <p></p>   PUBLIC RLock,*     RLock* rAllocLock (void )     <p>Allocate a lock object.</p> Description:This call creates a lock object that can be used in rLock rTryLock and rUnlock calls. API Stability:Evolving.   <p></p>   PUBLIC RSocket,*     RSocket* rAllocSocket (void )     <p>Allocate a socket object.</p> Returns:A socket object instance. API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rAllocType (RType type)     <p>Allocate an object of a given type.</p> Description:Allocates a zeroed block of memory large enough to hold an instance of the specified type. Parameters:  typeRType of the object to allocate.  Returns:Returns a pointer to the allocated block. If memory is not available the memory allocation handler will be invoked. API Stability:Evolving.   <p></p>   PUBLIC void     void rBreakpoint (void )     <p>Trigger a breakpoint.</p> Description:This routine is invoked for asserion errors from rAssert and errors from rError. It is useful in debuggers as breakpoint location for detecting errors. API Stability:Evolving.   <p></p>   PUBLIC void     void rCloseSocket (RSocket *sp)     <p>Close a socket.</p> Description:Close a socket. Parameters:  spSocket object returned from rAllocSocket.  API Stability:Evolving.   <p></p>   PUBLIC int     int rConnectSocket (RSocket *sp, cchar *host, int port, Ticks deadline)     <p>Connect a client socket.</p> Description:Open a client connection. May be called from a fiber or from main. If using TLS, this must only be called from a fiber. Parameters:  spSocket object returned via rAllocSocket. hostHost or IP address to connect to. portTCP/IP port number to connect to. deadlineMaximum system time for connect to wait until completion. Use rGetTicks() + elapsed to create a deadline.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC int     int rCreateThread (cchar *name, void *proc, void *data)     <p>Create an O/S thread.</p> Parameters:  nameDescriptive name for the thread. procThread main function to invoke. dataArgument to proc.  API Stability:Evolving.   <p></p>   PUBLIC char,*     char* rFormatLocalTime (cchar *format, Time time)     <p>Convert a time value to local time and format as a string.</p> Description:R replacement for ctime. Parameters:  formatTime format string. See rFormatUniversalTime for time formats. timeTime to format. Use rGetTime to retrieve the current time.  Returns:The formatting time string. Caller msut free. API Stability:Evolving.   <p></p>   PUBLIC char,*     char* rFormatUniversalTime (cchar *format, Time time)     <p>Convert a time value to universal time and format as a string.</p> Description:Format a time string. This uses strftime if available and so the supported formats vary from platform to platform. Strftime should supports some of these these formats described below. Parameters:  formatTime format string   A ... full weekday name (Monday)   a ... abbreviated weekday name (Mon)   B ... full month name (January)   b ... abbreviated month name (Jan)   C ... century. Year / 100. (0-N)   c ... standard date and time representation   D ... date (m/d/y)   d ... day-of-month (01-31)   e ... day-of-month with a leading space if only one digit ( 1-31)   F ... same as Y-m-d   H ... hour (24 hour clock) (00-23)   h ... same as b   I ... hour (12 hour clock) (01-12)   j ... day-of-year (001-366)   k ... hour (24 hour clock) (0-23)   l ... the hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a blank.   M ... minute (00-59)   m ... month (01-12)   n ... a newline   P ... lower case am / pm   p ... AM / PM   R ... same as H:M   r ... same as H:M:S p   S ... second (00-59)   s ... seconds since epoch   T ... time (H:M:S)   t ... a tab.   U ... week-of-year, first day sunday (00-53)   u ... the weekday (Monday as the first day of the week) as a decimal number (1-7).   v ... is equivalent to `e-b-Y'.   W ... week-of-year, first day monday (00-53)   w ... weekday (0-6, sunday is 0)   X ... standard time representation   x ... standard date representation   Y ... year with century   y ... year without century (00-99)   Z ... timezone name   z ... offset from UTC (-hhmm or +hhmm)   %+ ... national representation of the date and time (the format is similar to that produced by date(1)).   %% ... percent sign   Some platforms may also support the following format extensions:   E* ... POSIX locale extensions. Where \"*\" is one of the characters: c, C, x, X, y, Y.   G ... a year as a decimal number with century. This year is the one that contains the greater par of the week (Monday as the first day of the week).   g ... the same year as in `G', but as a decimal number without century (00-99).   O* ... POSIX locale extensions. Where \"*\" is one of the characters: d, e, H, I, m, M, S, u, U, V, w, W, y. Additionly OB implemented to represent alternative months names (used standalone, without day mentioned).   V ... the week number of the year (Monday as the first day of the week) as a decimal number (01-53). If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is the last week of the previous year, and the next week is week 1.   Useful formats:   RFC822: \"%a, %d %b %Y %H:%M:%S %Z \"Fri, 07 Jan 2003 12:12:21 PDT\"   \"%T %F \"12:12:21 2007-01-03\"   \"%v \"07-Jul-2003\"   RFC3399: \"%FT%TZ\" \"1985-04-12T23:20:50.52Z\" which is April 12 1985, 23:20.50 and 52 msec  timeTime to format. Use rGetTime to retrieve the current time.  Returns:The formatting time string. Caller must free. API Stability:Evolving.   <p></p>   PUBLIC void     void rFree (void *ptr)     <p>Free a block of memory allocated via rAlloc.</p> Description:This releases a block of memory allocated via rAllocMem. Parameters:  ptrPointer to the block. If ptr is null, the call is skipped.  Remarks:The rFree routine is a macro over rFreeMem. Do not mix calls to rFreeMem and free. API Stability:Evolving.   <p></p>   PUBLIC void     void rFreeFiber (RFiber *fiber)     <p>Free a fiber coroutine.</p> Description:The fiber must have already completed before invoking this routine. This routine is typically only called internally by the fiber module. Parameters:  fiberFiber to free.  API Stability:Internal.   <p></p>   PUBLIC void     void rFreeLock (RLock *mutex)     <p>Free a dynamically allocated lock object.</p> Parameters:  mutexReference to an RLock structure to initialize.  API Stability:Evolving.   <p></p>   PUBLIC void     void rFreeSocket (RSocket *sp)     <p>Free a socket object.</p> API Stability:Evolving.   <p></p>   PUBLIC cchar,*     cchar* rGetAppName (void )     <p>Get the application name defined via rSetAppName.</p> Returns:The one-word lower case application name defined via rSetAppName. API Stability:Evolving.   <p></p>   PUBLIC RThread     RThread rGetCurrentThread (void )     <p>Get the current Thread.</p> Returns:The currently executing thread. API Stability:Evolving.   <p></p>   PUBLIC char,*     char* rGetDate (cchar *format)     <p>Get a string representation of the current date/time.</p> Description:Get the current date/time as a string according to the given format. Parameters:  formatDate formatting string. See strftime for acceptable date format specifiers. If null, then this routine uses the R_DEFAULT_DATE format.  Returns:A date string. Caller must free. API Stability:Evolving.   <p></p>   PUBLIC Ticks     Ticks rGetElapsedTicks (Ticks mark)     <p>Get the elapsed time since a ticks mark.</p> Create the ticks mark with rGetTicks()     Parameters:  markStaring time stamp.  Returns:The time elapsed since the mark was taken. API Stability:Evolving.   <p></p>   PUBLIC cchar,*     cchar* rGetError (int error)     <p>Return a string representation of an R error code.</p> Parameters:  errorAn R error code. These codes are always negative for errors and zero for R_OK.  Returns:A static string error representation. API Stability:Evolving.   <p></p>   PUBLIC RFiber,*     RFiber* rGetFiber (void )     <p>Get the current fiber object.</p> Returns:Fiber Fiber object. API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rGetFiberStack (void )     <p>Get the base address of the fiber stack.</p> Returns:A pointer to the base of the fiber stack. API Stability:Evolving.   <p></p>   uint64     rGetHiResTicks (void )     <p>Get the CPU tick count.</p> Description:Get the current CPU tick count. This is a system dependant high resolution timer. On some systems, this returns time in nanosecond resolution. Returns:The CPU time in ticks. Will return the system time if CPU ticks are not available. API Stability:Internal.   <p></p>   PUBLIC char,*     char* rGetIsoDate (Time time)     <p>Get an ISO Date string representation of the given date/time.</p> Description:Get the date/time as an ISO string. Parameters:  timeGiven time to convert.  Returns:A date string. Caller must free. API Stability:Evolving.   <p></p>   PUBLIC int     int rGetOsError (void )     <p>Return the native O/S error code.</p> Description:Returns an O/S error code from the most recent system call. This returns errno on Unix systems or GetLastError() on Windows. Returns:The O/S error code. API Stability:Evolving.   <p></p>   PUBLIC Ticks     Ticks rGetRemainingTicks (Ticks mark, Ticks timeout)     <p>Return the time remaining until a timeout has elapsed.</p> Parameters:  markStaring time stamp. timeoutTime in milliseconds.  Returns:Time in milliseconds until the timeout elapses. API Stability:Evolving.   <p></p>   PUBLIC cchar,*     cchar* rGetServerName (void )     <p>Get the application server name string.</p> Returns:A string containing the application server name string. API Stability:Evolving.   <p></p>   PUBLIC int     int rGetSocketAddr (RSocket *sp, char *ipbuf, int ipbufLen, int *port)     <p>Get the locally bound socket IP address and port for the socket.</p> Description:Get the file descriptor associated with a socket. Parameters:  spSocket object returned from rAllocSocket. ipbufBuffer to receive the IP address. ipbufLenSize of the ipbuf. portAddress of an integer to receive the port unumber.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC Socket     Socket rGetSocketHandle (RSocket *sp)     <p>Get the socket file descriptor.</p> Description:Get the file descriptor associated with a socket. Parameters:  spSocket object returned from rAllocSocket.  Returns:The Socket file descriptor used by the O/S for the socket. API Stability:Evolving.   <p></p>   PUBLIC int     int rGetState (void )     <p>Get the current R state.</p> Returns:Returns R_RUNNING, R_STOPPING or R_STOPPED. API Stability:Evolving.   <p></p>   PUBLIC Ticks     Ticks rGetTicks (void )     <p>Get the system time.</p> Description:Get the system time in milliseconds. This is a monotonically increasing time counter. It does not represent wall-clock time. Returns:The system time in milliseconds. API Stability:Evolving.   <p></p>   PUBLIC Time     Time rGetTime (void )     <p>Get the time.</p> Description:Get the date/time in milliseconds since Jan 1 1970. Returns:The time in milliseconds since Jan 1 1970. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rGetTimeouts (void )     <p>Return true if timeouts are enabled.</p> Returns:True if timeouts are enabled. API Stability:Evolving.   <p></p>   PUBLIC int     int rGetWaitFd (void )     <p>Get the global wait descriptor.</p> Returns:The wait file descriptor used by epoll and kqueue. API Stability:Evolving.   <p></p>   PUBLIC void     void rGlobalLock (void )     <p>Globally lock the application.</p> Description:This call asserts the application global lock so that other threads calling rGlobalLock will block until the current thread calls rGlobalUnlock. WARNING: Use this API very sparingly. API Stability:Evolving.   <p></p>   PUBLIC void     void rGlobalUnlock (void )     <p>Unlock the global mutex.</p> Description:This call unlocks the global mutex previously locked via rGlobalLock. API Stability:Evolving.   <p></p>   PUBLIC void     void rGracefulStop (void )     <p>Gracefully stop the app.</p> Description:Queued events will be serviced. API Stability:Evolving.   <p></p>   PUBLIC int     int rGrowList (RList *list, int size)     <p>Grow the list to be at least the requested size in elements.</p> Parameters:  listList pointer returned from rAllocList. sizeRequired minimum size for the list.  API Stability:Evolving.   <p></p>   PUBLIC char,*     char* rHashToJson (RHash *hash, int pretty)     <p>Convert a hash into JSON.</p> Parameters:  hashHash table to use for the result. prettySet to true to have a prettier JSON representation.  Returns:A JSON string. Caller must free. API Stability:Evolving.   <p></p>   PUBLIC RBuf,*     RBuf* rHashToJsonBuf (RHash *hash, RBuf *buf, int pretty)     <p>Convert a hash into JSON in the given buffer.</p> Parameters:  hashHash table to use for the result. bufRBuf instance to store the json text. prettySet to true to have a prettier JSON representation.  Returns:The given buffer. API Stability:Evolving.   <p></p>   PUBLIC int     int rInit (RFiberProc fn, cvoid *arg, ssize stackSize)     <p>Initialize the runtime.</p> Description:This routine should be called at startup from main(). Parameters:  fnFiber function to start. argArgument to the fiber function. stackSizeSize of the fiber coroutine stacks.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC int     int rInitFibers (ssize stackSize)     <p>Initialize the fiber coroutine module.</p> Parameters:  stackSizeDefault size of fiber stacks in bytes.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC RLock,*     RLock* rInitLock (RLock *mutex)     <p>Initialize a statically allocated lock object.</p> Description:This call initialized a lock object without allocation. The object can then be used used in rLock rTryLock and rUnlock calls. Parameters:  mutexReference to an RLock structure to initialize.  Returns:A reference to the supplied mutex. Returns null on errors. API Stability:Evolving.   <p></p>   PUBLIC int     int rInitOs (void )     <p>Create and initialze the O/S dependent subsystem.</p> Description:Called internally by the RT. Should not be called by users. API Stability:Internal.   <p></p>   PUBLIC bool     bool rIsMain (void )     <p>Test if a fiber is the main fiber.</p> Returns:True if the fiber is the main fiber. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rIsSocketClosed (RSocket *sp)     <p>Test if the socket has been closed.</p> Description:Determine if rCloseSocket has been called. Parameters:  spSocket object returned from rAllocSocket.  Returns:True if the socket is at end-of-file. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rIsSocketConnected (RSocket *sp)     <p>Determine if the socket has connected to a remote pper.</p> Parameters:  spSocket object returned from rAllocSocket.  Returns:True if the socket is connected. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rIsSocketEof (RSocket *sp)     <p>Test if the other end of the socket has been closed.</p> Description:Determine if the other end of the socket has been closed and the socket is at end-of-file. Parameters:  spSocket object returned from rAllocSocket.  Returns:True if the socket is at end-of-file. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rIsSocketHandshaking (RSocket *sp)     <p>Determine if the socket is partway through a TLS handshake.</p> Parameters:  spSocket object returned from rAllocSocket.  Returns:True if the socket is handshaking. API Stability:Evolving.   <p></p>   PUBLIC bool     bool rIsSocketSecure (RSocket *sp)     <p>Determine if the socket is secure.</p> Description:Determine if the socket is using SSL to provide enhanced security. Parameters:  spSocket object returned from rAllocSocket.  Returns:True if the socket is using SSL, otherwise zero. API Stability:Evolving.   <p></p>   PUBLIC int     int rListenSocket (RSocket *sp, cchar *host, int port, RSocketProc handler, void *arg)     <p>Listen on a server socket for incoming connections.</p> Description:Open a server socket and listen for client connections. If host is null, then this will listen on both IPv6 and IPv4. Parameters:  spSocket object returned via rAllocSocket. hostHost name or IP address to bind to. Set to 0.0.0.0 to bind to all possible addresses on a given port. portTCP/IP port number to connect to. handlerFunction callback to invoke for incoming connections. The function is invoked on a new fiber coroutine. argArgument to handler.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rMemdup (cvoid *ptr, size_t size)     <p>Duplicate a block of memory.</p> Description:Copy a block of memory into a newly allocated block. Parameters:  ptrPointer to the block to duplicate. sizeSize of the block to copy.  Returns:Returns an allocated block. API Stability:Evolving.   <p></p>   PUBLIC Time     Time rParseIsoDate (cchar *when)     <p>Parse an ISO date string.</p> Returns:The time in milliseconds since Jan 1, 1970. API Stability:Evolving.   <p></p>   PUBLIC ssize     ssize rReadSocket (RSocket *sp, char *buf, ssize bufsize, Ticks deadline)     <p>Read from a socket.</p> Description:Read data from a socket. The read will return with whatever bytes are available. If none is available, this call will yield the current fiber and resume the main fiber. When data is available, the fiber will resume. Must be called from a fiber. Parameters:  spSocket object returned from rAllocSocket. bufPointer to a buffer to hold the read data. bufsizeSize of the buffer. deadlineMaximum system time for connect to wait until completion. Use rGetTicks() + elapsed to create a deadline.  Returns:A count of bytes actually read. Return a negative R error code on errors. Returns:Return -1 for EOF and errors. On success, return the number of bytes read. Use rIsSocketEof to distinguision between EOF and errors. API Stability:Evolving.   <p></p>   PUBLIC ssize     ssize rReadSocketSync (RSocket *sp, char *buf, ssize bufsize)     <p>Read from a socket.</p> Description:Read data from a socket. The read will return with whatever bytes are available. If none and the socket is in blocking mode, it will block until there is some data available or the socket is disconnected. Use rSetSocketBlocking to change the socket blocking mode. It is preferable to use rReadSocket which can wait without blocking via fiber coroutines. Parameters:  spSocket object returned from rAllocSocket. bufPointer to a buffer to hold the read data. bufsizeSize of the buffer.  Returns:A count of bytes actually read. Return a negative R error code on errors. Returns:Return -1 for EOF and errors. On success, return the number of bytes read. Use rIsSocketEof to distinguision between EOF and errors. API Stability:Evolving.   <p></p>   PUBLIC void     void rResetSocket (RSocket *sp)     <p>Reset a socket.</p> Description:Reset a socket by closing the underlying socket file descriptor. The Socket instance can be reused by rConnectSocket. Parameters:  spSocket object returned from rAllocSocket.  API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rResumeFiber (RFiber *fiber, void *result)     <p>Resume a fiber.</p> Description:Resume a fiber. Generally only called from the main fiber. If called from a non-main fiber the target fiber is resumed via an event to the main fiber. Parameters:  fiberFiber object. resultResult to pass to the fiber and will be the value returned from rYieldFiber.  API Stability:Evolving.   <p></p>   PUBLIC int     int rSetAppName (cchar *name, cchar *title, cchar *version)     <p>Set the application name, title and version.</p> Parameters:  nameOne word, lower case name for the app. titlePascal case multi-word descriptive name. versionVersion of the app. Major-Minor-Patch. E.g. 1.2.3.  Returns:Zero if successful. Otherwise a negative RT error code. API Stability:Evolving.   <p></p>   PUBLIC void     void rSetDefaultSocketCa (cchar *ca)     <p>Set the default CA root certificate bundle.</p> Parameters:  caFile containing the root certificates.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetFiberStack (ssize size)     <p>Set the default fiber stack size.</p> Parameters:  sizeSize of fiber stack in bytes.  API Stability:Internal.   <p></p>   PUBLIC void     void rSetMemHandler (RMemProc handler)     <p>Define a global memory exhaustion handler.</p> Description:The memory handler will be invoked for memory allocation errors. Parameters:  handlerCallback function invoked with the signature: void fn(int cause, size_t size).  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetOsError (int error)     <p>Set the O/S error code.</p> Description:Set errno or equivalent. API Stability:Evolving.   <p></p>   PUBLIC void     void rSetSocketBlocking (RSocket *sp, bool on)     <p>Set a socket into blocking I/O mode.</p> from a socket     Description:Sockets are opened in non-blocking mode by default. Parameters:  spSocket object returned from rAllocSocket. onSet to true to enable blocking mode.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetSocketCerts (RSocket *sp, cchar *key, cchar *cert, cchar *ca, cchar *revoke)     <p>Configure the socket TLS certificates.</p> Description:This call is a wrapper over rSetTLSCerts. Parameters:  spSocket object returned from rAllocSocket. keyPrivate key for the certificate. certCertificate to use for TLS. caCertificate authority to use when verifying peer connections. revokeList of revoked certificates.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetSocketCiphers (RSocket *sp, cchar *ciphers)     <p>Set the ciphers to use for communications.</p> Parameters:  spSocket object returned from rAllocSocket. ciphersString of suitable ciphers.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetSocketVerify (RSocket *sp, int verifyPeer, int verifyIssuer)     <p>Set the socket TLS verification parameters.</p> Description:This call is a wrapper over rSetTlsCerts. Parameters:  spSocket object returned from rAllocSocket. verifyPeerSet to true to verify peer certificates. verifyIssuerSet to true to verify the issuer of the peer certificate.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetSocketWaitMask (RSocket *sp, int64 mask, Ticks deadline)     <p>Update the wait mask for a socket.</p> Parameters:  spSocket object returned from rAllocSocket. maskSet to R_READABLE or R_WRITABLE or both. deadlineSystem time in ticks to wait until.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSetState (int state)     <p>Set the R state.</p> Parameters:  stateSet to R_RUNNING, R_STOPPING or R_STOPPED.  API Stability:Evolving.   <p></p>   PUBLIC void     void rSleep (Ticks ticks)     <p>Sleep a fiber for the requested number of milliseconds.</p> Must be called from a fiber. Description:Pause a fiber for the requested duration and then resume via the main fiber. Other fibers continue to run. Parameters:  ticksTime period in milliseconds to sleep.  API Stability:Evolving.   <p></p>   PUBLIC int     int rSpawnFiber (RFiberProc fn, void *arg)     <p>Spawn a fiber coroutine.</p> Description:This allocates a new fiber and resumes it. Parameters:  fnFiber entry point. argEntry point argument.  Returns:Zero if successful. API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rSpawnThread (RThreadProc fn, void *arg)     <p>Spawn an O/S thread.</p> Description:This creates a new thread and runs the given function. Parameters:  fnThread main function entry point. argArgument provided to the thread.  Returns:Value returned from fn(). API Stability:Evolving.   <p></p>   PUBLIC void     void rStartFiber (RFiber *fiber, void *data)     <p>Start a fiber coroutine.</p> Description:This creates an event so that the main fiber can start the fiber. This routine is typically only called internally by the fiber module. Parameters:  fiberThe fiber object. dataValue to pass to the fiber entry point.  API Stability:Internal.   <p></p>   PUBLIC void     void rStop (void )     <p>Immediately stop the app.</p> Description:Queued events will not be serviced. API Stability:Evolving.   <p></p>   PUBLIC void     void rTermFibers (void )     <p>Terminate the fiber coroutine module.</p> API Stability:Evolving.   <p></p>   PUBLIC void     void rTermLock (RLock *mutex)     <p>Terminate a statically allocated lock object.</p> Parameters:  mutexReference to an RLock structure to initialize.  API Stability:Evolving.   <p></p>   PUBLIC void     void rTermOs (void )     <p>Stop the O/S dependent subsystem.</p> API Stability:Internal.   <p></p>   PUBLIC bool     bool rTryLock (RLock *lock)     <p>Attempt to lock access.</p> Description:This call attempts to assert a lock on the given lock mutex so that other threads calling rLock or rTryLock will block until the current thread calls rUnlock. Returns:Returns zero if the successful in locking the mutex. Returns a negative error code if unsuccessful. API Stability:Evolving.   <p></p>   PUBLIC ssize     ssize rWriteSocket (RSocket *sp, cvoid *buf, ssize bufsize, Ticks deadline)     <p>Write to a socket.</p> Description:Write a block of data to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. If no data can be written, this call will yield the current fiber and resume the main fiber. When data is available, the fiber will resume. Must be called from a fiber. Parameters:  spSocket object returned from rAllocSocket. bufReference to a block to write to the socket. bufsizeLength of data to write. This may be less than the requested write length if the socket is in non-blocking mode. Will return a negative error code on errors. deadlineSystem time in ticks to wait until.  Returns:A count of bytes actually written. Return a negative error code on errors and if the socket cannot absorb any more data. If the transport is saturated, will return a negative error and rGetError() returns EAGAIN or EWOULDBLOCK. API Stability:Evolving.   <p></p>   PUBLIC ssize     ssize rWriteSocketSync (RSocket *sp, cvoid *buf, ssize len)     <p>Write to a socket.</p> Description:Write a block of data to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. It is preferable to use rWriteSocket which can wait without blocking via fiber coroutines. Parameters:  spSocket object returned from rAllocSocket. bufReference to a block to write to the socket. lenLength of data to write. This may be less than the requested write length if the socket is in non-blocking mode. Will return a negative error code on errors.  Returns:A count of bytes actually written. Return a negative error code on errors and if the socket cannot absorb any more data. If the transport is saturated, will return a negative error and rGetError() returns EAGAIN or EWOULDBLOCK. API Stability:Evolving.   <p></p>   PUBLIC void,*     void* rYieldFiber (void *value)     <p>Yield a fiber back to the main fiber.</p> Description:Pause a fiber until resumed by the main fiber. the target fiber is resumed via an event to the main fiber. This routine is thread safe when invoked from a non-main thread. Parameters:  valueValue to provide as a result to the main fiber that called rResumeFiber.  API Stability:Evolving.","location":"ref/api/r/#functions_1"},{"title":"Typedefs","text":"<p></p>       typedef libucontext_ucontext_t RFiberContext.     <p>Fiber coroutine stack context.</p> API Stability:Evolving.   <p></p>       typedef void(* RFiberProc) (void *data).     <p>Fiber entry point function.</p> Parameters:  dataCustom function argument.  API Stability:Evolving.   <p></p>       typedef uint(* RHashProc) (cvoid *name, ssize len).     <p>Hashing function to use for the table.</p> Parameters:  nameName to hash. lenLength of the name to hash.  Returns:An integer hash index. API Stability:Internal.   <p></p>       typedef void(* RMemProc) (int cause, size_t size).     <p>Memory exhaustion callback procedure.</p> Parameters:  causeThe cause of the memory failure. sizeThe size of the failing block allocation.    <p></p>       typedef void*(* RThreadProc) (void *data).     <p>Thread entry point function.</p> Parameters:  dataCustom function argument.  Returns:Value to pass back from rSpawnThread. API Stability:Evolving.   <p></p>       typedef long size_t.     <p>Unsigned integral type.</p> Equivalent in size to void*     <p></p>       typedef int Socket.     <p>Argument for sockets.</p>   <p></p>       typedef unsigned long time_t.     <p>Unsigned time type.</p> Time in seconds since Jan 1, 1970     <p></p>       typedef void(* REventProc) (void *data).     <p>Callback function for events.</p> Parameters:  dataOpaque data argument.  API Stability:Evolving. See Also:    <p></p>       typedef void(* RWatchProc) (cvoid *data, cvoid *arg).     <p>Callback function for watched events.</p> Parameters:  dataOpaque data argument supplied via rWatchEvent. argWatched event arg. idEvent ID.  API Stability:Evolving. See Also:    <p></p>       typedef int(* RWalkDirProc) (void *arg, cchar *path, int flags).     <p>Callback function for rWalkDir</p> Parameters:  argArgument supplied to rWalkDir. pathCurrent filename path to walk. flagsFlags supplied to rWalkDir.  API Stability:Evolving. See Also: RFile   <p></p>       typedef int(* RListCompareProc) (cvoid *arg1, cvoid *arg2).     <p>List comparison procedure for soring.</p> Description:Callback function signature used by rSortList Parameters:  arg1First list item to compare. arg2Second list item to compare.  Returns:Return zero if the items are equal. Return -1 if the first arg is less than the second. Otherwise return 1. API Stability:Evolving. See Also: RList, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>       typedef int(* RSortProc) (cvoid *p1, cvoid *p2, void *ctx).     <p>Quicksort callback function.</p> Description:This is a quicksor callback with a context argument. Parameters:  p1Pointer to first element. p2Pointer to second element. ctxContext argument to provide to comparison function.  Returns:-1, 0, or 1, depending on if the elements are p1 &lt; p2, p1 == p2 or p1 &gt; p2. API Stability:Evolving. See Also: RList, RListCompareProc, rAddItem, rAddNullItem, rAllocList, rClearList, rGetItem, rGetListLength, rGetNextItem, rInsertItemAt, rLookupItem, rLookupStringItem, rRemoveItem, rRemoveItemAt, rRemoveStringItem, rSetItem, rSortList   <p></p>       typedef void(* RLogHandler) (cchar *type, cchar *source, cchar *msg).     <p>Log handler callback type.</p> Description:Callback prototype for the log handler. Used by rSetLogHandler to define a message logging handler to process log and error messages. See rLog for more details. Parameters:  typeThe message type: 'code', 'error', 'info', 'log'. sourceThe message source. msgLog message.  API Stability:Evolving. See Also: rError, rGetLogFile, rGetLogHandler, rLog, rSetLog   <p></p>       typedef void(* RWaitProc) (cvoid *data, int mask).     <p>Callback function for IO wait events.</p> Parameters:  dataOpaque data argument. idIO event selection mask.  API Stability:Evolving. See Also:    <p></p>       typedef int(* RbCompare) (cvoid *n1, cvoid *n2, cvoid *ctx).     <p>Callback to compare a data nodes.</p> Description:The comparison function may perform a simple \"strcmp\" style comparison function or it may perform a modified comparison using the supplied context information. For example: a comparison could perform a \"startsWith\" style comparison. The context argument can control the type of comparison that is performed. Parameters:  n1Reference to first item. n2Reference to item to compare. ctxContext provided to rbLookup.  Returns:Return -1 if n1 is lexically less than n2. Zero if equal and 1 if n1 is greater than n2. API Stability:Evolving. See Also:    <p></p>       typedef void(* RbFree) (void *data).     <p>Callback to free a nodes associated data.</p> Parameters:  dataReference to the associated data for a node.  API Stability:Evolving. See Also:    <p></p>  RFiber  <p>Fiber state.</p> API Stability:Evolving. Fields:     <p></p>  RLock  <p>Multithreading lock control structure.</p> Description:RLock is used for multithread locking in multithreaded applications. Fields:   API Stability:Evolving.   <p></p>  RName  <p>Per item structure.</p> Fields:  uintcustom Custom data bits.  uintflags Name was allocated.  char *name Hash name.  intnext Next name in hash chain or next free if on free list.  void *value Pointer to data.","location":"ref/api/r/#typedefs_1"},{"title":"URL API","text":"<p>The URL library is a fast, minimal embedded HTTP Client. It is ideal for issuing REST HTTP requests and supports parallel execution via fiber coroutines.</p> <p>The URL library is a streaming client and supports full-duplex for request body and response content. It transparently manages transfer chunk encoding for requests and responses.</p> <p>The library has configurable request/response timeouts and retries.</p> <p>Features:</p> <ul> <li>Supports transfer-chunk encoding for dynamic request bodies.</li> <li>Control over headers</li> <li>Full-duplex streaming support for minimal memory usage.</li> <li>Full support for TLS including certificate verification.</li> <li>Configurable retries and timeouts.</li> <li>Parallelism via fiber coroutines.</li> </ul> <p>The library does not support basic or digest authentication as there are unresolved security issues with these mechanisms.</p> <p></p>","location":"ref/api/url/"},{"title":"Extensions","text":"Url Url request object.  <p></p>","location":"ref/api/url/#extensions"},{"title":"Functions","text":"Url*urlAlloc(void) Allocate a URL object. voidurlClose(Url *up) Close the underlying network socket associated with the URL object. inturlFetch(Url *up, cchar *method, cchar *uri, cvoid *data, ssize size, cchar *headers, ...) Fetch a URL. Json*urlFetchJson(Url *up, cchar *method, cchar *uri, cvoid *data, ssize size, cchar *headers, ...) Fetch a URL and return a JSON response. voidurlFree(Url *up) Free a URL object. char*urlGet(cchar *uri, cchar *headers, ...) Get a URL using a HTTP GET request. cchar*urlGetError(Url *up) Get the URL internal error message. cchar*urlGetHeader(Url *up, cchar *header) Get a response HTTP header. Json*urlGetJsonResponse(Url *up) Get the response to a URL request as a JSON object tree. cchar*urlGetResponse(Url *up) Get the response to a URL request. inturlGetStatus(Url *up) Get the HTTP response status code for a request. inturlParse(Url *up, cchar *uri) Parse a URL into its constituent components in the Url structure. char*urlPost(cchar *uri, cvoid *data, ssize size, cchar *headers, ...) Issue a HTTP POST request. Json*urlPostJson(cchar *uri, cvoid *data, ssize len, cchar *headers, ...) Issue a HTTP POST request and return parsed JSON. ssizeurlRead(Url *up, char *buf, ssize bufsize) Read response data for a request. voidurlSetCerts(Url *up, cchar *key, cchar *cert, cchar *ca, cchar *revoke) Define the certificates to use with TLS. voidurlSetDefaultRetries(int retries) Set the default number of retries for requests. voidurlSetDefaultTimeout(int timeout) Set the default request timeout to use for future URL instances. voidurlSetError(Url *up, cchar *message, ...) Set the URL internal error message. voidurlSetTimeout(Url *up, int timeout) Set the request timeout to use for the specific URL object. voidurlSetVerify(Url *up, int verifyPeer, int verifyIssuer) Control verification of TLS connections. inturlStart(Url *up, cchar *method, cchar *uri, ssize txLen) Start a Url request. ssizeurlWrite(Url *up, cvoid *data, ssize size) Write body data for a request. inturlWriteHeaders(Url *up, cchar *headers, ...) Write request headers.  <p></p>","location":"ref/api/url/#functions"},{"title":"Typedefs","text":"UrlProcURL callback procedure.  <p></p>","location":"ref/api/url/#typedefs"},{"title":"Defines","text":"#defineURL_CODE_ACCEPTED\u00a0\u00a0\u00a0202   The request has been accepted and processing is continuing.  #defineURL_CODE_BAD_GATEWAY\u00a0\u00a0\u00a0502   The server cannot act as a gateway for the given request.  #defineURL_CODE_BAD_METHOD\u00a0\u00a0\u00a0405   The request HTTP method was not supported by the resource.  #defineURL_CODE_BAD_REQUEST\u00a0\u00a0\u00a0400   The request is malformed.  #defineURL_CODE_BAD_VERSION\u00a0\u00a0\u00a0505   The server does not support the HTTP protocol version.  #defineURL_CODE_CONFLICT\u00a0\u00a0\u00a0409   The request had a conflict in the request headers and URI.  #defineURL_CODE_CONTINUE\u00a0\u00a0\u00a0100   Continue with request, only parial content transmitted.  #defineURL_CODE_CREATED\u00a0\u00a0\u00a0201   The request has completed and a new resource was created.  #defineURL_CODE_EXPECTATION_FAILED\u00a0\u00a0\u00a0417   The server cannot satisfy the Expect header requirements.  #defineURL_CODE_FORBIDDEN\u00a0\u00a0\u00a0403   The request was legal, but the server refuses to process.  #defineURL_CODE_GATEWAY_TIMEOUT\u00a0\u00a0\u00a0504   The server gateway timed out waiting for the upstream server.  #defineURL_CODE_GONE\u00a0\u00a0\u00a0410   The requested resource is no longer available.  #defineURL_CODE_IM_A_TEAPOT\u00a0\u00a0\u00a0418   Short and stout error code (RFC 2324).  #defineURL_CODE_INSUFFICIENT_STORAGE\u00a0\u00a0\u00a0507   The server has insufficient storage to complete the request.  #defineURL_CODE_INTERNAL_SERVER_ERROR\u00a0\u00a0\u00a0500   Server processing or configuration error.  #defineURL_CODE_LENGTH_REQUIRED\u00a0\u00a0\u00a0411   The request did not specify a required content length.  #defineURL_CODE_MOVED_PERMANENTLY\u00a0\u00a0\u00a0301   The requested URI has moved permanently to a new location.  #defineURL_CODE_MOVED_TEMPORARILY\u00a0\u00a0\u00a0302   The URI has moved temporarily to a new location.  #defineURL_CODE_NO_CONTENT\u00a0\u00a0\u00a0204   The request has completed and there is no response to send.  #defineURL_CODE_NO_RESPONSE\u00a0\u00a0\u00a0444   The connection was closed with no response to the client.  #defineURL_CODE_NOT_ACCEPTABLE\u00a0\u00a0\u00a0406   The requested resource cannot generate the required content.  #defineURL_CODE_NOT_AUTHORITATIVE\u00a0\u00a0\u00a0203   The request has completed but content may be from another source.  #defineURL_CODE_NOT_FOUND\u00a0\u00a0\u00a0404   The requested resource was not found.  #defineURL_CODE_NOT_IMPLEMENTED\u00a0\u00a0\u00a0501   The server does not recognize the request or method.  #defineURL_CODE_NOT_MODIFIED\u00a0\u00a0\u00a0304   The requested resource has changed since the last request.  #defineURL_CODE_OK\u00a0\u00a0\u00a0200   The request completed successfully.  #defineURL_CODE_PARTIAL\u00a0\u00a0\u00a0206   The request has completed and is returning parial content.  #defineURL_CODE_PAYMENT_REQUIRED\u00a0\u00a0\u00a0402   Reserved for future use.  #defineURL_CODE_PRECOND_FAILED\u00a0\u00a0\u00a0412   The server cannot satisfy one of the request preconditions.  #defineURL_CODE_RANGE_NOT_SATISFIABLE\u00a0\u00a0\u00a0416   The request content range does not exist for the resource.  #defineURL_CODE_REQUEST_TIMEOUT\u00a0\u00a0\u00a0408   The server timed out waiting for the request to complete.  #defineURL_CODE_REQUEST_TOO_LARGE\u00a0\u00a0\u00a0413   The request is too large for the server to process.  #defineURL_CODE_REQUEST_URL_TOO_LARGE\u00a0\u00a0\u00a0414   The request URI is too long for the server to process.  #defineURL_CODE_RESET\u00a0\u00a0\u00a0205   The request has completed with no content.  #defineURL_CODE_SEE_OTHER\u00a0\u00a0\u00a0303   The requested URI can be found at another URI location.  #defineURL_CODE_SERVICE_UNAVAILABLE\u00a0\u00a0\u00a0503   The server is currently unavailable or overloaded.  #defineURL_CODE_SWITCHING\u00a0\u00a0\u00a0101   Switching protocols.  #defineURL_CODE_TEMPORARY_REDIRECT\u00a0\u00a0\u00a0307   The request should be repeated at another URI location.  #defineURL_CODE_UNAUTHORIZED\u00a0\u00a0\u00a0401   Authentication for the request has failed.  #defineURL_CODE_UNSUPPORTED_MEDIA_TYPE\u00a0\u00a0\u00a0415   The request media type is not supported by the server or resource.  #defineURL_CODE_USE_PROXY\u00a0\u00a0\u00a0305   The requested resource must be accessed via the location proxy.  #defineURL_NOTIFY_DONE\u00a0\u00a0\u00a03   Request is complete.  #defineURL_NOTIFY_IO\u00a0\u00a0\u00a01   Streaming I/O event.  #defineURL_NOTIFY_RETRY\u00a0\u00a0\u00a02   Retry initiated.","location":"ref/api/url/#defines"},{"title":"Url","text":"<p></p>  Url  <p>Url request object.</p> Description:The Url service is a streaming HTTP request client. This service requires the use of fibers from the portable runtime. API Stability:Evolving. Fields:  uintcertsDefined Certificates have been defined.  uintchunked Request is using transfer chunk encoding.  uintclose Connection should be closed on completion of the current request.  Ticksdeadline Request time limit expiry deadline.  char *error Error message.  cchar *host Request host.  cchar *path Request path without leading \"/\" and query/ref.  intport Request port.  cchar *query Request query portion.  cchar *reference Request reference portion.  RBuf *response Buffer to hold complete response.  uintresponseRead Response has been read.  uintretries Client implemented retry field.  RBuf *rx Buffer for reading responses.  char *rxHeaders Rx headers.  ssizerxLen Length of rx body.  ssizerxRemaining Rx headers.  cchar *scheme Request scheme.  RSocket *sock Network socket.  uintstatus Response (rx) status.  Tickstimeout Request timeout.  ssizetxLen Length of tx body.  char *urlbuf HTTP request method.  Parsed and tokenized url.  uintwroteHeaders Tx headers have been written.     <p></p>   Url *     urlAlloc (void )     <p>Allocate a URL object.</p> Description:A URL object represents a network connection on which one or more HTTP client requests may be issued one at a time. Returns:The url object. API Stability:Evolving. See Also:    <p></p>       void     urlClose (Url *up)     <p>Close the underlying network socket associated with the URL object.</p> Parameters:  upURL object.  API Stability:Evolving. See Also:    <p></p>       int     urlFetch (Url *up, cchar *method, cchar *uri, cvoid *data, ssize size, cchar *headers, ...)     <p>Fetch a URL.</p> Description:This routine issues a HTTP request and reads and buffers the response. This routine will block the current fiber while waiting for the request to complete. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object. methodHTTP method verb. uriHTTP URL to fetch. dataBody data for request. Set to NULL if none. sizeSize of body data for request. Set to 0 if none. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\". ...Optional header arguments.  Returns:Response HTTP status code. Use urlGetResponse or urlRead to read the response. API Stability:Evolving. See Also:    <p></p>   Json *     urlFetchJson (Url *up, cchar *method, cchar *uri, cvoid *data, ssize size, cchar *headers, ...)     <p>Fetch a URL and return a JSON response.</p> Description:This routine issues a HTTP request and reads and parses the response into a JSON object tree. This routine will block the current fiber while waiting for the request to complete. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object. methodHTTP method verb. uriHTTP URL to fetch. dataBody data for request. Set to NULL if none. sizeSize of body data for request. Set to 0 if none. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\". If the headers are not provided, a headers value of \"Content-Type: application/json\\r\\n\" is used. ...Optional header arguments.  Returns:Parsed JSON response. If the request does not return a HTTP 200 status code or the response is not JSON, the request returns NULL. Use urlGetError to get any error string and urlGetStatus to get the HTTP status code. Caller must free via jsonFree(). API Stability:Evolving. See Also:    <p></p>       void     urlFree (Url *up)     <p>Free a URL object.</p> Parameters:  upURL object.  API Stability:Evolving. See Also:    <p></p>       char *     urlGet (cchar *uri, cchar *headers, ...)     <p>Get a URL using a HTTP GET request.</p> Description:This routine will block the current fiber while waiting for the request to complete. Other fibers continue to run. Must only be called from a fiber. Parameters:  uriHTTP URL to fetch. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\".  Returns:Response body if successful, otherwise null. Caller must free. API Stability:Evolving. See Also:    <p></p>   cchar *     urlGetError (Url *up)     <p>Get the URL internal error message.</p> Parameters:  upURL object.  Returns:The URL error message for the most recent request. Returns NULL if no error message defined. Caller must NOT free this message. API Stability:Evolving. See Also:    <p></p>   cchar *     urlGetHeader (Url *up, cchar *header)     <p>Get a response HTTP header.</p> Parameters:  upURL object. headerHTTP header name. This can be any case. For example: \"Authorization\".  Returns:The value of the HTTP header. Returns NULL if not defined. Caller must NOT free the returned string. API Stability:Evolving. See Also:    <p></p>   Json *     urlGetJsonResponse (Url *up)     <p>Get the response to a URL request as a JSON object tree.</p> Description:After issuing urlFetch, urlGet or urlPost, this routine may be called to read and parse the response as a JSON object. This call should only be used when the response is a valid JSON UTF-8 string. This routine buffers the entire response body and creates the parsed JSON tree.   This routine will block the current fiber while waiting for the request to complete. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object.  Returns:The response body as parsed JSON object. Caller must free the result via jsonFree. API Stability:Evolving. See Also:    <p></p>   cchar *     urlGetResponse (Url *up)     <p>Get the response to a URL request.</p> Description:After issuing urlFetch, urlGet or urlPost, this routine may be called to read, buffer and return the response body. This call should only be used when the response is a valid UTF-8 string. Otherwise, use urlRead to read the response body. As this routine buffers the entire response body, it should only be used for relatively small requests. Otherwise, the memory footprint of the application may be larger than desired.   This routine will block the current fiber while waiting for the request to complete. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object.  Returns:The response body as a string. Caller must NOT free. API Stability:Evolving. See Also:    <p></p>       int     urlGetStatus (Url *up)     <p>Get the HTTP response status code for a request.</p> Parameters:  upURL object.  Returns:The HTTP status code for the most recently completed request. API Stability:Evolving. See Also:    <p></p>       int     urlParse (Url *up, cchar *uri)     <p>Parse a URL into its constituent components in the Url structure.</p> Parameters:  upURL object. uriUri to parse.  Returns:Zero if the uri parses successfully. API Stability:Evolving. See Also:    <p></p>       char *     urlPost (cchar *uri, cvoid *data, ssize size, cchar *headers, ...)     <p>Issue a HTTP POST request.</p> Must only be called from a fiber. Parameters:  uriHTTP URL to fetch. dataBody data for request. Set to NULL if none. sizeSize of body data for request. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\".  Returns:Response body if successful, otherwise null. Caller must free. API Stability:Evolving. See Also:    <p></p>   Json *     urlPostJson (cchar *uri, cvoid *data, ssize len, cchar *headers, ...)     <p>Issue a HTTP POST request and return parsed JSON.</p> Must only be called from a fiber. Parameters:  uriHTTP URL to fetch. dataBody data for request. Set to NULL if none. lenSize of body data for request. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\".  Returns:Parsed JSON response. If the request does not return a HTTP 200 status code or the response is not JSON, the request returns NULL. Caller must free via jsonFree(). API Stability:Evolving. See Also:    <p></p>   ssize     urlRead (Url *up, char *buf, ssize bufsize)     <p>Read response data for a request.</p> Description:This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object. bufBuffer to read into. bufsizeSize of the buffer.  Returns:The number of bytes read. Returns &lt; 0 on errors. Returns 0 when there is no more data to read. API Stability:Evolving. See Also:    <p></p>       void     urlSetCerts (Url *up, cchar *key, cchar *cert, cchar *ca, cchar *revoke)     <p>Define the certificates to use with TLS.</p> Parameters:  upURL object. keyCertificate private key. certCertificate text. caCertificate authority text. revokeCertificates to revoke.  API Stability:Evolving. See Also:    <p></p>       void     urlSetDefaultRetries (int retries)     <p>Set the default number of retries for requests.</p> Description:This does not change the number of retries for existing Url objects. Parameters:  retriesNumber of retries.  API Stability:Evolving. See Also:    <p></p>       void     urlSetDefaultTimeout (int timeout)     <p>Set the default request timeout to use for future URL instances.</p> Description:This does not change the timeout for existing Url objects. Parameters:  timeoutTimeout in milliseconds.  API Stability:Evolving. See Also:    <p></p>       void     urlSetError (Url *up, cchar *message, ...)     <p>Set the URL internal error message.</p> Parameters:  upURL object. messagePrintf style message format string. ...Message arguments.  API Stability:Evolving. See Also:    <p></p>       void     urlSetTimeout (Url *up, int timeout)     <p>Set the request timeout to use for the specific URL object.</p> Parameters:  upURL object. timeoutTimeout in milliseconds.  API Stability:Evolving. See Also:    <p></p>       void     urlSetVerify (Url *up, int verifyPeer, int verifyIssuer)     <p>Control verification of TLS connections.</p> Parameters:  upURL object. verifyPeerSet to true to verify the certificate of the remote peer. verifyIssuerSet to true to verify the issuer of the peer certificate.  API Stability:Evolving. See Also:    <p></p>       int     urlStart (Url *up, cchar *method, cchar *uri, ssize txLen)     <p>Start a Url request.</p> Description:This is a low level API that initiates a connection to a remote HTTP resource. Use urlWriteHeaders and urlWrite to send the request. Must only be called from a fiber. Parameters:  upURL object. methodHTTP method verb. uriHTTP URL to fetch. txLenContent length of request body. This must match the length of data written with urlWrite. Set to -1 if the content length is not known.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   ssize     urlWrite (Url *up, cvoid *data, ssize size)     <p>Write body data for a request.</p> Description:This routine will block the current fiber. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object. dataBuffer of data to write. sizeLength of data to write.  Returns:The number of bytes actually written. API Stability:Evolving. See Also:    <p></p>       int     urlWriteHeaders (Url *up, cchar *headers, ...)     <p>Write request headers.</p> Description:This will write the HTTP request line and supplied headers. If Host and/or Content-Length are not supplied, they will be added if known. This routine will block the current fiber. Other fibers continue to run. Must only be called from a fiber. Parameters:  upURL object. headersOptional request headers. This parameter is a printf style formatted pattern with following arguments. Individual header lines must be terminated with \"\\r\\n\". ...Optional header arguments.  Returns:Zero if successful. API Stability:Evolving. See Also:","location":"ref/api/url/#url"},{"title":"Typedefs","text":"<p></p>       typedef void(* UrlProc) (struct Url *up, int event, char *buf, ssize len).     <p>URL callback procedure.</p> Parameters:  upURL object. eventType of event. Set to URL_NOTIFY_IO, URL_NOTIFY_RETRY or URL_NOTIFY_DONE. bufAssociated data. lenAssociated data length.  API Stability:Evolving. See Also:","location":"ref/api/url/#typedefs_1"},{"title":"Web Server API","text":"<p>The web server library is a fast, compact web server designed for management web applications and serving device data.</p> <p>The web server does not attempt to offer ALL HTTP features and functions. Rather, it aims to implement only the required core of HTTP/1.1 and thus deliver a tiny, fast, secure embedded web server that is exceptionally good at serving single page web applications and device data.</p> <p>The web server supports: HTTP/1.0, HTTP/1.1, TLS/SSL, Action routines, user authentication, sessions, cookie management, request logging, and security sandboxing. The web server uses 80K of code and will run in 200K RAM (without TLS).</p> <p>The core web services include:</p> <ul> <li>HTTP/1.1 protocol engine</li> <li>TLS 1.3 support</li> <li>Non-blocking socket communications</li> <li>Multiple listen endpoints</li> <li>Flexible configuration via a web.json5 file</li> <li>Request routing with access control</li> <li>Binding URLs to C functions for dynamic content rendering</li> <li>Serve static files</li> <li>Configurable redirections</li> <li>Transfer encoding filter</li> <li>Session and cookie management</li> <li>Authentication and User management</li> <li>File upload</li> <li>JSON parser and query engine</li> <li>Sandbox limits and timeouts</li> <li>Paralelism via fiber coroutines</li> </ul> <p></p>","location":"ref/api/web/"},{"title":"Extensions","text":"Web Embedded web server.  WebUpload File upload structure.  <p></p>","location":"ref/api/web/#extensions"},{"title":"Functions","text":"voidwebAddAccessControlHeader(Web *web) Add an Access-Control-Allow-Origin response header for the request host name. voidwebAddAction(WebHost *host, cchar *url, WebProc fn, cchar *role) Add an action callback for a URL prefix. voidwebAddHeader(Web *web, cchar *key, cchar *value, ...) Add a header to the request response. WebHost*webAllocHost(Json *config) Allocate a new host object. boolwebAuthenticate(Web *web) Authenticate a user. ssizewebBufferUntil(Web *web, cchar *until, ssize limit) Read data and buffer until a given pattern or limit is reached. boolwebCan(Web *web, cchar *role) Test if a user possesses the required role. WebSession*webCreateSession(Web *web) Create a login session. char*webDate(char *buf, time_t when) Convert a time to a date string. char*webDecode(char *str) Decode a string using punycode. voidwebDestroySession(Web *web) Destroy the web session object. char*webEncode(cchar *uri) Encode a string using punycode. intwebError(Web *web, int status, cchar *body, ...) Respond to the request with an error. voidwebExtendTimeout(Web *web, Ticks timeout) Extend the request timeout. voidwebFinalize(Web *web) Finalize response output. voidwebFreeHost(WebHost *host) Free a host object. cchar*webGetConfig(cchar *key, cchar *defaultValue) Get a configuration value. boolwebGetConfigBool(cchar *key, cchar *defaultValue) Get a configuration value as a boolean. intwebGetConfigInt(cchar *key, int defaultValue) Get a configuration value as an integer. cchar*webGetDocs(WebHost *host) Get the web documents directory for a host. char*webGetHostName(Web *web) Get the host name of the endpoint serving the request. WebSession*webGetSession(Web *web, int create) Get the session state object for the current request. char*webGetSessionID(Web *web) Get the session ID. cchar*webGetSessionVar(Web *web, cchar *name, cchar *defaultValue) Get a session variable. cchar*webGetStatusMsg(int status) Get a status message corresponding to a HTTP status code. cchar*webGetVar(Web *web, cchar *name, cchar *defaultValue) Get a request variable value. intwebInit(void) Initialize the web module. boolwebIsAuthenticated(Web *web) Test if the user has been authenticated. voidwebLogin(Web *web, cchar *username, cchar *role) Login a user by creating session state. voidwebLogout(Web *web) Logout a user and remove the user login session. intwebNetError(Web *web, cchar *msg, ...) Close the current request and issue no response. char*webNormalizePath(cchar *path) Normalize a URL path. char*webParseCookie(Web *web, char *name) Parse a cookie header string and return a cookie value. intwebParseUrl(Web *web) Parse a URL into its components. ssizewebRead(Web *web, char *buf, ssize bufsize) Read request body data. ssizewebReadUntil(Web *web, cchar *until, char *buf, ssize bufsize) Read request body data until a given pattern is reached. voidwebRedirect(Web *web, int status, cchar *uri) Redirect the client to a new URL. voidwebRemoveSessionVar(Web *web, cchar *name) Remove a session variable. voidwebRemoveVar(Web *web, cchar *name) Remove a request variable value. intwebResponse(Web *web, int status, cchar *fmt, ...) Write a response. ssizewebSendFile(Web *web, int fd) Write a file response. voidwebSetContentLength(Web *web, ssize len) Set the content length for the response. voidwebSetHook(WebHost *host, WebHook hook) Define a request hook. cchar*webSetSessionVar(Web *web, cchar *name, cchar *fmt, ...) Set a session variable name value. voidwebSetStatus(Web *web, int status) Set the response HTTP status code. cchar*webSetVar(Web *web, cchar *name, cchar *value) Set a request variable value. intwebStartHost(WebHost *host) Start listening for requests on the host. voidwebStopHost(WebHost *host) Stop listening for requests on the host. voidwebTerm(void) Initialize the web module. boolwebValidatePath(cchar *uri) Validate a URL. ssizewebWrite(Web *web, cvoid *buf, ssize bufsize) Write response data. ssizewebWriteFmt(Web *web, cchar *fmt, ...) Write string response data. intwebWriteHeaders(Web *web) Write request response headers.  <p></p>","location":"ref/api/web/#functions"},{"title":"Typedefs","text":"WebActionAction function bound to a URL prefix. WebHookWebHook callback procedure. WebHostWeb host structure. WebProcWebAction callback procedure. WebRouteRouting object to match a request against a path prefix.  <p></p>","location":"ref/api/web/#typedefs"},{"title":"Defines","text":"#defineWEB_CHUNK_DATA\u00a0\u00a0\u00a02   Start of chunk data.  #defineWEB_CHUNK_START\u00a0\u00a0\u00a01   Start of a new chunk.","location":"ref/api/web/#defines"},{"title":"Web","text":"<p></p>  Web  <p>Embedded web server.</p> Description:The web server requires the use of fibers from the portable runtime. API Stability:Evolving. Fields:  uintauthChecked Authentication has been checked.  uintauthenticated User authenticated and roleId defined.  char *boundary Upload file boundary.  ssizeboundaryLen Length of the boundary.  uintchunked Receive transfer chunk encoding state.  uintclose Should the connection be closed after the request completes.  uintcomplete Is the request complete.  cchar *contentDisposition Receive content disposition header value.  cchar *contentType Receive content type header value.  cchar *cookie Request cookie string.  uintcreatingHeaders Are headers being created.  Ticksdeadline Timeout deadline for when the next I/O must complete.  char *error Error string for any request errors.  uintexists Does the requested resource exist.  cchar *ext Request URL extension.  uintformBody Is the current request a POSTed form.  WebHost *host Owning host object.  uinthttp10 Is the current request a HTTP/1.0 request.  uintjsonBody Is the current request a POSTed json request.  WebListen *listen Listening endpoint.  cchar *method Request method in upper case.  cchar *mime Request mime type based on the extension.  char *path Path portion of the request url.  cchar *protocol Request HTTP protocol.  Set to HTTP/1.0 or HTTP/1.1.  char *query Request URL query portion.  Json *qvars Parsed query variables.  char *redirect Response redirect location.  Used to set the Location header.  char *ref Request URL reference portion.  cchar *role Authorized role.  introleId Index into roles for the authorized role.  WebRoute *route Matching route for this request.  RBuf *rx Receive data buffer.  char *rxHeaderBuf Buffer containing the full request.  char *rxHeaders Request received headers.  ssizerxLen Receive content length.  OffsetrxRemaining Receive data remaining in the next chunk.  uintsecure Has secure listening endpoint.  struct WebSession *session Session state.  intsignature Index into signature definition for this request.  time_tsince Value of the if-modified-since value in seconds since epoch.  Ticksstarted Time when the request started.  uintstatus Request response HTTP status code.  RBuf *tx Write data buffer.  RHash *txHeaders Output headers.  ssizetxLen Transmit content length.  OffsettxRemaining Transmit data remaining to send.  WebUpload *upload Current uploading file.  cchar *uploadDir Directory to place uploaded files.  RHash *uploads Table of uploaded files for this request.  char *url Request url.  cchar *username Username.  Json *vars Parsed request variables.  uintwroteHeaders Have the response headers been written.     <p></p>       void     webAddAccessControlHeader (Web *web)     <p>Add an Access-Control-Allow-Origin response header for the request host name.</p> Parameters:  webWeb object.  API Stability:Evolving. See Also:    <p></p>       void     webAddAction (WebHost *host, cchar *url, WebProc fn, cchar *role)     <p>Add an action callback for a URL prefix.</p> Parameters:  hostHost object. urlURL prefix to associate with this action. fnFunction to invoke for requests matching this URL. roleAuthorized role when the action is invoked.  API Stability:Evolving. See Also:    <p></p>       void     webAddHeader (Web *web, cchar *key, cchar *value, ...)     <p>Add a header to the request response.</p> Parameters:  webWeb object. keyHTTP header name. valueFormat string for the header value. ...Format arguments.  API Stability:Evolving. See Also:    <p></p>   WebHost *     webAllocHost (Json *config)     <p>Allocate a new host object.</p> Parameters:  configJSON configuration for the host.  Returns:A host object. API Stability:Evolving. See Also:    <p></p>   bool     webAuthenticate (Web *web)     <p>Authenticate a user.</p> Description:The user is authenticated if required by the selected request route. Parameters:  webWeb request object.  Returns:True if the route does not require authentication or the user is authenticated successfully. API Stability:Evolving. See Also:    <p></p>   ssize     webBufferUntil (Web *web, cchar *until, ssize limit)     <p>Read data and buffer until a given pattern or limit is reached.</p> Description:This reads the data into the buffer, but does not return the data or consume it. Parameters:  webWeb object. untilPattern to read until. Set to NULL for no pattern. limitNumber of bytes of data to read. Set to.  Returns:The number of bytes read into the buffer. Return zero if no bytes read and negative for errors. API Stability:Evolving. See Also:    <p></p>   bool     webCan (Web *web, cchar *role)     <p>Test if a user possesses the required role.</p> Parameters:  webWeb request object. roleRequired role.  Returns:True if the user has the required role. API Stability:Evolving. See Also:    <p></p>       char *     webDate (char *buf, time_t when)     <p>Convert a time to a date string.</p> Parameters:  bufBuffer to hold the generated date string. whenTimestamp to convert.  Returns:A reference to the buffer. API Stability:Evolving. See Also:    <p></p>       char *     webDecode (char *str)     <p>Decode a string using punycode.</p> Description:The string is converted in-situ. Parameters:  strString to decode.  Returns:The original string reference. API Stability:Evolving. See Also:    <p></p>       char *     webEncode (cchar *uri)     <p>Encode a string using punycode.</p> Description:The string is converted in-situ. Parameters:  uriUri to encode.  Returns:An allocated, escaped URI. Caller must free. API Stability:Evolving. See Also:    <p></p>       int     webError (Web *web, int status, cchar *body, ...)     <p>Respond to the request with an error.</p> Description:This responds to the request with the given HTTP status and body data. Parameters:  webWeb object. statusHTTP response status code. bodyBody data to send as the response. This is a printf style string. ...Body response arguments.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>       void     webExtendTimeout (Web *web, Ticks timeout)     <p>Extend the request timeout.</p> Description:Request duration is bounded by the timeouts.request and timeouts.inactivity limits. You can extend the timeout for a long running request via this call. Parameters:  webWeb object. timeoutTimeout in milliseconds use for both the request and inactivity timeouts for this request.  API Stability:Evolving. See Also:    <p></p>       void     webFinalize (Web *web)     <p>Finalize response output.</p> Description:This routine will call webWrite(web, NULL, 0);. Parameters:  webWeb object.  API Stability:Evolving. See Also:    <p></p>       void     webFreeHost (WebHost *host)     <p>Free a host object.</p> Parameters:  hostHost object.  API Stability:Evolving. See Also:    <p></p>   cchar *     webGetConfig (cchar *key, cchar *defaultValue)     <p>Get a configuration value.</p> Parameters:  keyProperty key value. May use dot separated properties. defaultValueDefault value to return if the key is not found.  Returns:The configuration value or the defaultValue if not found. Caller must not free. API Stability:Evolving. See Also:    <p></p>   bool     webGetConfigBool (cchar *key, cchar *defaultValue)     <p>Get a configuration value as a boolean.</p> Parameters:  keyProperty key value. May use dot separated properties. defaultValueDefault value to return if the key is not found.  Returns:The configuration value or the defaultValue if not found. Caller must not free. API Stability:Evolving. See Also:    <p></p>       int     webGetConfigInt (cchar *key, int defaultValue)     <p>Get a configuration value as an integer.</p> Parameters:  keyProperty key value. May use dot separated properties. defaultValueDefault value to return if the key is not found.  Returns:The configuration value or the defaultValue if not found. Caller must not free. API Stability:Evolving. See Also:    <p></p>   cchar *     webGetDocs (WebHost *host)     <p>Get the web documents directory for a host.</p> Description:This is configured via the web.documents configuration property. Parameters:  hostHost object.  Returns:The web documents directory. API Stability:Evolving. See Also:    <p></p>       char *     webGetHostName (Web *web)     <p>Get the host name of the endpoint serving the request.</p> Description:This will return the WebHost name if defined, otherwise it will use the listening endpoint. If all else fails, it will use the socket IP address. Parameters:  webWeb object.  Returns:Allocated string containing the host name. Caller must free. API Stability:Evolving. See Also:    <p></p>   cchar *     webGetStatusMsg (int status)     <p>Get a status message corresponding to a HTTP status code.</p> Parameters:  statusHTTP status code.  Returns:A status message. Caller must not free. API Stability:Evolving. See Also:    <p></p>   cchar *     webGetVar (Web *web, cchar *name, cchar *defaultValue)     <p>Get a request variable value.</p> Parameters:  webWeb object. nameVariable name. defaultValueDefault value to return if the variable is not defined.  Returns:The value of the variable or the default value if not defined. API Stability:Evolving. See Also:    <p></p>       int     webInit (void )     <p>Initialize the web module.</p> Description:Must call before using Web. API Stability:Evolving. See Also:    <p></p>   bool     webIsAuthenticated (Web *web)     <p>Test if the user has been authenticated.</p> Parameters:  webWeb request object.  Returns:True if the user has been authenticated. API Stability:Evolving. See Also:    <p></p>       void     webLogin (Web *web, cchar *username, cchar *role)     <p>Login a user by creating session state.</p> Assumes the caller has already authenticated and authorized the user     Parameters:  webWeb request object. usernameUser name. roleRequested role.  API Stability:Evolving. See Also:    <p></p>       void     webLogout (Web *web)     <p>Logout a user and remove the user login session.</p> Parameters:  webWeb request object.  API Stability:Evolving. See Also:    <p></p>       int     webNetError (Web *web, cchar *msg, ...)     <p>Close the current request and issue no response.</p> Description:This closes the request connection and issues no response. It should be used when a request is received that indicates the connection is compromised. Parameters:  webWeb object. msgMessage to the error log. This is a printf style string. ...Message response arguments.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>       char *     webNormalizePath (cchar *path)     <p>Normalize a URL path.</p> Description:Normalize a path to remove \"./\", \"../\" and redundant separators. This does not make an absolute path and does not map separators or change case. This validates the path and expects it to begin with \"/\". Parameters:  pathPath string to normalize.  Returns:An allocated path. Caller must free. API Stability:Evolving. See Also:    <p></p>       char *     webParseCookie (Web *web, char *name)     <p>Parse a cookie header string and return a cookie value.</p> Parameters:  webWeb object. nameCookie name to extract.  Returns:The cookie value or NULL if not defined. API Stability:Evolving. See Also:    <p></p>       int     webParseUrl (Web *web)     <p>Parse a URL into its components.</p> Description:The parsed components are defined in the Web object including the path, extension (ext),. Parameters:  webWeb object.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>   ssize     webRead (Web *web, char *buf, ssize bufsize)     <p>Read request body data.</p> Description:This routine will read the body data and return the number of bytes read. This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  webWeb object. bufData buffer to read into. bufsizeSize of the buffer.  Returns:The number of bytes read. Return &lt; 0 for errors and 0 when all the body data has been read. API Stability:Evolving. See Also:    <p></p>   ssize     webReadUntil (Web *web, cchar *until, char *buf, ssize bufsize)     <p>Read request body data until a given pattern is reached.</p> Description:This routine will read the body data and return the number of bytes read. This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  webWeb object. untilPattern to read until. Set to NULL for no pattern. bufData buffer to read into. bufsizeSize of the buffer.  Returns:The number of bytes read. Return &lt; 0 for errors and 0 when all the body data has been read. API Stability:Internal. See Also:    <p></p>       void     webRedirect (Web *web, int status, cchar *uri)     <p>Redirect the client to a new URL.</p> Must only be called from a fiber. Parameters:  webWeb object. statusHTTP status code. Must set to 301 or 302. uriURL to redirect the client toward.  API Stability:Evolving. See Also:    <p></p>       void     webRemoveVar (Web *web, cchar *name)     <p>Remove a request variable value.</p> Parameters:  webWeb object. nameVariable name.  API Stability:Evolving. See Also:    <p></p>       int     webResponse (Web *web, int status, cchar *fmt, ...)     <p>Write a response.</p> Description:This routine writes a single plain text response in one API. It will block the current fiber if necessary. Other fibers continue to run. This will set the Content-Type header to text/plain. Must only be called from a fiber. Parameters:  webWeb object. statusHTTP status code. fmtPrintf style message string. ...Format arguments.  Returns:The number of bytes written. API Stability:Evolving. See Also:    <p></p>   ssize     webSendFile (Web *web, int fd)     <p>Write a file response.</p> Description:This routine will read the contents of the open file descriptor and send as a response. This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  webWeb object. fdFile descriptor for an open file or pipe.  Returns:The number of bytes written. API Stability:Evolving. See Also:    <p></p>       void     webSetContentLength (Web *web, ssize len)     <p>Set the content length for the response.</p> Parameters:  webWeb object. lenContent length.  API Stability:Evolving. See Also:    <p></p>       void     webSetHook (WebHost *host, WebHook hook)     <p>Define a request hook.</p> Description:The request hook will be invoked for important request events during the lifecycle of processing the request. Parameters:  hostWebHost object. hookCallback hook function.  API Stability:Evolving. See Also:    <p></p>       void     webSetStatus (Web *web, int status)     <p>Set the response HTTP status code.</p> Parameters:  webWeb object. statusHTTP status code.  API Stability:Evolving. See Also:    <p></p>   cchar *     webSetVar (Web *web, cchar *name, cchar *value)     <p>Set a request variable value.</p> Parameters:  webWeb object. nameVariable name. valueValue to set.  Returns:The value defined in the environment. Caller must NOT free the result. API Stability:Evolving. See Also:    <p></p>       int     webStartHost (WebHost *host)     <p>Start listening for requests on the host.</p> Must only be called from a fiber. Parameters:  hostHost object.  Returns:Zero if successful. API Stability:Evolving. See Also:    <p></p>       void     webStopHost (WebHost *host)     <p>Stop listening for requests on the host.</p> Must only be called from a fiber. Parameters:  hostHost object.  API Stability:Evolving. See Also:    <p></p>       void     webTerm (void )     <p>Initialize the web module.</p> API Stability:Evolving. See Also:    <p></p>   bool     webValidatePath (cchar *uri)     <p>Validate a URL.</p> Description:Check a url for invalid characters. Parameters:  uriUrl path.  Returns:True if the url contains only valid characters. API Stability:Evolving. See Also:    <p></p>   ssize     webWrite (Web *web, cvoid *buf, ssize bufsize)     <p>Write response data.</p> Description:This routine will block the current fiber if necessary. Other fibers continue to run. Writing a null buffer or zero bufsize indicates there is no more output. The webFinalize API is a convenience call for this purpose. Must only be called from a fiber. Parameters:  webWeb object. bufBuffer of data to write. bufsizeSize of the buffer to write.  Returns:The number of bytes written. API Stability:Evolving. See Also:    <p></p>   ssize     webWriteFmt (Web *web, cchar *fmt, ...)     <p>Write string response data.</p> Description:This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  webWeb object. fmtPrintf style message string. ...Format arguments.  Returns:The number of bytes written. API Stability:Evolving. See Also:    <p></p>       int     webWriteHeaders (Web *web)     <p>Write request response headers.</p> Description:This will write the HTTP response headers. This writes the supplied headers and any required headers if not supplied. This routine will block the current fiber if necessary. Other fibers continue to run. Must only be called from a fiber. Parameters:  webWeb object.  Returns:The number of bytes written. API Stability:Evolving. See Also:","location":"ref/api/web/#web"},{"title":"WebUpload","text":"<p></p>  WebUpload  <p>File upload structure.</p> See Also:  Fields:  char *clientFilename Client side name of the file.  char *contentType Content type.  intfd File descriptor used while writing the upload content.  char *filename Local (temp) name of the file.  char *name Symbolic name for the upload supplied by the client.  ssizesize Uploaded file size.","location":"ref/api/web/#webupload"},{"title":"Functions","text":"<p></p>   WebSession *     webCreateSession (Web *web)     <p>Create a login session.</p> Parameters:  webWeb request object.  Returns:Allocated session object. API Stability:Evolving.   <p></p>       void     webDestroySession (Web *web)     <p>Destroy the web session object.</p> Description:Useful to be called as part of the user logout process. Parameters:  webWeb request object.  API Stability:Prototype.   <p></p>   WebSession *     webGetSession (Web *web, int create)     <p>Get the session state object for the current request.</p> Parameters:  webWeb request object. createSet to true to create a new session if one does not already exist.  Returns:Session object. API Stability:Evolving.   <p></p>       char *     webGetSessionID (Web *web)     <p>Get the session ID.</p> Parameters:  webWeb request object.  Returns:The session ID if session state storage is defined for this request. Caller must free. API Stability:Evolving.   <p></p>   cchar *     webGetSessionVar (Web *web, cchar *name, cchar *defaultValue)     <p>Get a session variable.</p> Parameters:  webWeb request object. nameSession variable name. defaultValueDefault value to return if the variable does not exist.  Returns:Session variable value or default value if it does not exist. API Stability:Evolving.   <p></p>       void     webRemoveSessionVar (Web *web, cchar *name)     <p>Remove a session variable.</p> Parameters:  webWeb request object. nameSession variable name.  API Stability:Evolving.   <p></p>   cchar *     webSetSessionVar (Web *web, cchar *name, cchar *fmt, ...)     <p>Set a session variable name value.</p> Parameters:  webWeb request object. nameSession variable name. fmtFormat string for the value. ...Format args.  Returns:The value set for the variable. Caller must not free. API Stability:Evolving.","location":"ref/api/web/#functions_1"},{"title":"Typedefs","text":"<p></p>       typedef void(* WebHook) (struct Web *web, int event).     <p>WebHook callback procedure.</p> Parameters:  webWeb object. eventID of the event.  API Stability:Evolving. See Also:    <p></p>       typedef void(* WebProc) (struct Web *web).     <p>WebAction callback procedure.</p> Parameters:  webWeb object.  API Stability:Evolving. See Also:    <p></p>  WebAction  <p>Action function bound to a URL prefix.</p> API Stability:Evolving. Fields:  WebProcfn Function to invoke.  char *match Path prefix.  char *role Role to invoke action.     <p></p>  WebHost  <p>Web host structure.</p> Description:The web host defines a web server and its configuration. Multiple web hosts can be created. Fields:  RList *actions Ordered list of configured actions.  Json *config Web server configuration for this host.  ssizeconnections Number of active connections.  boolfreeConfig Config is allocated and must be freed.  intheaders Base ID for headers in config.  WebHookhook Web notification hook.  intinactivityTimeout Timeout for inactivity on a connection.  cchar *index Index file to use for directory requests.  RList *listeners Listening endpoints for this host.  int64maxBody Max size of POST request.  int64maxConnections Max number of connections.  int64maxHeader Max header size.  int64maxSessions Max number of sessions.  int64maxUpload Max size of file upload.  RHash *mimeTypes Mime types indexed by extension.  cchar *name Host name to use in canonical redirects.  intparseTimeout Timeout while parsing a request.  boolremoveUploads Remove uploads when request completes (default).  intrequestTimeout Total request timeout.  introles Base ID of roles in config.  RList *routes Ordered list of configured routes.  cchar *sameSite Cookie same site property.  REventsessionEvent Session timer event.  RHash *sessions Client session state.  intsessionTimeout Inactivity timeout for session state.  cchar *uploadDir Directory to receive uploaded files.  RHash *users Hash table of users.  RList *webs Active web requests for this host.     <p></p>  WebRoute  <p>Routing object to match a request against a path prefix.</p> API Stability:Evolving. Fields:  boolexact Exact match vs prefix match.  If trailing \"/\" in route.  char *match Path prefix.  cchar *redirect Redirection if not authorized.  cchar *role Required user role.","location":"ref/api/web/#typedefs_1"},{"title":"Buf - Dynamic Buffer Module","text":"<p>The RBuf module is a flexible, dynamic growable buffer structure that is ideal as a network and file buffer.</p> <p>RBuf has start and end pointers to the data buffer which act as read/write pointers. Routines are provided to get and put data into and out of the buffer and automatically advance the appropriate start/end pointer. By definition, the buffer is empty when the start pointer == the end pointer.</p> <p>Buffers can be created with a fixed size or can grow dynamically as more data is added to the buffer.</p> <p>For performance, the specification of RBuf is deliberately exposed. All members of RBuf are implicitly public. However, it is still recommended that wherever possible, you use the accessor routines provided.</p>","location":"runtime/buf/"},{"title":"Features","text":"<ul> <li>Dynamically growable memory buffer</li> <li>Routines to get references to start and end pointers</li> <li>Option to null terminate the buffer</li> <li>Formatted add to buffer</li> </ul>","location":"runtime/buf/#features"},{"title":"RBuf","text":"<p>The RBuf definition is:</p> <pre><code>typedef struct RBuf {\n    char *buf;      /**&lt; Actual buffer for data */\n    char *endbuf;   /**&lt; Pointer one past the end of buffer */\n    char *start;    /**&lt; Pointer to next data char */\n    char *end;      /**&lt; Pointer one past the last data character */\n    ssize buflen;   /**&lt; Current size of buffer */\n} RBuf;\n</code></pre>","location":"runtime/buf/#rbuf"},{"title":"API Quick Tour","text":"<p>To create a buffer with an initial size. Set the size to zero for a default size of 4K.</p> <pre><code>#include \"r.h\"\n\nRBuf *buf = rAllocBuf(initialSize);\n\n// and to free the buffer\n\nrFreeBuf(buf);\n</code></pre> <p>To add data to the buffer. It will automatically grow as required. <pre><code>rPutStringToBuf(buf, \"Hello World\");\nrPutFmtToBuf(buf, \"My favorite number is %d\", 42);\nrPutBlockToBuf(buf, data, dataLen);\n</code></pre></p> <p>To get the buffer length</p> <pre><code>ssize length = rGetBufLength(buf);\n</code></pre> <p>Note: ssize is a typedef from \"osdep.h\" for ssize_t which is a 64-bit signed quantity.</p> <p>To add a NULL character to the buffer without moving the end pointer. i.e.</p> <pre><code>rAddNullToBuf(buf, data, dataLen);\n</code></pre> <p>To explicitly grow the buffer:</p> <pre><code>rGrowBuf(buf, 8000);\n</code></pre> <p>To see how much space is available in the buffer. This is (endbuf - end).</p> <pre><code>ssize available = rGetBufSpace(buf);\n</code></pre> <p>To get a reference to the end of the buffer:</p> <pre><code>cchar *ptr = rGetBufEnd(buf);\n\n//  and to the start\nptr = rGetBufStart(buf);\n</code></pre> <p>To adjust the start or the end:</p> <pre><code>rAdjustBufEnd(buf, amount);\nrAdjustBufStart(buf, amount);\n</code></pre> <p>To copy data out of the buffer, reference the start pointer and adjust:</p> <pre><code>ssize count = rGetBufLength(buf);\nmemcpy(rGetBufStart(buf), count);\nrAdjustBufEnd(buf, count);\n</code></pre> <p>To empty the buffer:</p> <pre><code>rFlushBuf(buf);\n</code></pre>","location":"runtime/buf/#api-quick-tour"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>Buf API</p>","location":"runtime/buf/#api-reference"},{"title":"Event","text":"<p>R provides a simple eventing mechanism to schedule events to run at some time in the future.</p> <p>Events are described by REvent objects which are created and queued via #rCreateEvent. Events are scheduled once unless restarted via rRestartEvent.</p>","location":"runtime/event/"},{"title":"API Tour","text":"<p>To create an event to run a function at some delay in the future.</p> <pre><code>Ticks delay = 1000;\nREvent event = rCreateEvent(fn, data, delay);\n</code></pre> <p>This will run the fn() function in 1 second and pass the reference data as an argument.</p> <pre><code>void fn(void *data) {\n    //  Do something\n}\n</code></pre> <p>The rCreateEvent API will return an event ID that can be used to cancel the event before it is run by calling rStopEvent.</p> <pre><code>rStopEvent(event);\n</code></pre> <p>You can lookup an event to see if it is scheduled:</p> <pre><code>if (rLookupEvent(event)) {\n    //  scheduled\n}\n</code></pre>","location":"runtime/event/#api-tour"},{"title":"Running Events","text":"<p>The Ioto main program calls the rServiceEvents() API to run scheduled events as they come due.</p> <p>This call will call rRunEvents() to run due events and then wait via rWait for any pending I/O.</p> <p>If you replace the Ioto main program, you must call rServiceEvents in your main.</p>","location":"runtime/event/#running-events"},{"title":"Watching for Conditions","text":"<p>You can watch for certain conditions to happen and be notified when they do. For example, it can be useful to be notified when the network connects or disconnects to the cloud.</p> <p>To watch for a condition:</p> <pre><code>rWatch(\"mqtt:connect\", fn, data);\n</code></pre> <p>To then signal a condition, call:</p> <pre><code>rSignal(\"mqtt:connect\", arg);\n</code></pre> <p>This will invoke fn() with the watch data and the signal argument.</p> <pre><code>void fn(void *data, void *arg) {\n    //  Do something\n}\n</code></pre> <p>To disable watching, call:</p> <pre><code>rWatchOff(\"mqtt:connect\", fn, data);\n</code></pre> <p>This will disable the watch registered with exactly the same arguments.</p>","location":"runtime/event/#watching-for-conditions"},{"title":"File","text":"<p>Ioto provides some simple helper functions to read and write files.</p> <p>To read a file in one go:</p> <pre><code>ssize   size;\n\nchar *data = rReadFile(\"file.txt\", &amp;size);\n</code></pre> <p>To write a file:</p> <p>ssize length = rWriteFile(\"file.txt\", data, dataLen, 0644); <pre><code>\n</code></pre></p> <p>To get the current working directory:</p> <pre><code>char dir = rGetCwd();\n</code></pre> <p>To get the base directory containing the application executable:</p> <pre><code>char dir = rGetAppDir();\n</code></pre> <p>To join two file paths:</p> <pre><code>PUBLIC char *rJoinFile(cchar *base, cchar *other);\n</code></pre> <p>To matach a file against a glob pattern. This tests a filename against a file pattern that list may contain the wildcards: \"?\" Matches any single character, \"\" matches zero or more characters of the file or directory and \"*\"/ matches zero or more directories</p> <pre><code>if (rMatchFile(\"file.text\", \"*.txt\")) {\n    //  Matches\n}\n</code></pre> <p>To get a list of files in a directory or subdirectories that match the given wildcard pattern.</p> <pre><code>RList *list = rGetFiles(\"/somedir\", \"*.txt\", 0);\n</code></pre> <p>To walk a directory tree and invoke a callback for each path that matches a given pattern.</p> <pre><code>rWalkDir(\"/dir\", \"*.txt\", fn, arg, 0);\n</code></pre> <p>To get a temporary filename:</p> <pre><code>char *path = rGetTempFile(\"/tmp\", \"TEMP-\");\n</code></pre> <p>This returns a temporary filename in /tmp starting with the \"TEMP-\" prefix.</p>","location":"runtime/file/"},{"title":"Growable hash table","text":"<p>Simple hash table that can store arbitrary objects associated with string names.</p>","location":"runtime/hash/"},{"title":"API Quick Tour","text":"<p>To create a hash table:</p> <pre><code>RHash *table = rAllocHash(size, 0);\n</code></pre> <p>To free the table:</p> <pre><code>rFreeHash(table);\n</code></pre> <p>To add a name and value to the hash:</p> <pre><code>RName *name = rAddName(table, \"some-name\", value, flags);\n</code></pre> <p>To lookup a name, use:</p> <pre><code>void *value = rLookupName(hash, \"some-name\");\n</code></pre> <p>To remove a name, use: <pre><code>rRemoveName(table, \"some-name\");\n</code></pre></p> <p>To iterate over hashed names:</p> <pre><code>RName *item;\nfor (ITERATE_NAMES(table, item)) {\n    printf(\"Item %s has value %s\", item-&gt;name, item-&gt;value);\n}\n</code></pre>","location":"runtime/hash/#api-quick-tour"},{"title":"List","text":"<p>The RList module is a simple growable list suitable for storing simple primitive data values or pointers to arbitrary objects.</p>","location":"runtime/list/"},{"title":"API Tour","text":"<p>To create a list:</p> <pre><code>#include \"r.h\"\n\nRList *list = rAllocList(initialSize, flags);\n</code></pre> <p>Lists can be created so that when the list is freed, each of the list items will also be freed. If the <code>flags</code> are set to R_DYNAMIC_VALUE, then rFree() will be called on each list item when the list is freed. If the flags are set to R_STATIC_VALUE (the default), then list items will not be freed.</p> <p>To free a list:</p> <pre><code>rFreeList(list);\n</code></pre> <p>To add an item to the end of the list:</p> <pre><code>rAddItem(list, myObject);\n</code></pre> <p>To clear the list:</p> <pre><code>rClearList(list);\n</code></pre> <p>To get the number of items in the list:</p> <pre><code>ssize length = rGetListLength(list);\n</code></pre> <p>To iterate over items in a list:</p> <pre><code>void *item;\nint index;\nfor (ITERATE_ITEMS(list, item, index)) {\n    //  Process item\n}\n</code></pre> <p>ITERATE_ITEMS is defined as:</p> <pre><code>#define ITERATE_ITEMS(list, item, index) \\\n    index = 0; \\\n    list &amp;&amp; index &lt; list-&gt;length &amp;&amp; ((item = list-&gt;items[index]) || 1); \\\n    index++\n</code></pre> <p>To get an item from the list at a specific index position:</p> <pre><code>int index = 4;\nrGetItem(list, index);\n</code></pre> <p>To insert an item at a specific position. This will insert myObject at index 4.</p> <pre><code>rInserItemAt(list, 4, myObject);\n</code></pre> <p>To remove an item:</p> <pre><code>rRemoveItem(list, myObject);\n\n//  or remove at an Index\nrRemoveItemAt(list, 4);\n</code></pre> <p>To grow a list:</p> <pre><code>rGrowList(list, 1000);\n</code></pre> <p>To push and pop items:</p> <pre><code>rPushItem(list, item);\nitem = rPopItem(list);\n</code></pre>","location":"runtime/list/#api-tour"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>List API</p>","location":"runtime/list/#api-reference"},{"title":"Logging Trace","text":"<p>The Ioto agent creates a log file using the runtime logging module.</p> <p>The purpose of the error log is to record essential configuration and error conditions. Per-request log typically is sent to a separate log.</p> <p>The default log file captures log messages issued throughout the various Ioto modules and writes them to the default log file. Log typically is enabled in both debug and release builds and may be controlled via the build compile define ME_R_LOGGING which is typically set to true.</p> <p>Log messages should be a single text line to facilitate machine processing of log files.</p>","location":"runtime/log/"},{"title":"API Tour","text":"<p>To write an informational log message to the error log file.</p> <pre><code>rlog(\"info\", \"my-module\", \"Log message: %s\", \"Hello World\");\n</code></pre> <p>The Ioto runtime defines four convenience routines for logging:</p> <pre><code>rdebug(\"my-module\", \"Status code at %d is %d\", __LINE__, status);\nrerror(\"my-module\", \"Bad error: %d\", code);\nrfatal(\"my-module\", \"Insufficient resources, cannot continue\");\nrinfo(\"my-module\", \"Connected to server\");\nrtrace(\"my-module\", \"Active user count %d\", count);\n</code></pre> <p>The convenience routines wrap rlog() and supply the first argument which is the message type. You can create custom types just by using them with rlog(). These standard types are provided: debug, error, fatal, info and trace.</p> <p>The debug type is for trace trace that should only be emitted in debug builds. The fatal type will cause Ioto to immediately exit. Trace is for more verbose messages that are not emitted by default in production builds but can be enabled at runtime.</p>","location":"runtime/log/#api-tour"},{"title":"Changing Levels","text":"<p>To change which messages are emitted by Ioto, you can define the log filters via the Ioto command line and via the rSetLog API.</p> <p>To change the default Ioto log trace settings, customize the config.json trace property:</p> <pre><code>trace: {\n    path: '/var/log/ioto.log',\n    format: '%D %H %A[%P] %T %S %M',\n    types: 'error,info',\n    sources: 'all',\n}\n</code></pre> <p>See the Trace Configuration for details.</p> <p>You can also change trace levels via the command line. This will override the config.json trace settings. See the Ioto Trace Command Line for information.</p> <p>Via the API, you can override log settings: <pre><code>rSetLog(\"/tmp/newlog.out:all:all\", \"%D %H %A[%P] %T %S %M\", 1);\n</code></pre></p> <p>This will direct log output to newlog.out for all types and all sources.</p>","location":"runtime/log/#changing-levels"},{"title":"Log Handlers","text":"<p>You can also override Ioto's log handling and define your own log handler routine that will be invoked to process log messages.</p> <pre><code>rSetLogHandler(myLogHandler);\n</code></pre> <p>This routine will be invoked for all log messages with the type, source and message parameters.</p>","location":"runtime/log/#log-handlers"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>Log API</p>","location":"runtime/log/#api-reference"},{"title":"Ioto Safe Runtime (R)","text":"<p>Ioto is built upon a safe portable runtime (R). This layer insulates the rest of Ioto from the underlying platform and allows it to be highly portable to new operating systems or hardware.</p> <p></p> <p>The safe runtime provides a suite of services that facilitate the creation of high performance, non-blocking management applications by providing: fiber coroutines, lists, hashing, safe strings, buffering, timers, events, networking, buffer management and JSON parsing.</p> <p>The safe runtime provides a more secure environment in which to program as it replaces 'C' APIs that are prone to buffer overflows and other similar security exploits. The safe runtime includes a fast, safe string library that supports a secure programming style.</p>","location":"runtime/overview/"},{"title":"Ioto Types","text":"<p>The Ioto Agent uses an operating system dependent layer called \"osdep\".</p> <p>By including \"osdep.h\", you gain access to these cross-platform types. Some types are implemented natively on some platforms and others are provided by \"osdep\".</p>","location":"runtime/overview/#ioto-types"},{"title":"Quick Tour","text":"<p>Here are some primitive data types:</p> <pre><code>bool   b;\nint8   i8;\nint16  i16;\nint32  i32;\nint64  i64;\nuint8  u8;\nuint16 u16;\nuint32 u32;\nuint64 u64;\nschar  c;      //  Signed char\nuchar  c;      //  Unsigned char\ncchar  c;      //  Const char\ncuchar  c;     //  Const unsigned char\n</code></pre> <p>Other useful types:</p> <pre><code>ssize   length;     //  64-bit signed length\nTime    time;       //  Time in milliseconds since Jan 1, 1970\nTicks   ticks;      //  Elapsed time in system millisecond ticks (never goes backwards)\n</code></pre> <p>For a full list of the osdep types, see: OSDEP API</p>","location":"runtime/overview/#quick-tour"},{"title":"Return Values","text":"<p>Many Ioto APIs return an integer value that is zero for success and otherwise set to a negative error code.</p> <p>Here are the return codes used by the Ioto runtime:</p> <pre><code>#define R_ERR_OK              0\n#define R_ERR_BASE            -1\n#define R_ERR                 -2\n#define R_ERR_ABORTED         -3\n#define R_ERR_ALREADY_EXISTS  -4\n#define R_ERR_BAD_ACK         -5\n#define R_ERR_BAD_ARGS        -6\n#define R_ERR_BAD_DATA        -7\n#define R_ERR_BAD_FORMAT      -8\n#define R_ERR_BAD_HANDLE      -9\n#define R_ERR_BAD_NULL        -10\n#define R_ERR_BAD_REQUEST     -11\n#define R_ERR_BAD_RESPONSE    -12\n#define R_ERR_BAD_SESSION     -13\n#define R_ERR_BAD_STATE       -14\n#define R_ERR_BAD_SYNTAX      -15\n#define R_ERR_BAD_TYPE        -16\n#define R_ERR_BAD_VALUE       -17\n#define R_ERR_BUSY            -18\n#define R_ERR_CANT_ACCESS     -19\n#define R_ERR_CANT_ALLOCATE   -20\n#define R_ERR_CANT_COMPLETE   -21\n#define R_ERR_CANT_CONNECT    -22\n#define R_ERR_CANT_CREATE     -23\n#define R_ERR_CANT_DELETE     -24\n#define R_ERR_CANT_FIND       -25\n#define R_ERR_CANT_INITIALIZE -26\n#define R_ERR_CANT_LOAD       -27\n#define R_ERR_CANT_OPEN       -28\n#define R_ERR_CANT_READ       -29\n#define R_ERR_CANT_WRITE      -30\n#define R_ERR_DELETED         -31\n#define R_ERR_MEMORY          -32\n#define R_ERR_NETWORK         -33\n#define R_ERR_NOT_CONNECTED   -34\n#define R_ERR_NOT_INITIALIZED -35\n#define R_ERR_NOT_READY       -36\n#define R_ERR_READ_ONLY       -37\n#define R_ERR_TIMEOUT         -38\n#define R_ERR_TOO_MANY        -39\n#define R_ERR_WONT_FIT        -40\n#define R_ERR_WOULD_BLOCK     -41\n#define R_ERR_MAX             -42\n</code></pre>","location":"runtime/overview/#return-values"},{"title":"NULL Tolerance","text":"<p>Ioto adopts a technique call NULL tolerance where APIs, wherever possible, tolerate NULL arguments and attempt to do something reasonable with their arguments, rather than crashing the applications.</p> <p>The standard C library is not NULL tolerant. If you pass a NULL pointer to routines such as as free() or strlen() your program will crash.</p> <p>The Ioto memory allocator is NULL tolerant when calling rFree. Similarly, Ioto provides a safe string library that will accept NULL arguments wherever possible. In the case of strlen, Ioto provides slen() which will return zero if passed a NULL pointer.</p>","location":"runtime/overview/#null-tolerance"},{"title":"Sockets","text":"<p>The Ioto agent provides a cross platform Socket abstraction to make network programming easier and simpler.</p> <p>The Socket API is fiber aware in that blocking API calls will transparently resume other waiting fibers while waiting for I/O. This enables a simple, straight-line procedural programming style without ugly callbacks or complex threads. See Fiber Coroutines for more details.</p> <p>All the socket APIs must be called from a fiber.</p>","location":"runtime/socket/"},{"title":"API Tour","text":"<p>First you need a socket object. To allocate a socket object:</p> <pre><code>RSocket *sock = rAllocSocket();\n\n//  and to free\n\nrFreeSocket(sock);\n</code></pre>","location":"runtime/socket/#api-tour"},{"title":"Connecting","text":"<p>To connect to a host or IP address:</p> <pre><code>int status = rConnectSocket(sock, \"www.example.com\", 80, 0);\nif (status &lt; 0) {\n    //  error connecting\n}\n</code></pre>","location":"runtime/socket/#connecting"},{"title":"Listening for Connections","text":"<p>To listen for connections:</p> <pre><code>rListenSocket(sock, NULL, 80, connectionHandler, data);\n</code></pre> <p>The second argument is the IP address(s) on which to bind. If NULL, the socket listens on all interfaces.</p>","location":"runtime/socket/#listening-for-connections"},{"title":"Testing the Socket","text":"<p>To test if the socket is closed:</p> <pre><code>if (rIsSocketClosed(sock)) {\n    //  Socket is closed\n}\n</code></pre> <p>To test for end-of-file. i.e. if the peer has closed the other end of the socket:</p> <pre><code>if (rIsSocketEof(sock)) {\n    //  No more data\n}\n</code></pre> <p>To determine if a socket is using TLS. i.e. is secure:</p> <pre><code>if (rIsSocketSecure(sock)) {\n    //  Connection is using TLS\n}\n</code></pre>","location":"runtime/socket/#testing-the-socket"},{"title":"Closing the Socket","text":"<p>To close a socket:</p> <pre><code>rCloseSocket(sock);\n\n//  Still need to free the socket resources\nrFreeSocket(sock);\n</code></pre>","location":"runtime/socket/#closing-the-socket"},{"title":"Reading Data","text":"<p>To read from a socket. The read call will return with whatever bytes are available. If none is available, this call will block and yield the current fiber and resume another fiber. When data is available, the call will resume.</p> <pre><code>ssize count = rReadSocket(sock, buf, sizeof(buf), deadline);\n\nThe last argument to rReadSocket (and some other Socket APIs) is a deadline. This is time at which the read request should be aborted. Note: this is not a timeout value, but rather a time value.\n\nUse the following to get a deadline of 30 seconds.\n\n```c\nTime deadline = rGetTime() + (30 * 1000);\n</code></pre> <p>Set the deadline to zero to use the Ioto default deadline timeout which is infinite.</p>","location":"runtime/socket/#reading-data"},{"title":"Writing Data","text":"<p>To write to a socket:</p> <p>To write a block of data to a socket, use rWriteSocket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. If no data can be written, this call will yield the current fiber and resume another fiber. When data is available, the call will resume.</p> <pre><code>ssize count = rWriteSocket(sock, buf, bufSize, deadline);\n</code></pre>","location":"runtime/socket/#writing-data"},{"title":"Using TLS","text":"<p>To configure the socket TLS certificates, use rSetSocketCerts:</p> <pre><code>rSetSocketCerts(socket, privateKey, certificate, authority, revoke);\n</code></pre> <p>To select the preferred ciphers:</p> <pre><code>rSetSocketCiphers(sock, cipherList);\n</code></pre> <p>To control how the Socket will verify peers:</p> <pre><code>rSetSocketVerify(sock, verifyPeer, verifyIssuer);\n</code></pre>","location":"runtime/socket/#using-tls"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>Socket API</p>","location":"runtime/socket/#api-reference"},{"title":"String","text":"<p>The Ioto runtime provides a suite of \"safe\" string handling routines.</p> <p>These help guard against buffer overflows and NULL dereferencing errors.</p> <p>The strings are all NULL tolerant and will not crash when passed NULL arguments. For example, copying a NULL string will return an empty string and searching for a pattern in a NULL string will return false.</p> <p>The string routines all use a \"s\" prefix.</p>","location":"runtime/string/"},{"title":"API Tour","text":"<p>There are many (many) runtime string routines. Here is a short sampling:</p> <p>Search for a character in a string (strchr):</p> <pre><code>char *ptr = schr(str, '\\n');\n</code></pre> <p>Clone (duplicate) a string (strdup):</p> <pre><code>char *ptr = sclone(str);\n</code></pre> <p>Get the length of a string (strlen):</p> <pre><code>ssize length = slen(str);\n</code></pre> <p>Check if a string contains a pattern (strstr):</p> <pre><code>char *ptr = scontains(str, \"abc\");\n</code></pre> <p>Format a string (sprintf):</p> <pre><code>char *str = sfmt(\"Hello %s\", \"world\");\n</code></pre> <p>Join two strings</p> <pre><code>char *result = sjoin(\"one\", \"two\", NULL);\n</code></pre> <p>Get a title case string (Leading cap):</p> <pre><code>char *str = stitle(\"pool\")\n</code></pre> <p>Trim a string of certain characters:</p> <pre><code>char *trimed = strim(str, \" \\t\\n\\r\", R_TRIM_BOTH);\n</code></pre>","location":"runtime/string/#api-tour"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>String API</p>","location":"runtime/string/#api-reference"},{"title":"Thread","text":"<p>Ioto is single threaded and uses fiber coroutines for parallelism. Ioto is not thread safe and you cannot call Ioto APIs from program threads without ensuring all access to Ioto data structures are serialized via thread locks.</p> <p>Ioto provides a cross platform thread library so you can create threads and implement appropriate locks.</p> <p>NOTE: this is not a recommended design pattern. It is simpler, faster and more reliable to use fiber coroutines that to use threaded programming.</p>","location":"runtime/thread/"},{"title":"API Tour","text":"","location":"runtime/thread/#api-tour"},{"title":"Locking","text":"<p>To create a lock:</p> <pre><code>RLock *lock = rAllocLock();\n</code></pre> <p>and to free a lock</p> <pre><code>rFreeLock(lock);\n</code></pre> <p>To assert a lock, use rLock. This will block the current thread until resumed.</p> <p>NOTE: do not use this call in a fiber.</p> <pre><code>rlock(lock);\n</code></pre> <p>To unlock:</p> <pre><code>runlock(lock);\n</code></pre> <p>To try for a lock without waiting or blocking:</p> <pre><code>if (rTryLock(lock)) {\n    //  Got the lock\n}\n</code></pre>","location":"runtime/thread/#locking"},{"title":"Spin Locks","text":"<p>Ioto also provides spin locks which may be faster on some operating systems:</p> <pre><code>rSpinLock(lock)\nrSpinUnlock(lock)\n</code></pre>","location":"runtime/thread/#spin-locks"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>Buf API</p>","location":"runtime/thread/#api-reference"},{"title":"Time","text":"<p>Ioto provides a suite of time management routines to help format, parse and manage time values.</p> <p>Ioto stores calendar time in Time values that store the date/time as elapsed milliseconds since Jan 1, 1970. Time values may go backwards if the system date clock is adjusted.</p> <p>Ioto stores system time in Ticks values that are a system representation of elapsed time in milliseconds. Ticks will never go backwards even if the system date clock is adjusted.</p>","location":"runtime/time/"},{"title":"API Tour","text":"<p>To get the current time:</p> <pre><code>Time time = rGetTime();\n</code></pre> <p>To get the current time in ticks:</p> <pre><code>Ticks ticks = rGetTicks()\n</code></pre> <p>To get a high resolution CPU tick counter on some systems:</p> <pre><code>uint64 rGetHiResTicks();\n</code></pre> <p>To convert the time to a string local time representation:</p> <pre><code>char *str = rFormatLocalTime(\"%a %b %d %T %Y %Z\", time);\n</code></pre> <p>To convert to universal time:</p> <pre><code>char *str = rFormatUniversalTime(\"%FT%TZ\", time);\n</code></pre> <p>To get a local string representation of the current date:</p> <pre><code>char *str = rGetDate(NULL);\n</code></pre> <p>To get an ISO format date:</p> <pre><code>char *str = rGetIsoDate(time);\n</code></pre> <p>To get the elapsed time since a prior measurement:</p> <pre><code>Ticks elapsed = rGetElapsedTicks(mark);\n</code></pre> <p>To get the remaining ticks until a timeout:</p> <pre><code>Ticks remaining = rGetRemainingTicks(mark, timeout);\n</code></pre> <p>To parse an ISO date string:</p> <pre><code>Time time = rParseIsoDate(isoDateString);\n</code></pre>","location":"runtime/time/#api-tour"},{"title":"API Reference","text":"<p>The full API is specified here:</p> <p>Time API</p>","location":"runtime/time/#api-reference"},{"title":"HTTP Standards","text":"<p>The Standards guide contains references to the specifications that govern the HTTP protocol.</p>    Topic Description     The HTTP communications protocol specification HTTP/1.1    <p>Form-based file HTML upload specification | File Upload</p>","location":"standards/http/"},{"title":"Installing Ioto","text":"<p>Ioto releases are available as source code distributions from the Builder Site.</p> <p>To download Ioto, first create an account and login. Then define your product and select Ioto as the licensed software. Then click the download link and select the Ioto source code package.</p> <p>Download Source Package</p> <p>The Ioto source distribution contains all the required source files, headers, and test frameworks to reconfigure, build, and verify Ioto. The software supports two methods for building from source.</p> <ul> <li>Make</li> <li>Xcode</li> </ul> <p>You can build by simply typing make or you can select one of the IDE projects under the projects directory.</p> <p>Several build environments are supported including Linux and Mac OS X. For other environments, you will need to cross-compile.</p> <p>For more details, read Building from Source in the Developer guide.</p>","location":"start/installation/"},{"title":"GitHub Issues","text":"<p>A GitHub repository is used to report bugs, track issues and for general discussion.</p> <p>Go to the GitHub Issues to track bugs, security issues or participate in general discussions regarding Ioto.</p>","location":"start/installation/#github-issues"},{"title":"Use Cases","text":"<p>The Ioto device agent can be utilized in a variety of use cases:</p> <ul> <li>IoT Cloud Agent</li> <li>HTTP Client</li> <li>Local Device Management</li> <li>Embedded Web Server</li> <li>MQTT Client</li> </ul>","location":"start/uses/"},{"title":"IoT Cloud Agent","text":"<p>Device management from the cloud typically requires the MQTT protocol and an understanding of the MQTT topics supported by cloud provider.</p> <p>The Ioto agent is pre-integrated with the AWS Cloud and is easily configured to enable MQTT communications with AWS IoT Core.</p> <p>Ioto pre-integrates with a wide set of AWS services including: DynamoDB, IoT Core rules, IoT Shadows, S3, CloudWatch Logs, and CloudWatch metrics. Using IoT rules, you can also direct messages and data to many other AWS services.</p> <p>The Ioto agent will:</p> <ul> <li>Send messages to AWS IoT and other services via MQTT.</li> <li>Upload data and files to AWS S3.</li> <li>Replicate structured device data to and from AWS DynamoDB.</li> <li>Send control-plane data to AWS IoT Shadows.</li> <li>Store Ioto, device and O/S logs in AWS CloudWatch logs.</li> <li>Create device and operational metrics in AWS CloudWatch Metrics.</li> <li>Save audit trails to AWS CloudTrail.</li> </ul>","location":"start/uses/#iot-cloud-agent"},{"title":"Replicated Device Data","text":"<p>Ioto can replicate device data from its internal embedded device database to an AWS DynamoDB database in the cloud. This replication can operate in either direction so that data can be either sent to devices or aggregated from devices.</p> <p>This replication is reliable and transparent and the device developer does not need create any custom code to implement. The replication is configurable and granular on a table-by-table basis, and is resilient in the event of network outages.</p>","location":"start/uses/#replicated-device-data"},{"title":"HTTP Client","text":"<p>Ioto includes a streaming HTTP Client so you can make REST and HTTP requests to external web services.</p> <p>The API provides a simple GET and POST routines and a powerful fully streaming fetch call.</p> <p>As Ioto uses fiber coroutines, you can process streamed data (in either direction) without ugly callbacks or complex threads. Other fibers in Ioto continue to run transparently while the HTTP client is waiting for I/O.</p> <p>Ioto uses the HTTP client to communicate with the Embedthis Builder site and various AWS services. Ioto includes AWS SigV4 signing APIs so you can issue any AWS API using the HTTP client without requiring the significant overhead of the full AWS SDK.</p>","location":"start/uses/#http-client"},{"title":"Example","text":"<pre><code>//  Simple get\ndata = urlGet(\"https://www.example.com\");\n\n//  Simple post\ndata = urlPost(\"https://www.example.com\", \"POST\", body, bodyLen,\n    \"Authorization: bearer %s\\r\\n\", authToken);\n\n//  Or fully streaming fetch\nchar  buf[1024];\nssize nbytes;\nint   status;\n\nstatus = urlFetch(up, \"https://www.example.com\", \"POST\", body, bodyLen, headers);\ndo {\n    if ((nbytes = urlRead(up, buf, sizeof(buf))) &gt; 0) {\n        printf(\"%s\", buf);\n    }\n} while (nbytes &gt; 0);\n</code></pre>","location":"start/uses/#example"},{"title":"Local Device Management","text":"<p>Embedded web servers are useful for a variety of use cases including:</p> <ul> <li>Local end-user device setup and ongoing management.</li> <li>Provide a programatic REST API for device operation, data and metrics.</li> <li>Provide a debug web interface for developers creating connected devices.</li> </ul>","location":"start/uses/#local-device-management"},{"title":"Embedded Web Server","text":"<p>The Ioto agent can be used as a stand-alone embedded web server without any cloud management features enabled.</p> <p>Ioto can be configured and compiled to run only the web server and thus be a first-class replacement for any embedded web server. Embedthis has been developing embedded web servers for many years and the Ioto web server contains all that we have learned over this period.</p>  <p>Ioto is our best embedded web server with performance and security that surpasses other web servers.</p>  <p>The Ioto web server is unlike other embedded web servers in that it does not try to offer ALL HTTP features and functions. Rather, it implements only the essential core of HTTP/1.1 and thus deliver a tiny, fast, secure embedded web server that is exceptionally good at serving single page web applications and device data APIs with a very small security footprint.</p> <p>The Ioto web server supports: HTTP/1, HTTP/1.1, TLS/SSL, Action routines, user authentication, sessions, cookie management, request logging, and security sandboxing. Best of all, Ioto is tiny using only 80K of code. It will serve over 3,300 requests/sec on a Raspberry PI class of device.</p> <p>The Ioto web server is fully streaming for receive and transmit data. It can receive live streaming data and dynamically generate responses based on device data.</p>","location":"start/uses/#embedded-web-server"},{"title":"Example","text":"<pre><code>//  Bind a URL to a function to generate the response\n\nwebAddAction(host, \"/test\", testAction);\n\n//  Invoked for /test requests\nstatic int testAction(Web *web)\n{\n    char  buf[ME_BUFSIZE];\n    ssize nbytes;\n    int   i;\n\n    //  Streaming read of POST body data\n    while ((nbytes = webRead(web, buf, sizeof(buf))) &gt; 0) {\n        printf(\"Got body data %.*s\\n\", (int) nbytes, buf);\n    }\n\n    //  Streaming a response without buffering and with minimal memory footprint\n    for (i = 0; i &lt; 10000000; i++) {\n        //  This will block as required, but other fibers can still run.\n        webWriteFmt(web, \"Hello World, now is: %s\\n\", rFormatLocalTime(0, 0));\n    }\n    //  Finalize\n    webWrite(web, NULL, 0);\n    return 0;\n}\n</code></pre> <p></p> <p>For more details, please read the Ioto Web Server.</p>","location":"start/uses/#example_1"},{"title":"MQTT Client","text":"<p>Most IoT cloud management services rely on the MQTT protocol.</p> <p>MQTT is a light-weight client/server publish/subscribe messaging transport protocol. It is simple and has very low overhead and this makes it ideal for use in embedded devices and IoT where a small code footprint and minimal network overhead is required.</p> <p>For a device to be managed by the cloud requires not only MQTT support, but also an understanding of what MQTT topics are required to integrate with the specific cloud provider.</p> <p>Ioto has a high-performance, flexible MQTT client that can be used to communicate with any cloud service supporting MQTT 3.2.1.</p> <p>The Ioto MQTT agent is non-blocking, but also supports a blocking mode where you can wait for a message to be acknowledged or receipt of a response. This enables the MQTT protocol to be used for request/response APIs. Because, Ioto uses fiber coroutines, even when an MQTT sequence of operations are blocking, other APIs and services continue to run in other fibers.</p> <pre><code>PUBLIC int iaStart(void)\n{\n/*\n    Subscribe for incoming notifications.\n    This call will block and wait for acknowledgement.\n    Note: call blocks, but agent is not.\n */\nmqttSubscribe(ioto-&gt;mqtt, incoming, MQTT_QOS_2, MQTT_WAIT_ACK, \"/myDevice/change\");\n\n/*\n    Publish an \"initialized\" message with quality of service (1) which means send at most once.\n    Don't wait for sending or acknowledgement.\n */\nmqttPublish(ioto-&gt;mqtt, \"Initialized\", 0, MQTT_QOS_1, MQTT_WAIT_NONE, \"/myDevice/init\");\n</code></pre>","location":"start/uses/#mqtt-client"},{"title":"Ioto Background","text":"<p>The Ioto device agent is a compact management agent and library. It provides AWS IoT cloud integration, HTTP web server, MQTT client, HTTP client, embedded database, cloud database sync, state persistency, provisioning and OTA upgrading.</p> <p>Ioto is fast and compact, with a tiny memory footprint of less than 200K of code.</p> <p></p>","location":"user/background/"},{"title":"Goals","text":"<p>Embedded agents for managing devices have several competing goals:</p> <ul> <li>Provide a strong and standard management feature set</li> <li>Minimize memory footprint</li> <li>Minimize CPU consumption</li> <li>Maximize security</li> </ul> <p>To meet all these goals in one agent is difficult, but Ioto utilizes a safe runtime to assist. This maximizes code reuse and security, allowing management services to be coded as simply and efficiently as possible.</p>","location":"user/background/#goals"},{"title":"Processing Architecture","text":"<p>Ioto is based on an event-driven, single-threaded fibre coroutine core. It uses a non-blocking, event-driven architecture and is capable of running many inbound and outbound requests simultaneously with minimal CPU and memory resources.</p> <p>Ioto eliminates the ugliness of event callbacks and the complexity of threads by using fiber coroutines. A fiber coroutine is a segment of code that runs with its own stack and cooperatively yields to other fibers when it needs to wait. You can think of a fiber as a thread, but only one fiber runs at a time. For Go programmers, fibers are like Go routines. For JavaScript developers, fibers are similar to async/await.</p> <p>Ioto fibers are baked into the I/O system so you can easily support parallelism by overlapping requests without any effort. You can read and write sockets, issue HTTP client requests, send MQTT messages or respond to web server requests using a straight-line procedural programming model.</p> <p>All Ioto services are \"fiber-enabled\". This means that your user extension code is simple, easy to debug and maintainable over the long haul.</p>","location":"user/background/#processing-architecture"},{"title":"Core Components","text":"<p>Ioto has a modular architecture where modules can be conditionally compiled as required to minimize your memory and security footprint.</p> <p>The key components of Ioto are:</p>    Component Description     Embedded Web Server Embedded web server supporting HTTP/1.1, TLS 1.3, C action functions, file upload, transfer-encoding, user management, sessions and cookies, authentication, sandbox limits.   Embedded Database Embedded NoSQL database with JSON documents, red/black indexing, local persistency, triggers and replication to the cloud.   MQTT 3.1.1 Client Supports publish, subscribe, ping and disconnect messages. Includes retained message support and connect over port 443 via ALPN.   AWS Iot Integration AWS Iot cloud ready with data export to IoT shadows, S3, CloudWatch logs, CloudWatch metrics, Kinesis for streaming and DynamoDB for structured device data.   Transport Layer Security (TLS/SSL) Secure Socket Layer protocol stack. This is a virtual interface that can selectively support a variety of TLS providers including: the MbedTLS and OpenSSL stacks.   JSON JSON and JSON 5/6 parser. This module includes JSON persistency to files and a powerful JSON query engine.   Safe Portable Runtime Cross-platform safe portable runtime. Includes services for memory allocation, buffer management, safe string handling, lists, hashing, sockets, events, timers, logging and fiber coroutines.","location":"user/background/#core-components"},{"title":"Integration Models","text":"<p>Ioto can be integrated into your system in two ways:</p> <ul> <li>Use the Ioto main() and provide your \"start\" and \"stop\" functions.</li> <li>Use your own main() and link with the Ioto library.</li> </ul>","location":"user/background/#integration-models"},{"title":"Use the Ioto Main","text":"<p>The first way to integrate Ioto is to use the Ioto main program and provide your own start and stop functions. In this manner, your app becomes empowered with MQTT, HTTP and AWS integration services.</p> <p>Ioto can be customized by providing your own iaStart and iaStop functions that are invoked by Ioto during startup and shutdown.</p>","location":"user/background/#use-the-ioto-main"},{"title":"Provide your own main()","text":"<p>The second way to integrate Ioto is to create your own main program and link with the Ioto library. This method is desirable if you have more extensive customizations or need to parse custom command line options.</p> <p>See Embedding Ioto for more details.</p>","location":"user/background/#provide-your-own-main"},{"title":"Ioto Configuration","text":"<p>Ioto uses a set of JSON configuration files to control execution. These configuration files are read when Ioto starts.</p> <p>The configuration files use a relaxed JSON format called JSON/5. This format is similar to the JavaScript object literal notation. Specifically, it supports: comments, keys without quotes, trailing commas and multiline strings.</p> <p>The configuration files are:</p>    File Description     auth.json5 Authentication configuration for the web server. Includes defined roles, users and passwords.   config.json5 Primary Ioto configuration file. Configures enabled services, logging and log file ingestion   device.json5 Device registration configuration.   local.json5 Local configuration for development.   provision.json5 Cloud provisioning endpoints and keys.   shadow.json5 Local copy of the AWS IoT shadow state.   web.json5 Web server configuration file.    <p>See Ioto Configuration for more details.</p>","location":"user/background/#ioto-configuration"},{"title":"Ioto HTTP Web Server","text":"<p>The Ioto web server is a fast, compact web server designed for local device management and for hosting embedded device management applications. It can also be used for serving device data over the network.</p> <p>Management applications are best created using Single Page Application design techniques where the application is rendered locally in the browser and it requests pure-data from the device to populate dynamic content.</p> <p>Ioto is ideal for this approach. It includes an integrated embedded database, JSON parser and query engine to enable it to receive HTTP requests with JSON payloads and remit responses in JSON.</p> <p>Ioto does not provide a web framework \u2014 nor do we believe that dynamically generating HTML is the most compact, secure or best approach for performing device management.</p> <p>A working sample single page application called Kickstart is available for download from the Builder. This is a VueJS application that serves a sample device application for Ioto.</p> <p>The core web services include:</p> <ul> <li>HTTP/1.1 protocol engine.</li> <li>Non-blocking socket communications.</li> <li>TLS (SSL) 1.3 support.</li> <li>Multiple listen endpoints.</li> <li>Flexible configuration via the web.json file.</li> <li>Session and cookie management.</li> <li>Authentication and User management.</li> <li>Serve static files.</li> <li>File upload.</li> <li>Transfer chunk encoding in both directions.</li> <li>Fully streaming receive and transmit data.</li> <li>Dynamic content rendering via binding URLs to C functions.</li> </ul> <p>The Ioto web server module is exceptionally fast and will serve over 3K requests per second on a modest Raspberry PI 4 and yet runs using only 80K of code.</p>","location":"user/background/#ioto-http-web-server"},{"title":"Agent Security","text":"<p>Ioto provides a suite of measures designed to increase the security of the Ioto device agent:</p> <ul> <li>TLS \u2014 Secure Sockets Layer</li> <li>Sandbox limits directives</li> <li>Authorization directives</li> <li>Safe, secure portable runtime</li> <li>Simple fiber coroutine programming paradigm</li> </ul> <p>Ioto supports the MbedTLS and OpenSSL stacks. You can configure server and/or client certificate-based authentication.</p>","location":"user/background/#agent-security"},{"title":"Safe Portable Runtime (R)","text":"<p>Ioto is built upon a portable runtime layer called the Safe Portable Runtime or \"runtime\" for short. This layer insulates the rest of the product from the underlying platform and allows it to be highly portable to new operating systems or hardware.</p> <p>The runtime provides a suite of services that facilitate the creation of high performance management applications, including: buffer management, networking, safe string handling, events, wait management, logging, lists and hashing.</p> <p>The runtime permits the rest of the Ioto code to be more secure by using the safe primitives offered by the runtime. It includes many mechanisms to assist in the creation of secure applications. One such facility is a safe string and buffer handling module to help eliminate the buffer overflows that have plagued many products.</p>","location":"user/background/#safe-portable-runtime-r"},{"title":"Building Ioto from Source","text":"<p>Ioto releases are available as source code distributions from the Builder Site. To download, first create an account and login, then define your product and select Ioto as the licensed software.</p> <p>Finally, click the download link and select the Ioto source code package.</p> <p>Download Source Package</p> <p>The Ioto source distribution contains all the required source files, headers, and test frameworks to reconfigure, build, and verify Ioto. The software supports two methods for building from source.</p> <ul> <li>Make</li> <li>Xcode or Visual Studio Code</li> </ul> <p>You can build by typing make or you can select one of the IDE projects under the projects directory.</p> <p>Several build environments are supported:</p> <ul> <li>Linux \u2014 Linux 4 with GNU C/C++</li> <li>Mac OS X \u2014 Mac OS X 11 or later</li> </ul>  <p>For other environments, you will need to cross-compile. The source code has been designed to run on FreeBSD, Linux, Mac OS X, VxWorks, FreeRTOS and other operating systems. It has been tested under Fedora and Ubuntu Linux based on the Linux 4 Kernel, and MAC OS X 11.</p>","location":"user/building/"},{"title":"Building with Make","text":"<p>Ioto is provided with a suite of generated, pre-configured Makefiles for common platforms. These are simple, clean, generated makefiles that build a default configuration for a specific operating system. These makefiles are provided under the ./projects directory.</p>","location":"user/building/#building-with-make"},{"title":"Make","text":"<p>A top level Makefile is also provided that detects your operating system and CPU architecture and then invokes the appropriate project Makefile for your system. To run:</p> <pre><code>make\n</code></pre>","location":"user/building/#make"},{"title":"Modifying the Make Defaults","text":"<p>You do not need to use a configure program when building via make. Rather, you supply configuration options directly to make. These options override default values defined by the \"projects/ioto-OS-default.mk\" makefile and by the \"projects/ioto-OS-debug-me.h\" file.</p> <p>For example, to disable all AWS cloud integration:</p> <pre><code>make ME_COM_CLOUD=0\n</code></pre> <p>Configurable components are enabled by setting their corresponding ME_COM_NAME option to \"1\", and can be disabled by setting to \"0\".</p>  <p>By defining make variables such as CC and CFLAGS, you can modify the compiler options or cross-compile. This is the also the technique used when cross-compiling.</p> <p>To see the list of configurable options, run make help:</p> <pre><code>make help\n\nusage: make [clean, compile, deploy, install, run, uninstall]\n\nThe default configuration can be modified by setting make variables\n\nSet to 0 to disable and 1 to enable:\n\n  ME_COM_CLOUD       # Enable/Disable all AWS cloud integration\n  ME_COM_DB          # Enable local database\n  ME_COM_LOGS        # Enable ingestion of log files into AWS cloud\n  ME_COM_MQTT        # Enable local MQTT client\n  ME_COM_SERIALIZE   # Enable Factory device serialization\n  ME_COM_SHADOW      # Enable AWS IOT shadow support\n  ME_COM_SSL         # Enable SSL/TLS\n  ME_COM_SYNC        # Enable state sync with AWS database\n  ME_COM_URL         # Enable local HTTP client\n  ME_COM_WEB         # Enable local HTTP web server\n\nFor example, to disable the web server:\n\n  ME_COM_WEB=0 make\n\nTo build with OpenSSL: Add ME_COM_OPENSSL_PATH when using a custom OpenSSL build\n\n  ME_COM_OPENSSL=1 ME_COM_OPENSSL_PATH=/path/to/openssl/build\n\nOther make environment variables:\n  ARCH               # CPU architecture (x86, x64, ppc, ...)\n  OS                 # Operating system (linux, macosx, vxworks, ...)\n  CC                 # Compiler to use\n  LD                 # Linker to use\n  CONFIG             # Output directory for built items. Defaults to OS-ARCH-PROFILE\n  CFLAGS             # Add compiler options. For example: -Wall\n  DEBUG              # Set to \"debug\" for symbols, \"release\" for optimized builds\n  DFLAGS             # Add compiler defines. For example: -DCOLOR=blue\n  IFLAGS             # Add compiler include directories. For example: -I/extra/includes\n  LDFLAGS            # Add linker options\n  LIBPATHS           # Add linker library search directories. For example: -L/libraries\n  LIBS               # Add linker libraries. For example: -lpthreads\n  PROFILE            # Set to \"static\" for static linking or \"default\" for dynamic\n\nUse \"SHOW=1 make\" to show executed commands.\n</code></pre>","location":"user/building/#modifying-the-make-defaults"},{"title":"Installing with Make","text":"<p>You can install the newly built software via:</p> <pre><code>sudo make install\n</code></pre> <p>You can remove by:</p> <pre><code>sudo make uninstall\n</code></pre>  <p>Note</p> <p>It is essential when invoking make uninstall, that you provide the same make flags and options as you did when compiling. This is because the Makefile will conditionally install only the selected components for those options.</p>","location":"user/building/#installing-with-make"},{"title":"Deploying","text":"<p>If you need to deploy to a different system or capture the build artifacts, you can install to a specific directory via:</p> <pre><code>make deploy\n</code></pre> <p>This will install to the deploy directory under the output platform directory.</p>","location":"user/building/#deploying"},{"title":"Cross Compiling with Make","text":"<p>Building Ioto for platform different to that of the local system is called cross compiling. Sometimes this compiling is just for a different instruction set (say x64 instead of x86). Other times, it is for a completely different operating system and/or CPU architecture. In such cases, a cross-compiler is typically required to build for the target platform.</p> <p>To cross compile, you will typically need to install a cross-compiler tool chain for your target architecture. Once installed and before you attempt to build Ioto, it is best to test compiling a simple, stand-alone HelloWorld program to ensure the cross compiler is working correctly.</p> <p>To cross-compile Ioto, you invoke the relevant project makefile and pass the required CPU architecture as a make variable. For example, to cross compile for VxWorks on ARM:</p> <pre><code>make -f projects/ioto-vxworks-default.mk ARCH=arm PROFILE=debug\n</code></pre> <p>When make executes, it places the output products (executables, libraries and objects) in a platform-specific output directory. This is named using the form: OS-ARCH-PROFILE. For example: vxworks-arm-debug. In this manner, make can be invoked multiple times, once for each target platform and the results will be captured in separate platform output directories. Some of the supported architectures for the ARCH field are:</p> <pre><code>arm, mips, ppc, x64 and x86.\n</code></pre> <p>The PROFILE variable is a descriptive name chosen by you for your configuration.</p> <p>If there is not a makefile for your target operating system, copy the closest makefile and edit to suit your target platform.</p>","location":"user/building/#cross-compiling-with-make"},{"title":"Specifying the CPU","text":"<p>The build will use the generic CPU type within the specified architecture. To override the default choice and specify a CPU type within an architecture, use the CPU variable. For example:</p> <pre><code>make OS=vxworks ARCH=arm CPU=arm7tdmi\n</code></pre>","location":"user/building/#specifying-the-cpu"},{"title":"Specifying a Tool Chain","text":"<p>You may need to specify where make can locate your cross-compiler and other tools. You can supply these via the make variables: CC, CFLAGS, DFLAGS, IFLAGS, LD and LDFLAGS. For example:</p> <pre><code>make CC=/opt/bin/ccarm.exe LD=/opt/bin/ccarm.exe ARCH=arm PROFILE=release -f projects/ioto-vxworks-default.mk\n</code></pre>","location":"user/building/#specifying-a-tool-chain"},{"title":"Building with an IDE","text":"<p>Ioto includes Visual Studio and Xcode projects that provide easy access for building and debugging. The generated IDE projects will build Ioto using default settings and are somewhat limited in their configurability.</p>","location":"user/building/#building-with-an-ide"},{"title":"Building with Xcode","text":"<p>To build with the Xcode on Mac OS X, run Xcode 12 or later and open the projects/ioto-macosx.xcodeproj project. Then select the Product -&gt; Build menu option to build the software. To debug, you will need to create use Product -&gt; Edit Scheme to set the executable to run under the Info tab, and define the working directory under the Options tab.</p>","location":"user/building/#building-with-xcode"},{"title":"Building with  OpenSSL","text":"<p>Ioto includes support for multiple TLS stacks including:</p> <ul> <li>MbedTLS</li> <li>OpenSSL</li> </ul> <p>MbedTLS is a compact TLS implementation suitable for embedded devices. Ioto includes the MbedTLS distribution and will build with it by default. OpenSSL is a leading open source TLS stack that is faster, but bigger.</p>","location":"user/building/#building-with-openssl"},{"title":"Downloading OpenSSL","text":"<p>Most Linux distributions include OpenSSL with their default distribution. We support the latest stable and LTS releases only. Once OpenSSL is built, you will need to supply the Ioto project with the pathname to your OpenSSL source code directory.</p>","location":"user/building/#downloading-openssl"},{"title":"Building with OpenSSL via Make","text":"<p>If you are building with make, first copy the built OpenSSL libraries to your build/*/bin directory. Then set the path to your OpenSSL source directory when you run make:</p> <pre><code>make ME_COM_OPENSSL=1 ME_COM_OPENSSL_PATH=/path/to/openssl SHOW=1\n</code></pre>","location":"user/building/#building-with-openssl-via-make"},{"title":"Building Ioto with OpenSSL via Visual Studio","text":"<p>To set the path to your OpenSSL source directory, select \"View -&gt; Property Manager\". Select \"ioto\" and edit the \"product\"  property page by expanding Debug. In the \"product Property Pages\" dialog, add a User Macro definition for the OpenSSL source directory.</p> <pre><code>ME_COM_OPENSSL_PATH path/to/openssl\n</code></pre>","location":"user/building/#building-ioto-with-openssl-via-visual-studio"},{"title":"Building Ioto with OpenSSL via Xcode","text":"<p>To set the path to your OpenSSL source directory, click on \"ioto-macosx-default\" on the left to display the project settings. Select under \"PROJECT\" the \"ioto-macosx-openssl_10\" project and click on \"Build Settings\" in the panel in the center. Scroll down to define the path to your OpenSSL source code directory in the ME_COM_OPENSSL_PATH property.</p>","location":"user/building/#building-ioto-with-openssl-via-xcode"},{"title":"GitHub Issues","text":"<p>A GitHub repository is used to track issues and for discussions.</p> <p>Go to the GitHub Issues to track bugs, security issues or participate in general discussions regarding Ioto.</p>","location":"user/building/#github-issues"},{"title":"Configuration","text":"<p>Ioto is controlled via several JSON/5 configuration files that are that are read at startup by Ioto.</p> <p>The configuration files are:</p>    File Description     auth.json5 Authentication configuration for the web server. Includes defined roles, users and passwords.   config.json5 Primary Ioto configuration file. Configures enabled services, logging and log file ingestion   device.json5 Device registration configuration.   local.json5 Local configuration for development.   provision.json5 Device and cloud provisioning configuration.   schema.json5 Database data schema.   shadow.json5 Local copy of the AWS IoT shadow state.   web.json5 Web server configuration file.","location":"user/configuration/"},{"title":"JSON/5","text":"<p>Ioto uses a human-readable JSON/5 for configuration. JSON/5 an extension of JSON that makes it easier to create, read and maintain configuration files in JSON.</p> <p>JSON/5 adds the following JavaScript features to JSON.</p> <ul> <li>Object keys may be JavaScript identifiers without quotes.</li> <li>Objects or arrays may have a trailing comma.</li> <li>Strings may be single quoted.</li> <li>Strings may span multiple lines (single, double or back-tick quotes).</li> <li>Numbers may have a leading or trailing decimal point, can be hexadecimal, and may begin with a plus.</li> <li>Values may be regular expressions.</li> <li>Undefined is a valid value.</li> <li>Single and multiline comments are allowed and preserved.</li> </ul> <pre><code>{\n    // single-comment\n    /*\n        Multi-line comment\n    */\n    unquotedKey: 42,\n    singleQuoteString: 'The \"lazy brown fox\" jumped...',\n    multiLine: \"Line one\n        line two\n    \",\n    hex: 0x42,\n    trailingComma: {\n        one: 1,\n        two: 2,\n    },\n}\n</code></pre> <p>Some Ioto configuration properties accept numeric values as human-readable string with unit suffixes. In this case, the value must be string. The limits and timeouts properties in the web.json5 file support the suffixes: unlimited, infinite, kb, k, mb, m, gb, g, byte, bytes, infinite, never, sec, secs, seconds, min, mins, minute, minutes, hr, hrs, hour, hours, day, days, week, weeks, month, months, year and years.</p>","location":"user/configuration/#json5"},{"title":"Profiles","text":"<p>Configuration files can provide multiple property profiles that can be selected at runtime. When Ioto is run, it executes with selected profile. This is typically <code>prod</code> for production and <code>dev</code> for development. However, you can create your own profiles for any desired execution configuration such as <code>qa</code> or <code>test</code>.</p> <p>The Ioto profile is defined via the PROFILE environment variable or via the <code>--profile</code> command line option.</p> <p>Configuration profiles are defined under the profiles property in any configuration file. The relevant configuration properties are selected by the current Ioto profile.</p> <pre><code>profiles: {\n    dev: {\n        limits: {\n        //  Override the default stack size\n        stack: '64k',\n    },\n    prod: {\n        trace: {\n            //  Send trace to a specific output file\n            path: 'ioto.log',\n        }\n    }\n}\n</code></pre>","location":"user/configuration/#profiles"},{"title":"config.json","text":"<p>The primary Ioto configuration file is called config.json.</p> <p>Here is a sample config.json:</p> <pre><code>{\n    services: {\n        cloud: {\n            keys: true,\n            logs: false,\n            provision: true,\n            serialize: 'auto',\n            shadow: false,\n            sync: true,\n        },\n        database: true,\n        mqtt: true,\n        url: true,\n        web: false,\n    },\n    logs: {\n        files: [\n            {path: '/var/log/sys*log', group: 'ioto', stream: '{hostname}' }\n        ],\n    },\n    limits: {\n        stack: '16k',\n    },\n    trace: {\n        path: 'aws',\n        format: '%D %H %A[%P] %T %S %M',\n        types: 'error,info',\n        sources: 'all',\n    }\n}\n</code></pre> <p>The configuration file defines the following items:</p> <ul> <li>The services to enable.</li> <li>The log files to capture and send to CloudWatch logs.</li> <li>The Ioto execution limits that defines the default stack size</li> <li>The Ioto trace log configuration.</li> </ul> <p>The configuration properties are defined in the Configuration Properties.</p>","location":"user/configuration/#configjson"},{"title":"Device Configuration","text":"<p>The config/device.json5 configuration file contains device identification and descriptive properties to uniquely identify a device. It is used during device registration and cloud provisioning.</p> <p>The device.json5 contains properties for:</p> <ul> <li>The device unique ID</li> <li>A product token indicating which product on which the device is based</li> <li>When the device was made</li> <li>Identifying description and model strings</li> <li>Whether the device is a test device</li> </ul> <p>You can also add any other properties to the device.json5 that may provide useful device context. These properties will be saved in the cloud device database and will be available to device managers.</p> <p>Example</p> <pre><code>{\n    id: \"731KPY4BA6\",\n    productToken: \"01GHTB33NJZXYZ1XA80GY5SZSN\",\n    product: \"Acme Router\",\n    created: \"2022-12-14T03:20:39.347Z\",\n    description: \"Acme Router for Home Office\",\n    model: \"Office-Hub\",\n    test: false,\n    ports: 16,\n    memory: \"256MB\"\n}\n</code></pre>","location":"user/device-properties/"},{"title":"created","text":"Name created     Description An ISO date for when the device was manufactured.   Synopsis `created: 'ISO Date'.    <p>Example</p> <pre><code>created: '2022-12-14T03:20:39.347Z'\n</code></pre>","location":"user/device-properties/#created"},{"title":"description","text":"Name description     Description A short description of your product.   Synopsis <code>description: 'Short sentence'</code>   Notes This should be a one sentence description of your product.    <p>Example</p> <pre><code>description: 'Acme Router for Home Office'\n</code></pre>","location":"user/device-properties/#description"},{"title":"id","text":"Name id     Description The unique device claim ID.   Synopsis <code>id: \"Unique device ID\"</code>   Notes The id property defines a unique per-device ID. This must be a globally unique ID. This should have a minimum of 80-bits of entropy. For more information, see Builder Serialization.    <p>Example</p> <pre><code>id: '731KPY4BA6'\n</code></pre>","location":"user/device-properties/#id"},{"title":"model","text":"Name model     Description A product model string.   Synopsis <code>model: 'Short model string'</code>   Notes This should be a short identifier that describes your device model type.    <p>Example</p> <pre><code>model: 'Office-Hub-32'\n</code></pre>","location":"user/device-properties/#model"},{"title":"product","text":"Name product     Description The name of your product.   Synopsis <code>product: 'Few words'</code>   Notes This should be the short, public name of your product.    <p>Example</p> <pre><code>limits: {\n    reconnect: '10secs',\n    stack: '16K',\n}\n</code></pre>","location":"user/device-properties/#product"},{"title":"productToken","text":"Name productToken     Description The product token is a Builder token that identifies the product on which the device was based.   Synopsis <code>directories: { \"log\": \".\", state: \"./state\" }</code>   Notes To obtain a product token, use the Builder to create a product definition and then get the ProductID token from the token list.    <p>Example</p> <pre><code>productToken: '01GHTB33NJZXYZ1XA80GY5SZSN'\n</code></pre>","location":"user/device-properties/#producttoken"},{"title":"test","text":"Name test     Description Determine if the device is a test device   Synopsis <code>test: true | false</code>   Notes This defaults to false.    <p>Example</p> <pre><code>test: true\n</code></pre>","location":"user/device-properties/#test"},{"title":"Initialization","text":"<p>Ioto can be compiled to include or exclude support for various services.</p> <p>The optional services are:</p>    Name Description     cloud All AWS Cloud integration   serialize Serialization during manufacturer   logs Log file capture to AWS CloudWatch   database Local embedded Database   web HTTP Web server   mqtt MQTT protocol used for cloud communications   shadow AWS IoT Shadow state support   sync Database sync to the cloud   url Url Http Client    <p>If a component is compiled, you can also selectively enable or disable support at runtime via the  services property in the config.json file.</p> <p>When Ioto starts, it will enable services that are compiled in and are enabled in the services property.</p> <pre><code>{\n    services: {\n        cloud: {\n            keys: true,\n            logs: true,\n            provision: true,\n            serialize: 'auto',\n            shadow: true,\n            sync: true,\n        },\n        database: true,\n        mqtt: true,\n        url: true,\n        web: true,\n    }\n}\n</code></pre>","location":"user/initialization/"},{"title":"Cloud Services","text":"<p>The services.cloud property can individually enable or disable specific cloud services. It can also be set to false to disable all cloud services.</p>","location":"user/initialization/#cloud-services"},{"title":"Startup Order","text":"<p>When Ioto starts, it will configure services (if enabled) in a specific order. If services are not enabled during compilation or are disabled in the config.json file, the step will be skipped.</p> <p>The order is:</p> <ol> <li>Serialize the device.</li> <li>Start the embedded web server.</li> <li>Register with the build service (one time).</li> <li>Provision with AWS IoT things and keys (one time).</li> <li>Retrieve AWS IAM credentials.</li> <li>Initialize MQTT communications with the cloud.</li> <li>Start database synchronization and retrieve changes while powered off.</li> <li>Connect with AWS IoT shadow state and retrieve state update if required.</li> <li>Initialize log export to AWS CloudWatch Logs.</li> </ol> <p>Please read the Provisioning for the Cloud for details about the device provisioning process.</p>","location":"user/initialization/#startup-order"},{"title":"Serialization","text":"<p>For secure device operation it is essential that each device can be uniquely identified. Most devices are created with a serial number that may include the product code, manufacturing batch number and individual serial number. However, while this serial number may be unique, it can be easily guessed because serial numbers typically follow a predictable format. This can present a security vulnerability when claiming device by serial number.</p> <p>Instead of using the existing serial number, Ioto uses a random, unique claim ID (UCI) that is a random, 80-bit number that is not guessable and does not follow a predictable pattern. When paired with the product ID, it is used as a unique claim ticket for users to claim devices for management. For example:</p> <pre><code>JT08FFQXWQ\n</code></pre> <p>The 10 letter UCI results in over 1 quadrillion possible numbers (32^10).</p> <p>During manufacturer, each device should be given a UCI that identifies the device to the Ioto service and is used by the user to \"claim\" the device after purchase or installation.</p> <p>The UCI should be printed on the device label and be clearly identified as the Claim ID. The Claim ID can also be represented as a QR code if you choose to develop a mobile app for users to claim devices. (See Claiming below).</p> <p>The UCI should be saved in the device.json configuration file in the claim property.</p> <pre><code>{\n    \"claim\": \"7423FFA8DT\",\n    \"product\": \"01GAQD45HGSN90AAF5QFVEBVTS\",\n    \"test\": 0\n}\n</code></pre>","location":"user/initialization/#serialization"},{"title":"Device Registration","text":"<p>Before a device can be managed, it must be registered and then be \"claimed\" by a user once purchased.</p> <p>Registration is a one-time step that happens only when the device is first powered on.</p> <p>When the device boots during system test, the Ioto agent will connect to the Embedthis Builder service to register. The agent will send the contents of the device.json over an encrypted TLS connection to the Embedthis Builder service.</p> <p>The device.json file contains the UCI device identifier and the product registration token. You can get the ProductID registration token from the Builder Token List.</p> <p>Once Ioto registers the device, the Ioto agent awaits for a user to claim the device.</p>","location":"user/initialization/#device-registration"},{"title":"Device Claiming","text":"<p>When a user purchases or installs a device with the Ioto agent, they can \"claim\" the device to manage from the cloud. While waiting, cloud services are pending, but other Ioto services can run, including the embedded web server for local management (if enabled).</p> <p>The user claims their device using the unique claim ID (UCI) printed on the device label. This claim request is sent to the Builder service that provisions the necessary X.509 certificates and AWS IoT resources required to support and manage the device. These are then returned to the Ioto Agent who saves them in the provision.json5 config file.</p>","location":"user/initialization/#device-claiming"},{"title":"Device Connection","text":"<p>When the device is powered on, but unclaimed, the Ioto agent will regularly check with the Ioto service to see if it has been claimed. In this state, it is \"unmanaged\" by the cloud and awaiting orders.</p> <p>The Ioto agent will check the Ioto service immediately on power-on, and then every 5 seconds with an exponentially increasing delay up to a defined limit. If the device is rebooted, the polling process recommences.</p> <p>Once claimed, when the agent next polls the Ioto service, it will receive management instructions and be redirected to the relevant AWS device cloud for ongoing management and the provisioning process is complete.</p>","location":"user/initialization/#device-connection"},{"title":"Firewall Ports","text":"<p>If the embedded web server is enabled, Ioto will listen on the interfaces and ports specified in the listens property in the web.json5 config file.</p> <p>If cloud services are enabled, Ioto will communicate out on port 443 using HTTPS to the Embedthis Builder cloud at admin.embedthis.com. It will also connect over port 443 to amazonaws.com using MQTT and HTTP protocols.</p>","location":"user/initialization/#firewall-ports"},{"title":"Ioto Project Resources","text":"<p>Embedthis developers use a variety of tools and resources to better manage the Ioto project. These include source code control and an issue tracking database.</p>","location":"user/project/"},{"title":"GitHub Repository","text":"<p>The Ioto GitHub repository is used for Ioto bug issue tracking and support discussions. The repository does not host the source code which is distributed from the Builder Site.</p>","location":"user/project/#github-repository"},{"title":"Security Alerts","text":"<p>You can subscribe to be notified of important security updates by subscribing to the Ioto Security Alerts GitHub Issue. Login to GitHub and subscribe under Notifications on the right hand side.</p>","location":"user/project/#security-alerts"},{"title":"Bug Issue List","text":"<p>The Ioto open issue and bug list is stored in a GitHub Issues site. Use the issue list to report bugs, issues and questions. Make sure you do the following:</p> <ul> <li>Fully describe any issue \u2014 don't be too brief</li> <li>The exact sequence of operations to provoke the issue</li> <li>Specify the software version and how you built it</li> <li>Describe your system platform: O/S and hardware</li> <li>Provide a stand-alone test case that reproduces the issue</li> <li>If relevant, upload edited log files and command line trace</li> </ul> <p>It is easy to be too brief in describing issues. To solve quickly, please provide as much detail as you can when describing issues.</p>","location":"user/project/#bug-issue-list"},{"title":"Support","text":"<p>Embedthis provides paid support programs for Ioto. If you are interested in support, please sign up via the admin portal  at: https://admin.embedthis.com.</p> <p>When evaluating Ioto, you may ask questions on the GitHub Discussions Forum.</p>","location":"user/project/#support"},{"title":"Configuration Properties","text":"<p>These are the configuration properties for the primary config/config.json configuration file.</p> <p>See the following descriptions for other configuration files:</p>    File Description     device.json5 Device configuration file.   schema.json5 Database data schema.   web.json5 Web server configuration file.","location":"user/properties/"},{"title":"api","text":"Name api     Description Collection of API endpoint URLs.   Synopsis <code>api: { \"builder\": \"value\", serialize: \"value\" }</code>   Notes The api property collection defines various API endpoints. The api.builder endpoint is for the Builder public API. The api.serialize endpoint is for your local device serialization service employed during device manufacture.    <p>Example</p> <pre><code>api: {\n    builder: 'https://api.admin.embedthis.com/api',\n    serialize: 'http://localhost:4100/ioto/serialize',\n}\n</code></pre>","location":"user/properties/#api"},{"title":"certs","text":"Name certs     Description Ioto Certificates.   Synopsis <code>certs: { aws: 'path', url: 'path' }</code>   Notes The certs.aws property defines a filename for the AWS root certificate bundle. The certs.url property defines a root certificate bundle that is used to verify domains used by the URL client.Ioto includes default certificates for the AWS root and URL root certificates.    <p>Example</p> <pre><code>certs: {\n    aws: 'certs/aws.crt',\n    url: 'certs/roots.crt',\n}\n</code></pre>","location":"user/properties/#certs"},{"title":"database","text":"Name database     Description Control the Ioto database.   Synopsis <code>database: { properties... }</code>   Notes The database property collection defines the database, schema and operational parameters that govern the Ioto database.The path property defines the filename of the on-disk database store. Ioto will also create a database journal log file that appends a \".jnl\" extension to this path.The schema property defines the database scheme that defines the database indexes, entities and data types.The maxJournalSize defines how big the database journal log should grow before Ioto rewrites the database. The maxJournalAge defines how long data should be preserved in the journal log before the database file is updated. These values should be sufficiently log as writing updated data to the journal is much more efficient that updating the database file. The maxSyncAge property defines how long changed database data should be buffered before synchronizing to the cloud. The maxSyncSize property defined how much data should be buffered before synchronizing to the cloud.    <p>Example</p> <pre><code>database: {\n    path: 'state/state.db',\n    schema: 'config/schema.json5',\n    maxJournalSize: '1mb',\n    maxJournalAge: '1min',\n    maxSyncAge: '5secs',\n    maxSyncSize: '10k',\n},\n</code></pre>","location":"user/properties/#database"},{"title":"directories","text":"Name directories     Description Define default Ioto directories.   Synopsis <code>directories: { \"log\": \".\", state: \"./state\" }</code>   Notes The directories property collection defines various directories used by Ioto. The directories.log directory is where log files will be saved. The directories.state directory is where runtime state including databases, provisioning information and shadow state will be stored.    <p>Example</p> <pre><code>directories: {\n    log: '/var/log',\n    state: 'state',\n}\n</code></pre>","location":"user/properties/#directories"},{"title":"limits","text":"Name limits     Description Define execution limits for Ioto.   Synopsis <code>limits: { \"key\": \"value\", ... }</code>   Notes The limits property collection defines various execution limits for Ioto. The limits.reconnect property defines the delay after MQTT communications are lost before the agent will reconnect. This is useful to throttle network load in the event of a network disconnection. The limits.stack property defines the default size of fiber coroutine stacks.    <p>Example</p> <pre><code>limits: {\n    reconnect: '10secs',\n    stack: '16K',\n}\n</code></pre>","location":"user/properties/#limits"},{"title":"limits.stack","text":"Name limits.stack     Description Define the stack size of fiber coroutines for Ioto.   Synopsis <code>limits: { stack: \"Number\" }</code>   Notes The limits.stack property specifies the stack size for Ioto coroutines. This should be set to the maximum anticipated stack size for your executing code. The default stack size is 64K. The core Ioto code requires a stack size of 12K. It is recommended that you minimize your use of big stack buffer variables and your use of deep recursion both of which require much bigger fiber stacks.    <p>Example</p> <pre><code>limits: {\n    stack: '16K',\n},\n</code></pre>","location":"user/properties/#limitsstack"},{"title":"logs","text":"Name logs     Description Define the list of log files to ingest and send to CloudWatch logs.   Synopsis <code>logs: { path: \"filename\", group: \"log-group', stream: \"log-stream\" }</code>   Notes The files property contains one or more file definitions to ingest and send to CloudWatch logs. The definitions define the log file name, AWS CloudWatch log group and stream names. The path property may contain wild cards and all matching files will be ingested. The group property specifies the AWS log group name which must exist. The stream property specifies the AWS log stream name which must exist. The group and stream properties may contain tokens that are expanded before use. The supported tokens are: \"{hostname}\" which translates to the system hostname, \"{instance}\" which expands to the AWS EC2 instance name and \"{deviceId}\" which expands to the provisioned provision.deviceId property.   Example     <pre><code>logs: {\n    files: [ {\n        path: '/var/log/sys*log',\n        group: 'ioto',\n        stream: '{hostname}'\n    } ],\n}\n</code></pre>","location":"user/properties/#logs"},{"title":"mqtt","text":"Name mqtt     Description MQTT configuration.   Synopsis <code>mqtt: { properties }\"</code>   Notes The mqtt property collection is used to configure MQTT communications to the cloud. The mqtt.cert and mqtt.key properties define filenames to the X.509 certificate and key used to secure MQTT communications.  The mqtt.client defines the MQTT client ID used to uniquely identify the device. The alpn property defines the HTTPS ALPN identification string required when using HTTP port 443 for communications. The mqtt.ca property defines the authority certificate from AWS that is used as the root certificate to verify the MQTT broker endpoint. The cert, key, client and endpoint properties can be set to \"auto\" to have their values dynamically configured from AWS IoT core at runtime.    <p>Example <pre><code>mqtt: {\n    cert: 'auto',\n    key: 'auto',\n    client: 'auto',\n    endpoint: 'auto',\n    port: 443,\n    alpn: 'x-amzn-mqtt-ca',\n    ca: 'certs/aws.crt',\n}\n</code></pre></p>","location":"user/properties/#mqtt"},{"title":"profile","text":"Name profile     Description Configuration profile to select.   Synopsis <code>profile: \"dev | qa | prod | ...\"</code>   Notes The profile property is used to select different configurations for Ioto at runtime. For example, it can select a \"dev\" profile for development and a \"prod\" profile for productions. The profile property selects a set of configuration properties from the profiles. These are copied to the top level and overwrite any existing top-level properties.    <p>Example <pre><code>profile: \"prod\"\n</code></pre></p>","location":"user/properties/#profile"},{"title":"profiles","text":"Name profiles     Description Configuration profiles and their configuration.   Synopsis <code>profiles: { \"Profile-Name\": { /* properties */ }</code>   Notes The profile property is used to select different configurations for Ioto at runtime. For example, it can select a \"dev\" profile for development and a \"prod\" profile for productions. The profile property selects a set of configuration properties from the profiles. These are copied to the top level and overwrite any existing top-level properties.    <p>Example <pre><code>profiles: {\n    prod: {\n        ingest: {\n            files: [\n                {path: '/var/log/sys*log', group: 'ioto', stream: '{hostname}' }\n            ]\n        }\n    },\n    dev: {\n        ingest: {\n            files: [],\n        }\n    }\n}\n</code></pre></p>","location":"user/properties/#profiles"},{"title":"scripts","text":"Name scripts     Description Set of scripts used for various management tasks.   Synopsis <code>scripts: { update: './scripts/update'}</code>   Notes The scripts.update property defines a script that is invoked to apply software updates. The script is invoked with the pathname to the update image as the first and only argument.    <pre><code>scripts: {\n    update: './scripts/update'\n}\n</code></pre>","location":"user/properties/#scripts"},{"title":"services","text":"Name services     Description Configure which Ioto services to enable at runtime.   Synopsis <code>services: { 'Service-Name': true | false, ... }</code>   Notes The services property collection defines which Ioto services to enable.Some services are nested under the cloud property. The supported services are: <ul><li>cloud \u2014 AWS Cloud Services</li> <li>keys \u2014 Generate and rotate IAM access credentials</li> <li>logs \u2014 Send local O/S log files to CloudWatch logs</li> <li>provision \u2014 Enable registration and provisioning of device in the cloud</li> <li>serialize \u2014 Invoke manufacturing serialization service at first boot during test.</li> <li>mqtt \u2014 MQTT services</li> <li>shadow \u2014 AWS IoT device shadows</li> <li>sync \u2014 Send device state to AWS database</li> <li>web \u2014 Local web server</li> </ul>Some services depend on others. Lower-level services will be forcibly enabled if upper level services require them.    <p>Example</p> <pre><code>services: {\n    cloud: {\n        keys: true,\n        logs: true,\n        mqtt: true,\n        provision: true,\n        serialize: 'auto',\n        shadow: true,\n        sync: true,\n    },\n    database: true,\n    url: true,\n    web: true\n}\n</code></pre>","location":"user/properties/#services"},{"title":"trace","text":"Name trace     Description Control the Ioto log trace file.   Synopsis <code>trace: { path: 'path', format: 'format', types: 'types', sources: 'sources' }</code>   Notes The trace property collection defines how and where Ioto traces execution information.The trace.path property specifies the destination of the Ioto trace log. Set it to \"stdout\" or \"stderr\", \"aws\" or a filename. If set to \"aws\", then the trace.group property specifies the AWS log group name and the trace.stream property specifies the AWS log stream name.The format specifies a leading format for the message that contains printf style tokens that are expanded at runtime. The supported tokens are: 'A' for the application name, 'D' for the local datetime, 'H' for the system hostname, 'M' for the message, 'P' for the process ID , 'S' for the message source, and 'T' for the message type.The types property specifies the types of messages to emit. It may contain the following types: debug, error, info and trace. It may be set to \"all\" for all types. The sources property specifies a comma separated list of message sources to emit. Sources may be prefixed with \"!\" to subtract from the list. For example: \"all,!mbedtls\" will emit messages from all sources except \"mbedtls\".    <p>Example</p> <pre><code>trace: {\n    path: '/var/log/ioto.log',\n    format: '%D %H %A[%P] %T %S %M',\n    types: 'error,info',\n    sources: 'all'\n}\n</code></pre>","location":"user/properties/#trace"},{"title":"version","text":"Name Version     Description Set the agent version.   Synopsis <code>version: \"SemVer Version String\"</code>   Notes The version string defines the versions of the embedded agent including your software. It is used when selecting software upgrades deployed from the Builder. Don't confuse this with the underlying Ioto version. The version string must conform to the Semantic Versioning 2.0 spec.","location":"user/properties/#version"},{"title":"Running Ioto","text":"<p>When Ioto is built and installed, it is configured to start automatically when the system boots.</p> <p>However, you can run Ioto manually. During development, this is especially helpful as you can vary the level of debug trace output.</p>","location":"user/running/"},{"title":"Ioto Command Line","text":"<p>On Linux or Mac OS X, Ioto is installed by default in the directory /usr/local/lib/ioto. The Ioto program is installed at /usr/local/bin/ioto.</p> <p>The Ioto command line is:</p> <pre><code>ioto [options]\n</code></pre>","location":"user/running/#ioto-command-line"},{"title":"Ioto Command Options","text":"Option Description     --account Token Manager account for self-claiming.   --background Run Ioto in the background detached from the terminal.   --cloud Token Cloud claim token for self-claiming   --debug Emit very verbose debug tracing.   --exit event minutes   --home directory Change to directory to run   --id Token Device claim ID. Overrides device.json5.   --nolocal Do not apply local.json5.   --nosave Run in-memory and do not save state.   --product Token Product claim ID. Overrides device.json5.   --profile profile Select execution profile from config.json   --reset Reset state to factory defaults.   --test Suite Run test suite from config/test.json5.   --timeouts Disable timeouts for debugging.   --trace file[:type:from] Trace to file.   --verbose Emit more verbose trace   --version Output version information","location":"user/running/#ioto-command-options"},{"title":"Configuration","text":"<p>When Ioto starts, it reads various Ioto configuration files from the Ioto installation directory. See Configuration Files for details.</p>","location":"user/running/#configuration"},{"title":"Logging and Tracing","text":"<p>Ioto provides detailed tracing regarding client accesses and the operation of Ioto.</p> <p>The Ioto tracing is configured via the trace property in the config.json file. It can also be specified via the --trace command line option when invoking ioto, or via the --verbose or --debug-- options.</p>","location":"user/running/#logging-and-tracing"},{"title":"Configuration","text":"<p>Tracing can be directed toward a trace file or toward AWS CloudWatch logs.</p> <p>The trace property in config.json specifies the destination via the path property. This property can be set to stdout, stderr, any trace filename or \"cloud\".</p> <pre><code>trace: {\n    path: 'ioto.log',\n    format: '%D %H %A[%P] %T %S %M',\n    types: 'error,info',\n    sources: 'all',\n},\n</code></pre> <p>The format property specifies a format for trace messages. It contains printf style tokens that are expanded at runtime. The supported tokens are: 'A' for the application name, 'D' for the local datetime, 'H' for the system hostname, 'M' for the trace message, 'P' for the process ID , 'S' for the message source, and 'T' for the trace message type.</p> <p>Ioto classifies trace messages according to types. The supported types are: debug, error, fatal, info, and trace. The types property specifies a comma separate list of trace message types to emit.</p> <p>Log messages are emitted from \"sources\". These are the names of the code module that originate the trace messages. The sources property is a comma separated list of sources. Some of the Ioto trace message sources are: \"runtime\", \"tls\", \"mbedtls\", \"json\", \"url\" and \"web\".</p> <p>You can use \"all\" for types and sources to match all types/sources. You can also use \"!type\" and \"!source\" to negate a type or source.</p>","location":"user/running/#configuration_1"},{"title":"Command Line","text":"<p>You can override the tracing configuration when invoking Ioto via the --trace command line option.</p> <p>This option specifies the trace file destination and a list of types and sources.</p> <pre><code>ioto --trace file[:types:sources]\n</code></pre> <p>The --trace option syntax is fileName[:types:sources]. The types are a comma separated list of message types. Valid types include: info, debug, error, trace and all. Sources are the code module names originating the trace messages. You can use \"!type\" and \"!source\" to negate a type or source.</p>","location":"user/running/#command-line"},{"title":"Ioto Manual Pages","text":"<p>This Ioto distribution provides manual pages that can be viewed (on Unix-like systems) using the systems man command. Text copies of the pages are included below:</p>    Topic Description     ioto Ioto device agent.   pass Password manager.","location":"user/running/#ioto-manual-pages"},{"title":"Authentication","text":"<p>Authentication is the process by which a client's identity and capabilities are verified before granting access to server resources. Authentication is essential when you have content that you wish to protect and provide only to specific, approved clients.</p> <p>The Ioto web server implements a powerful and flexible authentication framework that verifies username and password and controls client capabilities using a role based authorization mechanism.</p>","location":"web/authentication/"},{"title":"Overview","text":"<p>Web authentication has historically used Basic or Digest authentication. However these two methods have security and usability flaws and should not be used.</p> <p>A preferred method is to use a web form to capture the username and password and then them transmit securely using an encrypted TLS connection where the credentials are validated by the web server.</p>","location":"web/authentication/#overview"},{"title":"Configuration","text":"<p>Authentication for the Ioto web server is controlled by the auth.json JSON/5 configuration file.</p> <p>Here is a sample auth.json configuration file:</p> <pre><code>{\n    auth: {\n        roles: {\n            \"user\":          [\"view\"],\n            \"administrator\": [\"view\", \"edit\"],\n        },\n        users: {\n            \"ralph\": {\n                password: \"BF1:00128:7B1MFk55Gswv648L:+zReK36LKHWNfbYKKNTsXhiqLMDxTsyK\",\n                roles:    [\"administrator\"],\n            }\n        }\n    }\n}\n</code></pre> <p>The authentication configuration is scoped under the auth property and defines the following properties:</p> <ul> <li>The access roles that are translated in access control \"abilities\".</li> <li>The users to define the users and their passwords and roles.</li> </ul>  <p>SECURITY WARNING: it is essential that the authentication file be stored outside the \"web.documents\" directory or any directory serving content.</p>","location":"web/authentication/#configuration"},{"title":"Access Roles","text":"<p>Access roles define a list of one or more \"abilities\" for each role. These abilities are just simple words and typically correspond to user capabilities verbs such as: \"edit\", \"view\", \"create\" or \"delete\".</p> <p>The Ioto web server controls access to resources by requiring a specific \"ability\" to enable a URL route. If the authenticated user has a role that includes that ability, then the user is granted access.</p> <p>For example:</p> <pre><code>web: {\n    routes: [\n        { match: '/public/' },\n        { match: '/auth/' },\n        { match: '/admin/', can: 'edit' },\n        { can: 'view', redirect: '/auth/login' },\n    ]\n}\n</code></pre> <p>Each route specifies a matching URL prefix except for the last route which is a catchall. To restrict access, the route provides a \"can\" property that specifies the required user ability to deny or permit access.</p>","location":"web/authentication/#access-roles"},{"title":"Users and Passwords","text":"<p>Users are defined in the auth.json together with their passwords and access abilities. The passwords in the auth.json config file are hashed and salted according to best practices.</p> <p>Each user is given a set of roles that are translated into a set of abilities.</p> <p>Passwords are created by the cryptMakePassword API or by using the pass utility program supplied with Ioto. The user passwords are hashed using the Bcrypt or SHA256 ciphers.</p>","location":"web/authentication/#users-and-passwords"},{"title":"Pass Program","text":"<p>The command line syntax for pass is:</p> <pre><code>pass [--cipher bcrypt|sha256] [--file auth.conf] [--password word] username roles...\n</code></pre> <p>The --file filename option specifies the name of the authentication file, if unspecified, the password will be printed on the standard output.</p> <p>The --cipher option specifies the cipher used to hash and crypt the password. The default is bcrypt.</p> <p>If the --password option is not used, the pass program will prompt for the password.</p>","location":"web/authentication/#pass-program"},{"title":"Verifying Passwords","text":"<p>Authentication schemes define how the user credentials are captured from the user and supplied to Ioto. There are two classes of authentication schemes.</p> <ul> <li>Web Form Authentication</li> <li>Custom Authentication</li> </ul> <p></p>","location":"web/authentication/#verifying-passwords"},{"title":"Form Authentication","text":"<p>The form authentication scheme uses a HTML web form for the user to enter their username and password credentials and a HTTP Post request to submit credentials to the server for verification. Ioto manages the login/logout process and if authentication succeeds, a login session is created and a cookie is returned to the client's browser. Subsequent requests that include the cookie will be automatically authenticated using the session.</p>","location":"web/authentication/#form-authentication"},{"title":"Web Form","text":"<p>Here is a sample minimal example login page:</p> <pre><code>&lt;html&gt;&lt;head&gt;&lt;title&gt;login.html&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Please log in&lt;/p&gt;\n    &lt;form name=\"details\" method=\"post\" action=\"/auth/login\"&gt;\n        Username &lt;input type=\"text\" name=\"username\" value=''&gt;&lt;br/&gt;\n        Password &lt;input type=\"password\" name=\"password\" value=''&gt;&lt;br/&gt;\n        &lt;input type=\"submit\" name=\"submit\" value=\"OK\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>After the user enters their username and password and clicks OK, the form is posted and the /auth/login URL is requested. This URL should be bound to an Action via webAddAction. For example:</p> <pre><code>static int login(Web *web)\n{\n    cchar *password, *username;\n\n    username = webGetVar(web, \"username\", 0);\n    password = webGetVar(web, \"password\", 0);\n\n    if (webLogin(web, username, password)) {\n        webRedirect(web, 302, \"/welcome.html\");\n    } else {\n        webRedirect(web, 401, NULL);\n    }\n    return 0;\n}\n\nwebAddAction(host, \"/auth/login\", login);\n</code></pre> <p>The login function will retrieve the username and password entered by the user from the form post data and then validate these against the configured authentication details in auth.json using the webLogin API.</p> <p>SECURITY CAUTION: The login request should only be performed over a secure TLS encrypted connection and never over plain \"HTTP\".</p>","location":"web/authentication/#web-form"},{"title":"Route Configuration","text":"<p>To implement the form based authentication, you should ensure the login and log out pages and all required graphics and stylesheets are accessible without authentication.</p> <p>A typical set of routes for an authenticated web site is:</p> <pre><code>web: {\n    routes: [\n        { match: '/public/' },\n        { match: '/auth/' },\n        { match: '/admin/', can: 'edit' },\n        { can: 'view', redirect: '/auth/login' },\n    ]\n}\n</code></pre> <p>All public pages, stylesheets, javascript and images are stored under /public and can be accessed without authentication. Similarly, the login and logout actions are accessible under /auth which is publicly accessible. Once authenticated, users will have access to the /admin section if they possess a role with the 'edit' ability.</p>","location":"web/authentication/#route-configuration"},{"title":"Custom Authentication","text":"<p>You can easily create a custom or hybrid authentication scheme. You can choose to pass the username and password to the login action via other means such as an \"Authorization\" HTTP header or JSON payload. You would then adjust your login() function accordingly.</p> <p></p>","location":"web/authentication/#custom-authentication"},{"title":"Authentication APIs","text":"<p>See the the following API to manage authentication and authorization under program control.</p> <ul> <li>webAddRole</li> <li>webAddUser</li> <li>webLogin</li> <li>webLogout</li> <li>webAddUser</li> <li>webSetUserPassword</li> <li>webSetUserRoles</li> <li>webSaveAuth</li> </ul>","location":"web/authentication/#authentication-apis"},{"title":"Samples","text":"<p>Ioto provides a sample for user login:</p> <ul> <li>Auth Sample</li> </ul>","location":"web/authentication/#samples"},{"title":"Configuration","text":"<p>The Ioto web server is built by default when compiling from source.</p> <p>After building, the Ioto web server is enabled via the config.json5 file. It is disabled by default.</p> <pre><code>{\n    services: {\n        web: true\n    }\n}\n</code></pre> <p>If you wish to only run the web server, you can disable all the other services. In this manner, Ioto becomes a dedicated embedded web server.</p> <p>The web server configuration is controlled via the web.json5 file.</p> <p>Here is a minimal sample web.json5 that will listen on port 80 for HTTP requests and port 443 for TLS requests.</p> <pre><code>{\n    web: {\n        documents: \"./site\",\n        listen: [\n            \"http://:80\",\n            \"https://:443\",\n        ],\n        tls: {\n            certificate: \"server.crt\",\n            key: \"server.key\",\n        },\n    }\n}\n</code></pre> <p>The configuration file defines the following items:</p> <ul> <li>Public name of the server</li> <li>The documents directory for files to serve</li> <li>The ports on which to listen for requests</li> <li>Request timeouts</li> <li>Request limits</li> <li>The tls (TLS) certificates</li> <li>Instructions to redirect requests</li> <li>Processing routes</li> <li>Policy for file upload</li> </ul> <p>The configuration properties are defined in the Configuration Properties.</p> <p>Here is a more detailed example:</p> <pre><code>{\n    web: {\n        documents: \"./site\",\n        headers: {\n            'X-Frame-Options': 'SAMEORIGIN',\n        },\n        index: \"index.html\",\n        limits: {\n            body: \"100K\",\n            connections: \"100\",\n            memory: \"1MB\",\n            header: \"10K\",\n            sessions: \"20\",\n            upload: \"20MB\",\n        },\n        listen: [\n            \"http://:80\",\n            \"https://:443\",\n        ],\n        name: \"mysite.com\",\n        redirect: [\n            { status: 302, to: \"https://\" },\n            { status: 301, from: \"/old\", to: \"/new.html\" },\n        ],\n        routes: [\n            { match: '/public/' },\n            { match: '/auth/' },\n            { can: 'edit', redirect: '/auth/login' },\n        ],\n        sessions: {\n            cookie: \"-web-cookie-\",\n            enable: true,\n            sameSite: \"lax\",\n        },\n        timeouts: {\n            parse: \"10 secs\",\n            inactivity: \"300 secs\",\n            request: \"10 mins\",\n            session: \"30 mins\",\n            tls: \"1 day\",\n        },\n        tls: {\n            certificate: \"server.crt\",\n            key: \"server.key\",\n        },\n        upload: {\n            dir: '/tmp',\n            remove: true,\n        }\n    }\n}\n</code></pre>","location":"web/configuration/"},{"title":"Dynamic Web Content","text":"<p>The Ioto embedded web server can serve static files and can also render dynamically generated responses.</p> <p>Dynamic content is generated via the Action handler that binds specific URLs to corresponding C functions. The action handler is ideal for situations when you want to generate a dynamic response using C code.</p> <p>Previously, earlier web servers used the CGI and web frameworks like PHP or ESP to generate dynamic content. But these solutions are a poor fit for modern management applications that use SPA techniques. They also consume considerable CPU and memory resources and are not the best approach for embedded devices. Further, they expose large attack surfaces due to excess features that are not essential.</p> <p>Ioto uses a more efficient direct binding from URLs to C functions coupled with a flexible streaming, non-blocking API. When coupled with a JSON parser and query engine, a dramatically simpler and more efficient solution emerges.</p>","location":"web/dynamic/"},{"title":"Registering Actions","text":"<p>Actions routines are registered by calling webAddAction. This API takes a function to run and a corresponding URI prefix.</p> <pre><code>static void hello(Web *web)\n{\n    webWrite(web, \"Hello World\\n\", -1);\n\n    //  Signal end of output\n    webWrite(web, NULL, 0);\n}\n\n//  Register the action\nwebAddAction(host, \"/action/hello\", hello);\n</code></pre> <p>The webAddAction call registers the hello C function to be invoked whenever the request URL begins with the string \"/action/hello\". By using a string prefix, you can have a single action match an entire set of URLs that being with a given URL prefix.</p> <p>An action routine is responsible for rendering a complete response to the client. If your action routine needs to wait for I/O or block while reading required data from another service, read Blocking below.</p>","location":"web/dynamic/#registering-actions"},{"title":"Streaming Data","text":"<p>Ioto supports full-duplex streaming.</p> <p>Clients can stream body data to the web server and the server can stream response data back to the client. Ioto supports full-duplex streaming via non-blocking, fiber enabled APIs.</p> <p>The webRead routine is used to read body data from the client. The webRead call has the following signature:</p> <pre><code>ssize webRead(Web *web, char *buf, ssize bufsize);\n</code></pre> <p>The webRead function will read data from the client and return the number of bytes read. The routine will block if required until data is available. Other fibers continue to run while blocked. The function returns zero when the end of the body data is received.</p> <p>The webWrite routine is used to write data back to the client. The webWrite call uses the following signature:</p> <pre><code>ssize webWrite (Web *web, cvoid *buf, ssize bufsize)\n</code></pre> <p>The bufsize argument is set to the length of data to write. It can be set to -1 if the data to write is a null terminated string and the length of the string will be determined by strlen.</p> <p>The web parameter is passed to the action routine as its only argument.</p> <p>A response to the client is concluded by calling WebWrite with a NULL buffer or data length of zero. This signifies the end of the response.</p> <p>Ioto uses Transfer-Encoding by default for dynamically written data, so you don't need to define a response Content-Length. Each write will be wrapped in a transfer chunk.</p>","location":"web/dynamic/#streaming-data"},{"title":"Web Forms","text":"<p>Web forms requests are a special case. They use POST requests with url encoded body data. Ioto will read and buffer form data and parse into form variables before invoking the appropriate Action routine. The action can then retrieve via the webGetVar API.</p>","location":"web/dynamic/#web-forms"},{"title":"Writing Headers","text":"<p>Ioto will automatically write the HTTP response headers when you first call webWrite in your action routine. However, you can call webWriteHeaders to customize the HTTP headers. For example:</p> <pre><code>static void hello(Web *web)\n{\n    cchar   *msg;\n\n    msg = \"Hello World\\n\";\n\n    webWriteHeaders(web, \"Content-Length: %d\\r\\n\", slen(msg));\n\n    webWrite(web, msg, -1);\n    webWrite(web, NULL, 0);\n}\n</code></pre> <p>The webWriteHeaders routine accepts one or more headers, each of which is terminated by \"\\r\\n\". It is essential that you use \"\\r\\n\" and not just a single new line character after each header.</p> <p>Ioto will blend your supplied headers with other essential headers such as Date, Connection, Content-Length, Content-Type and Transfer-Encoding.</p> <p>You can only issue one call to **webWriteHeaders, subsequent calls for a given request will be ignored.</p>","location":"web/dynamic/#writing-headers"},{"title":"Status Code","text":"<p>HTTP responses always contain a HTTP status code. This is set to 200 for successful requests, 301/302 for redirections, 4XX for client errors, etc.</p> <p>By default, Ioto responds with a 200 successful HTTP status. You can set the status code via the webSetStatus or via webWriteResponse.</p> <pre><code>static void failure(Web *web)\n{\n    cchar   *msg;\n\n    webSetStatus(web, 404);\n    webWrite(web, \"Cannot find requested resource\\n\", -1);\n    webWrite(web, NULL, 0);\n}\n</code></pre>","location":"web/dynamic/#status-code"},{"title":"Reading Body Data","text":"<p>Ioto supports streaming request data via the webRead API. For example:</p> <pre><code>static void readStream(Web *web)\n{\n    char  buf[ME_BUFSIZE];\n    ssize nbytes;\n\n    while ((nbytes = webRead(web, buf, sizeof(buf))) &gt; 0) {\n        printf(\"Got %ld bytes\\n\", nbyte);\n        //  Process buffer here\n    }\n    return webWriteResponse(web, 200, \"Request processed\");\n}\n</code></pre> <p>The webRead routine will read body data and return the number of bytes read. It will return 0 when all the body data has been read. This routine supports requests with an explicit known Content-Length and those requests with indeterminate body lengths that use transfer encoding.</p> <p>The webRead routine will block the current fiber if necessary to wait for more body data. Other fibers continue to run.</p>","location":"web/dynamic/#reading-body-data"},{"title":"Blocking","text":"<p>Because Ioto uses fiber coroutines, you can wait for I/O inside an action routine provided you are using the fiber-safe blocking routines provided by Ioto. Don't call Posix \"sleep\" as that block the entire Ioto process.</p> <p>If you need to wait for data from an external API or service, you have two options:</p> <ol> <li> <p>Create a thread to wait for the data and then call rYieldFiber in your action routine. When the thread has the required data, call rResumefiber from the thread to resume the fiber.</p> </li> <li> <p>Use the Ioto R Portable Runtime non-blocking socket I/O routines such as rReadSocket and rWriteSocket.</p> </li> </ol> <p>Note: that the Ioto request and inactivity timeouts in ioto.conf may terminate a long running request. If you need to extend these timeouts for a request, call webSetTimeout.</p>","location":"web/dynamic/#blocking"},{"title":"Listening for Connections","text":"<p>Ioto can listen for HTTP requests on multiple IP addresses and ports. Incoming requests may be served by a single server, or they may be processed by different logical servers often called virtual hosts.</p> <p>The process of opening TCP/IP ports to listen for requests is called binding. By default, Ioto will listen on all the interface network cards in the system, but the Ioto configuration file allows explicit control over which interfaces, IP addresses and ports are used.</p>","location":"web/listening/"},{"title":"Listen Directive","text":"<p>The Listen configuration file property specifies the IP endpoints on which Ioto will listen for incoming HTTP requests. It takes the form:</p> <pre><code>listen: [\n    [http:// | https://][IP][:PORT],\n    ...\n]\n</code></pre> <p>The HTTP scheme portion is optional and indicates whether TLS is to be use. If https:// is used, then TLS will be applied to the connection.</p> <p>The IP address and port components are optional, but at least one must be present. If the IP address is absent, Ioto will listen on all network interfaces including the loop-back adapter. If the PORT is absent, Ioto will listen on the default port which is typically configured to be port 80.</p> <p>For example:</p> <pre><code>listen: [\n    \"http://:80\",\n    \"https://:443\",\n]\n</code></pre>","location":"web/listening/#listen-directive"},{"title":"IPv6","text":"<p>Ioto will listen on both IPv4 and IPv6 endpoints. To specify IPv6 endpoints you need to use IPv6 encoding. IPv6 addresses have eight colon separated segments. For example:</p> <pre><code>2001:0db8:85a3:08d3:1319:8a2e:0370:7348\n</code></pre> <p>Because IPv6 addresses contain a colon character, you need to enclose the IPv6 address in brackets if you want to also specify a network port when using the Listen directive.</p> <pre><code>listen: [\n    \"http://[2001:0db8:85a3:08d3:1319:8a2e:0370:7348]:7777\"\n]\n</code></pre> <p>These two documents are useful IPv6 references: * Understanding IPv6 Addresses * Wikipedia IPv6</p>","location":"web/listening/#ipv6"},{"title":"Overview","text":"<p>The Ioto web server is a fast, compact web server designed for management web applications and serving device data.</p> <p>Ioto can be configured to support the web server as an additional component or Ioto can be build to run only the web server and thus be a first-class replacement for any embedded web server. Embedthis has been developing embedded web servers for many years and the Ioto web server contains all that we have learned over this period.</p> <p>The Ioto web server is unlike other enterprise or embedded web servers. It does not attempt to offer ALL HTTP features and functions. Rather, it aims to implement only the required core of HTTP/1.1 and thus deliver a tiny, fast, secure embedded web server that is exceptionally good at serving single page web applications and device data APIs.</p> <p>The Ioto web server supports a cohesive feature set including: HTTP/1, HTTP/1.1, TLS/SSL, Action routines, user authentication, sessions, cookie management, request logging, and security sandboxing. Yet Ioto remains very small from 80K code and will run in as little as 200K RAM. It will serve over 3,000 requests/sec on a modest Raspberry PI.</p> <p></p>","location":"web/overview/"},{"title":"Goals","text":"<p>Our target use-cases for the Ioto web server were:</p> <ul> <li>Support device management applications that use Single-Page Application techniques.</li> <li>Support device APIs using REST APIs</li> </ul> <p>Our goals are:</p> <ul> <li>Be as compact as possible</li> <li>Enhance security by minimizing the code and feature footprint</li> <li>Provide a simple, intuitive API for web applications</li> </ul>","location":"web/overview/#goals"},{"title":"Features","text":"<p>The core web services include:</p> <ul> <li>HTTP/1.1 protocol engine</li> <li>TLS 1.3 support</li> <li>Non-blocking socket communications</li> <li>Multiple listen endpoints</li> <li>Flexible configuration via a web.json5 file</li> <li>Request routing with access control</li> <li>Binding URLs to C functions for dynamic content rendering</li> <li>Serve static files</li> <li>Configurable redirections</li> <li>Transfer encoding filter</li> <li>Session and cookie management</li> <li>Authentication and User management</li> <li>File upload</li> <li>JSON parser and query engine</li> <li>Sandbox limits and timeouts</li> </ul>","location":"web/overview/#features"},{"title":"Core Components","text":"<p>The Ioto web server components are:</p>    Component Description     Safe Portable Runtime Cross-platform, multi-threaded portable runtime. Includes services for memory allocation, dynamic module loading, safe string handling, lists, hashing, command execution, socket communications, threads, thread synchronization, thread-pool, events, timers, debug trace and logging.   Transport Security Layer (TLS) TLS protocol stack. This is a virtual interface that can selectively support a variety of TLS providers including: the MbedTLS and OpenSSL stacks.   HTTP/1.1 HTTP/1.1 HTTP protocol with keep-alive support.   Request Router Request routing with user authentication and access control.   Redirections Configurable redirections to TLS or new URL targets.   Dynamic Actions Render dynamic content with Actions that bind URLs to C functions.   Static File Handler The static File handler serves static content such as HTML pages, images and PDF files.   Upload Filter The upload filter supports multipart mime file upload.   Authentication and User Management Configurable user and password management. Control access to specific parts of the site.   Cookie and Session Management Automatic session creation and cookie management.   Transfer Encoding Filter The Chunk applies Transfer Chunk Encoding to outgoing data. Chunk encoding enables the HTTP connection to be reused for subsequent requests without having to establish a new TCP/IP connection. This can significantly improve network and application performance.   Logging Configurable request and response tracing including HTTP headers.","location":"web/overview/#core-components"},{"title":"Ioto Configuration","text":"<p>The web server uses a web.json5 JSON/5 configuration file that specifies what ports and addresses to listen on, where to find the web pages, and how to route requests. This file is read when Ioto starts.</p> <p>The Ioto web server is enabled via the config.json5 file. Set the **services.web\" property to true.</p> <pre><code>{\n    services: {\n        web: true\n    }\n}\n</code></pre> <p>The web server configuration is controlled via the web.json5 file. Here is a simple example web configuration file:</p> <pre><code>{\n    web: {\n        documents: \"./site\",\n        listen: [\n            \"http://:80\",\n            \"https://:443\",\n        ],\n        tls: {\n            certificate: \"server.crt\",\n            key: \"server.key\",\n        },\n        redirect: [\n            { status: 302, to: \"https://\" }\n        ],\n        routes: [\n            { match: '/' },\n            { match: '/index.html' },\n            { match: '/public/' },\n            { match: '/auth/' }\n            { match: '/admin/', can: 'edit' },\n            { redirect: '/auth/login', can: 'view' },\n        ],\n    }\n}\n</code></pre> <p>The documents directory specifies where your web pages are located.  The listen property nominates the IP:PORT endpoints on which you wish to listen, and the tls property specifies your TLS private key file and certificate file.</p> <p>The redirect property ensures all HTTP traffic is redirected over TLS. And finally, the routes property defines a set of processing rules for incoming requests. These rules can specify required roles (capabilities) for a user to be authenticated to access the URL.</p> <p>See Web Server Configuration for details.</p>","location":"web/overview/#ioto-configuration"},{"title":"HTTP Core","text":"<p>The Ioto HTTP core is responsible for parsing the incoming HTTP request. A HTTP request is comprised of a request line followed by one or more HTTP headers that provide additional context.</p> <p>The first line of the HTTP request specifies the HTTP operation method to use, the URI to access and the variant of the HTTP protocol to use. This typically looks like:</p> <pre><code>&lt;b&gt;GET&lt;/b&gt; /index.html HTTP/1.1\n</code></pre> <p>This example is asking for the /index.html document via the GET method using the HTTP/1.1 protocol.</p> <p>After the first line follow the headers. These are keyword, value pairs that control how the request will be processed. Typically there are 5-15 headers in most requests.</p> <pre><code>HeaderName: value\n</code></pre> <p>Some typical headers are:</p>    Header Description     Authorization Authorization details including user name, realm, password digest and other authorization parameters to implement Basic and Digest authentication.   Connection Describe how the TCP/IP connection should be managed when the request completes.   Content-Length Length of any addition data with a POST request.   Content-Type Mime types the client prefers to accept in response to this request.   Cookie Cookie associated with the URI in the clients cookie cache.   Host Name to the target host to serve the request. This specifies the host name when using virtual hosting.   If-Modified-Since Only return the content if it has been modified since the date specified. Clients who have cached copies of a document (or graphics) use this header to allow the server to skip copying the document if it has not changed.   Keep-Alive Request the server to keep the connection alive so that subsequent requests can reuse the connection.    <p>For example:</p> <pre><code>Connection: keep-alive\n</code></pre> <p>The HTTP core stores the parsed headers and their values for access by the request handlers. When all the headers have been processed Ioto proceeds to do request routing. This will occur before any associated POST data has been read from the client. POST data may be form data submitted by the client or it may be a file upload using the PUT method.</p>","location":"web/overview/#http-core"},{"title":"Request Routing","text":"<p>Ioto has a simple request routing engine that processes client HTTP requests and validates access using a role-based access control mechanism. The routing engine is configured with a set of routes from the Ioto configuration file. When a request is received, it examines the routes in sequence and selects the first matching route to handle the request.</p> <p>Handlers are responsible for receiving the request and creating a response. They generate response content based on the HTTP request URI, headers, any associated body data, and potential application session state. The output data flows through the output pipeline before transmission over the network to the client.</p> <p>Ioto supports two request handlers:</p> <ul> <li>Static file handler</li> <li>Dynamic action handler</li> </ul> <p>The static file handler serves document files from the configured documents directory.</p> <p>The dynamic action handler responds to requests by invoking an associated C function.</p>","location":"web/overview/#request-routing"},{"title":"Dynamic Web Content","text":"<p>Dynamic content is generated via the Action handler that binds specific URLs to corresponding C functions. The action handler is ideal for situations when you want to respond with device data or generate a dynamic response.</p> <p>Previously, earlier web servers used the CGI and web frameworks like PHP or ESP to generate dynamic content. But these solutions are a poor fit for modern management applications that use SPA techniques. They also consume considerable CPU and memory resources and are not the best approach for embedded devices. Further, they expose large attack surfaces due to excess features that are not essential.</p> <p>Ioto uses a more efficient direct binding from URLs to C functions. This direct binding of HTTP URL requests to C code is extremely efficient and since most device data is manage by C API \u2014 this provides the most direct path to accessing device data.</p> <p>When coupled with a flexible streaming, non-blocking API, and a JSON parser and query engine, the result is a dramatically simpler and more efficient device management platform.</p>","location":"web/overview/#dynamic-web-content"},{"title":"Fiber Coroutines","text":"<p>Ioto does not provide a web framework \u2014 nor do we believe this is the best approach for remote device management applications. Rather, we provide compellingly simple, streaming primitives to serve data for REST APIs and for single page applications.</p> <p>To do this, Ioto adopts a unique approach of using fiber coroutines for parallelism and streaming. This yields an exceptionally fast web server that will serve over 3K requests per second on a modest Raspberry PI 4 and yet runs using only 80K of code.</p> <p>The main benefit of fibers, is a non-blocking straight line procedural programming style.</p> <p>A fiber coroutine is code that runs with its own stack and cooperatively yields to other fibers when it needs to wait. You can think of a fiber as a thread, but only one fiber runs at a time so there is no thread sync to worry about. For Go programmers, fibers are like Go routines. For JavaScript developers, fibers are similar to async/await.</p> <p>You can read more in Fiber Coroutines, but for now, consider this sample Action routine:</p> <pre><code>static int testAction(Web *web)\n{\n    char  buf[ME_BUFSIZE];\n    ssize nbytes;\n    int   i;\n\n    //  Read POST body data. This will block, but other fibers can still run.\n\n    while ((nbytes = webRead(web, buf, sizeof(buf))) &gt; 0) {\n        printf(\"Got body data %.*s\\n\", (int) nbytes, buf);\n    }\n\n    //  Streaming a response without buffering and with minimal memory footprint\n    for (i = 0; i &lt; 10000000; i++) {\n        //  This will block as required, but other fibers can still run.\n        webWriteFmt(web, \"Hello World, now is: %s\\n\", rFormatLocalTime(0, 0));\n    }\n    //  Finalize\n    webWrite(web, NULL, 0);\n    return 0;\n}\n</code></pre>","location":"web/overview/#fiber-coroutines"},{"title":"JSON Parser and Query Engine","text":"<p>Ioto includes an integrated JSON parser, query engine and persistency to enable it to respond to HTTP requests with JSON payloads and remit responses in JSON.</p>","location":"web/overview/#json-parser-and-query-engine"},{"title":"Ioto Kickstart","text":"<p>Ioto includes a fully working sample single page application called Kickstart. This is a VueJS application that serves a sample device application from Ioto.</p>","location":"web/overview/#ioto-kickstart"},{"title":"Web Properties","text":"","location":"web/properties/"},{"title":"documents","text":"Name documents     Description Directory containing the static file documents to be published for context.   Synopsis <code>documents: \"directoryPath\"</code>   Notes The documents property defines the directory containing the documents that will be served. All routes share the same documents directory. The directoryPath should not have a trailing slash.    <p>Example</p> <pre><code>documents: \"/var/www\"\n</code></pre>","location":"web/properties/#documents"},{"title":"headers","text":"Name headers     Description Define HTTP headers to add to the client response.   Synopsis <code>headers: { \"Header-Key\": \"Header-Value\", ... }</code>   Notes The headers property defines one or more HTTP headers that are added to the client response. You should only define unique headers that are not already added by action routines or by the Ioto web server core. Otherwise, your response will have duplicate headers.    <p>Example</p> <pre><code>headers: {\n    \"Content-Security-Policy\":   \"default-src 'self'\",\n    \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n    \"CrossOrigin\":               \"origin=* credentials=yes headers=X-CORS-HEADER age=3000\",\n}\n</code></pre>","location":"web/properties/#headers"},{"title":"index","text":"Name index     Description Define the default index file to serve for directory requests.   Synopsis <code>index: \"filename\"</code>   Notes The index property specifies a document to be served when a HTTP request is made for a directory. If a client requests a directory, but without a trailing \"/\" in the URI, the client will be redirected to the URI with a trailing \"/\". When the client then uses that URI, the directory index file will be used for the response. For example: if an index of \"index.html\" is specified and a user requests http://www.acme.com/products/, then the document /products/index.html will be returned to the user.    <p>Example</p> <pre><code>index: \"index.html\"\n</code></pre>","location":"web/properties/#index"},{"title":"limits","text":"<p>The Ioto web server supports configuration properties that improve security by limiting the size and scale of incoming requests. This technique is know as \"sandboxing\" because it creates a limited or safer area in which Ioto executes.</p>    Name limits     Description Collection of limit properties   Synopsis <code>limits: { \"Limit-Property\": \"Limit-Value\", ...}</code>   Notes All limit values may be numbers or human-readable strings with unit suffixes. The unit suffixes can be upper or lower case. The supported units are: unlimited, infinite, kb, k, mb, m, gb, g, byte and bytes. Ioto has sensible defaults for these limits if not explicitly specified.    <p>Example</p> <pre><code>limits: {\n    body: \"100K\",\n    connections: \"100\",\n    header: \"10K\",\n    sessions: \"20\",\n    upload: \"20MB\",\n},\n</code></pre>","location":"web/properties/#limits"},{"title":"limits.body","text":"Name limits.body     Description Sets the maximum size of the request body in POST and PUT requests.   Synopsis <code>body: \"max-size\"</code>   Notes The body limit defines a maximum size for a POST request body data. For embedded applications, it is useful to limit the request body to the expected maximum. This ensures that rogue or malicious requests will not cause the server to allocate unwanted memory to servicing the request. The default limit is 100K.    <p>Example</p> <p><pre><code>body: \"100K\"\n</code></pre>   Notes     Security  <p>This directive can be quite useful in certain denial-of-service attacks where the attacker sends large documents of a certain type.</p>    </p>","location":"web/properties/#limitsbody"},{"title":"limits.connections","text":"Name limits.connections     Description Defines the maximum number of simultaneous client connections.   Synopsis <code>connections: \"value\"</code>   Notes The connections limit defines the maximum number of simultaneous client connections to the server. Connections in excess of this count will be rejected. Set to \"unlimited\" for no limit. This property counts the number of client socket connections. A single browser may open many separate connections (typically up to 6).    <p>Examples</p> <pre><code>connections: \"100\"\n</code></pre>","location":"web/properties/#limitsconnections"},{"title":"limits.header","text":"Name limits.header     Description Sets the maximum header size of a request.   Synopsis <code>header: \"max-size\"</code>   Notes The header limit defines a maximum size for the request headers. For embedded applications, it is useful to limit the maximum headers size to ensure that rogue or malicious requests will not cause the agent to allocate unwanted memory for servicing the request. The default limit is 10K.   Security This property can be quite useful in certain denial-of-service attacks where the attacker sends large documents of a certain type.    <p>Example</p> <pre><code>header: \"32K\"\n</code></pre>","location":"web/properties/#limitsheader"},{"title":"limits.sessions","text":"Name limits.sessions     Description Sets the maximum number of active client sessions   Synopsis <code>sessions: \"max-sessions\"</code>   Notes The sessions limit property defines the maximum number of active client sessions that utilize server-side session state storage. Requests in excess of this count will be rejected. Set to \"unlimited\" for no limit. This property limits the number of client sessions, whereas the \"connections\" limit will limit the number of simultaneously connected client systems. NOTE: that many browsers can and will initiate multiple requests when requesting a page. These will share the same session state storage.    <p>Examples</p> <pre><code>sessions: \"40\"\n</code></pre>","location":"web/properties/#limitssessions"},{"title":"limits.upload","text":"Name limits.upload     Description Maximum size of an uploaded file.   Synopsis <code>upload: \"max-size\"</code>   Notes The upload limit defines the maximum size of an uploaded file. In embedded applications, it is useful to limit the maximum file upload size to ensure that rogue or malicious requests will not cause the server to allocate unwanted space for uploads. Set to \"unlimited\" for no limit. If a file larger than the limit is uploaded, Ioto will reject the request and the client will receive an error. The default value is unlimited.   Security This directive can be quite useful in certain denial-of-service attacks where the attacker sends requests with bogus URLs.    <p>Example</p> <pre><code>upload: \"20MB\"\n</code></pre>","location":"web/properties/#limitsupload"},{"title":"listen","text":"Name listen     Description IP addresses and ports on which to listing for incoming requests.&lt;   Synopsis <code>listen: [ \"http(s)://[IP address:]portNumber\", ...]</code>   Notes The Listen directive specifies the IP endpoints on which Ioto will listen for incoming HTTP requests. If you specify only the port number and omit the IP address, Ioto will listen on all network interfaces including the loop-back adaptor. It will listen on both IPv4 and IPv6 if only a portNumber is specified. &gt;To listen on IPv6 endpoints, enclose the IP address in square brackets. For example: Listen [2001:05c0:9168:0000:0000:0000:0000:0001]. To listen on IPv4 endpoints, supply an IPv4 IP address. You may use 0.0.0.0 to listen on all IPv4 interfaces. To listen for TLS requests, use a \"https://\" prefix.    <p>Example</p> <pre><code>listen: [\n    \"http://:80\",\n    \"https://:443\",\n]\n</code></pre>","location":"web/properties/#listen"},{"title":"mime","text":"Name mime     Description Mime map to map document extensions to mime types.   Synopsis <code>mime: { \"ext\": \"mime-type\", ...}</code>   Notes The mime property defines additional mime types to be added to the Ioto mime type table. Mime type properties are indexed by the document file extension with the value of each key set to the corresponding mime type.    <p>Example</p> <pre><code>mime: {\n    \".html\": \"text/html\",\n    \".ico\": \"image/vnd.microsoft.icon\",\n}\n</code></pre>","location":"web/properties/#mime"},{"title":"name","text":"Name name     Description Define the public hostname by which the server is known   Synopsis <code>name: \"hostname.com\"</code>   Notes: The name property specifies the preferred, public, fully qualified hostname for the server. This address will be used when constructing URLs and redirections. The given hostname should be a fully qualified domain name with port number if using a port other than the default port. If a name is not defined, a value will be determined from the listening endpoint that accepted the connection.    <p>Example</p> <pre><code>name: \"www.acme.com\"\n</code></pre>","location":"web/properties/#name"},{"title":"redirect","text":"Name redirect     Description Redirect requests to a new target.   Synopsis <code>redirect: [ { status: code, from: \"path\", to: \"path\" }, ... ]</code>   Notes The redirect property maps requests from one URI to a new URL. The status argument may be either 301 for a permanent redirect or 302 for a temporary redirect. The default is 302.The from property defines the leading URL portion that must match for the redirect. If the from property is omitted, it will match all URLs.The to URL may be local to the system, in which case it will begin with a \"/\" character. Or it may be on another system, in which case it will begin with \"http://\" or \"https://\". In both cases, the user will receive a HTTP redirection response informing them of the new location of the document. If the to URL only consists of the scheme (https://), then the from URL will be used with the target scheme. This is useful to redirect all non-secure request to the secure https listening endpoint that supports TLS.    <p>Example</p> <pre><code>redirect: [\n    { status: 302, to: \"https://\" },\n    { status: 301, from: \"/old\", to: \"/new.html\" },\n],\n</code></pre>","location":"web/properties/#redirect"},{"title":"route","text":"Name route     Description Define a configuration to apply to a set of URLs.   Synopsis <code>routes: [ match: \"url-prefix\", can: 'ability' ]</code>   Notes The routes property specifies an ordered set of routes that defines the required authorization to be accepted.A route entry has a match property that defines the URL prefix that must match for the route to be used.The optional \"can\" property defines a set of \"abilities\" the user must possess for the route to be used. If the \"can\" property is absent, all users will match. If specified, the user must be authenticated first to determine their abilities.If the route matches, but the user fails to be authorized, the \"redirect\" property will be used to redirect the user to the given URL.Ioto tests routes in order and the first matching route is used. If no routes match, the client request is rejected with a 401 status code.    <p>Example</p> <p><pre><code>routes: [\n    { match: '/public/' },\n    { match: '/auth/' }\n    { match: '/members/', can: 'view' }\n    { match: '/admin/', can: 'edit' },\n    { can: 'edit', redirect: '/auth/login' },\n],\n</code></pre>    Notes     </p>","location":"web/properties/#route"},{"title":"sessions","text":"<p>The Ioto web server supports server-side sessions that are indexed by a session cookie. Ioto manages the creation of the session cookie and the management of sessions. APIs to get and set values in session state are provided.</p> <p>The default session cookie name is -web-session-. You can modify this when building by defining WEB_SESSION_COOKIE to be the cookie name of your choice.</p>    Name session     Description Collection of session properties.   Synopsis <code>sessions: { \"Sessions-Property\": \"Session-Value\", ...}</code>    <p>Example</p> <pre><code>sessions: {\n    cookie: \"-web-cookie-\",\n    enable: true,\n    sameSite: \"lax\",\n},\n</code></pre>","location":"web/properties/#sessions"},{"title":"session.cookie","text":"Name session.cookie     Description Controls whether to create session state for a request.   Synopsis <code>enable: true|false</code>    <p>Example</p> <pre><code>enable: true\n</code></pre>","location":"web/properties/#sessioncookie"},{"title":"session.sameSite","text":"Name session.sameSite     Description Sets the sameSite property in the cookie.   Synopsis <code>sameSite: \"Lax|None|Strict\"</code>   Notes The sameSite property defines the Set-Cookie HTTP header SameSite field. It may be set to \"Lax\" (the default), \"None\" or Strict.See MDN Set-Cookie SameSite for more information.   Security This property is used to effectively defend against CSRF attacks.    <p>Example</p> <pre><code>sameSite: \"Lax\"\n</code></pre>","location":"web/properties/#sessionsamesite"},{"title":"timeouts","text":"<p>The Ioto web server supports timeout properties that improve security by limiting the duration of requests.</p>    Name timeouts     Description Collection of timeout properties.   Synopsis <code>timeouts: { \"Timeout-Property\": \"Timeout-Value\", ...}</code>   Notes All timeout values are strings, not numbers.The string values may take human-readable suffixes which indicate the units for the value. The suffixes can be upper or lower case. The supported units are: infinite, never, sec, secs, seconds, min, mins, minute, minutes, hr, hrs, hour, hours, day, days, week, weeks, month, months, year, years.Ioto has sensible defaults for these timeouts if not explicitly specified.    <p>Example <pre><code>timeouts: {\n    parse: \"10 secs\",\n    inactivity: \"300 secs\",\n    request: \"10 mins\",\n    session: \"30 mins\",\n    tls: \"1 day\",\n}\n</code></pre></p>","location":"web/properties/#timeouts"},{"title":"timeouts.inactivity","text":"Name timeouts.inactivity     Description Defines the maximum duration of no I/O activity before the request will be terminated.   Synopsis <code>inactivity: \"duration\"</code>   Notes The inactivity timeout will be triggered if there is no read or write activity on the network connection to the client over the specified timeout period.    <p>Example</p> <pre><code>inactivity: \"30secs\"\n</code></pre>","location":"web/properties/#timeoutsinactivity"},{"title":"timeouts.parse","text":"Name timeouts.parse     Description Defines the maximum duration for parsing the request HTTP headers   Synopsis <code>parse: \"duration\"</code>   Notes The parse timeout will be triggered if Ioto cannot read and parse the HTTP headers over the specified timeout period.It is a security attack vector to open a connection to a web server and then be very slow, or stall writing the HTTP headers. This consumes a network connection and can lead to a denial of service. Setting the parse timeout to be short will limit this attack.    <p>Example</p> <pre><code>parse: \"15secs\"\n</code></pre>","location":"web/properties/#timeoutsparse"},{"title":"timeouts.request","text":"Name timeouts.request     Description Defines the maximum duration for a request.   Synopsis <code>request: \"duration\"</code>   Notes The request timeout will be triggered if the request cannot be completed inside the specified timeout period.It is good practice to set a request timeout to the maximum duration you expect the longest request to take.    <p>Example</p> <pre><code>request: \"2mins\"\n</code></pre>","location":"web/properties/#timeoutsrequest"},{"title":"timeouts.session","text":"Name timeouts.session     Description Defines the maximum duration of session inactivity for preserving session state.   Synopsis <code>session: \"duration\"</code>   Notes Session state will be preserved for up to the session timeout. When a client accesses or updates the session state, the timeout is restarted.    <p>Example</p> <pre><code>session: \"1hr\"\n</code></pre>","location":"web/properties/#timeoutssession"},{"title":"tls","text":"Name tls     Description Collection of TLS properties.   Synopsis <code>tls: { \"Tls-Property\": \"Tls-Value\", ... }</code>   Notes TLS properties apply to web server https connections. They do not apply to Ioto MQTT or Ioto client connections.    <p>Example</p> <pre><code>tls: {\n    authority: \"ca.crt\",\n    certificate: \"server.crt\",\n    key: \"server.key\",\n    verify: {\n        client: true,\n        issuer: true\n    }\n}\n</code></pre>","location":"web/properties/#tls"},{"title":"tls.authority","text":"Name tls.authority     Description Defines the location of the certificate file for client authentication.   Synopsis <code>authority: \"path\"</code>   Notes The authority property defines the file containing the certificates to use when authenticating client certificates. This property is only necessary if you wish to verify client certificates. If so, you must also define the \"verify.client\" to be true.The certificate file contains the concatenated certificates to use in preference order. The path may be an absolute path or it may be relative to the Home directory.    <p>Example</p> <pre><code>authority: \"/var/ioto/ca.crt\"\n</code></pre>","location":"web/properties/#tlsauthority"},{"title":"tls.certificate","text":"Name tls.certificate     Description Defines the location of the X.509 file containing the server certificate   Synopsis <code>certificate: \"path\"</code>   Notes The SSLCertificateFile directive defines the file containing the PEM encoded X.509 certificate for the server. The file may also contain the private key for the server in which case you do not need to use the key property.    <p>The path may be an absolute path or it may be relative to the Ioto home directory.|</p> <p>Example</p> <pre><code>certificate: \"server.crt\"\n</code></pre>","location":"web/properties/#tlscertificate"},{"title":"tls.key","text":"Name tls.key     Description Defines the location of the server's private key.   Synopsis <code>key: \"path/to/key\"</code>   Notes The key property defines the file containing the PEM encoded private key file for the server. This property is not required if the server's private key is combined with the certificate file. The private key should not be encrypted.   Security There is a dilemma here. If you use an encrypted private key, the server will pause until you enter the pass-phrase which makes headless operation impossible. If you do not encrypt the private key, your private key is more vulnerable should the server be compromised.    <p>Example</p> <pre><code>key: \"server.key.pem\"\n</code></pre>","location":"web/properties/#tlskey"},{"title":"tls.verify","text":"Name tls.verify     Description Collection of TLS verification properties   Synopsis <code>verify: { \"client\": \"value\", \"issuer\": \"value\" }</code>   Notes Control the type of certificate verification.    <p>Example</p> <pre><code>verify: {\n    client: true,\n    issuer: true,\n}\n</code></pre>","location":"web/properties/#tlsverify"},{"title":"tls.verify.client","text":"Name tls.verify.client     Description Control the type of client certificate verification.   Synopsis <code>client: true|false</code>   Notes This property controls whether the client must provide a client certificate for the server to verify the identity of the client. If disabled, no certificate is required. If one is supplied, it will be ignored. The certificate and the certificate's issuer will be verified. Use the \"verify.issuer\" directive to turn off verification of the issuer if you need to use a self-signed test certificate.If the property is enabled, the client must provide a valid certificate. The default is disabled.    <p>Example</p> <pre><code>verify: {\n    client: true,\n}\n</code></pre>","location":"web/properties/#tlsverifyclient"},{"title":"tls.verify.issuer","text":"Name tls.verify.issuer     Description Defines whether the issuer of the client certificate is verified.   Synopsis <code>issuer: true|false</code>   Notes This property controls whether the issuer of the client certificate will be verified. If set to off, the certificate issuer will not be verified. This is useful to accept self-signed test certificates.    <p>Example</p> <pre><code>verify: {\n    issuer: true,\n}\n</code></pre>","location":"web/properties/#tlsverifyissuer"},{"title":"upload","text":"Name upload     Description Collection of Upload properties.   Synopsis <code>upload: { \"Upload-Property\": \"Upload-Value\", ... }</code>   Notes The Upload properties control requests that use multi-part mime file upload. They control where the files are placed and how long the files are retained.    <p>Example</p> <pre><code>upload: {\n    dir: '/tmp',\n    remove: true,\n}\n</code></pre>","location":"web/properties/#upload"},{"title":"upload.dir","text":"Name upload.dir     Description Defines the directory to receive uploaded files.   Synopsis <code>dir: \"path\"</code>   Notes The directory to hold uploaded files should be outside the site \"documents\" directory.    <p>Example</p> <pre><code>dir: \"./tmp/uploads\"\n</code></pre>","location":"web/properties/#uploaddir"},{"title":"upload.remove","text":"Name upload.remove     Description Defines whether the uploaded files should be preserved after the request completes.   Synopsis <code>remove: true | false</code>   Notes The remove property defines whether the uploaded file is removed when the request completes. By default, an action routine that receives the upload file request should process the file before completing. Then Ioto will observe this property to determine if the file should be removed.   Security It is a denial-of-service risk to keep uploaded files in the upload directory after the receiving action routine completes. If the files are not immediately removed, attackers can upload more and more data and exhaust the capacity of the server.    <p>Example</p> <pre><code>remove: true\n</code></pre>","location":"web/properties/#uploadremove"},{"title":"Request Routing","text":"<p>Ioto includes a flexible request routing engine that routes client HTTP requests to appropriate request handlers. An Ioto configuration will typically have several routes. When a request is received, Ioto tests routes in sequence and selects the first matching route to handle the request.</p> <p></p>","location":"web/routing/"},{"title":"Route Configuration","text":"<p>Routes are defined in the web.json5 configuration file.</p> <pre><code>routes: [\n    { match: '/public/' },\n    { match: '/auth/' }\n    { match: '/members/', can: 'view' }\n    { match: '/admin/', can: 'edit' },\n    { can: 'edit', redirect: '/auth/login' },\n],\n</code></pre> <p>This example defines five routes. Routes can specify a match property that defines a matching URL prefix for the route to be used.</p>","location":"web/routing/#route-configuration"},{"title":"Route Ordering","text":"<p>When multiple routes are defined, a client request will test each route in the order in which they are declared in the routes array.</p> <p>To process a request, Ioto compares the request URL with the route match property prefix. If the URL begins with the match property, the route is selected. So ordering is very important.</p>","location":"web/routing/#route-ordering"},{"title":"Route Matching","text":"<p>A route that terminates with \"/\" will match any URL that begins with that pattern. If the route does not end with \"/\" it must match the entire URL path (without query or reference fragment).</p> <p>The special route match pattern \"/\" will match only the URL \"/\". i.e. the site home page.</p> <p>If the route does not contain a match pattern, all URLs will match. In this case, the route becomes a \"catch-all\".</p> <p>Routes with longer or more qualified route match properties should be defined first before more general routes.</p>","location":"web/routing/#route-matching"},{"title":"Route Authorization","text":"<p>If the selected route contains an authorization can property, the user must be logged in and possess the required ability specified by the can property.</p> <p>If the user is not logged in, or if the user does not have the requisite ability, the request will not proceed.</p> <p>In that case, if the route contains a redirect property, the request will receive a redirect 302 response toward the URL specified by the redirect property. If there is no such property, the request will receive a 401 Not Authorized response.</p>","location":"web/routing/#route-authorization"},{"title":"Route Patterns","text":"<p>A common pattern for web management applications is to require user authentication for all operations. Such web apps may have two levels of authorization, registered users and administrators.</p> <p>To support such two-level access control, consider the following route list:</p> <pre><code>routes: [\n    { match: '/public/' },\n    { match: '/auth/' }\n    { match: '/admin/', can: 'edit' },\n    { can: 'view', redirect: '/auth/login' },\n],\n</code></pre> <p>The following directory / URL structure would then be employed.</p> <ul> <li>/public/css \u2014 public stylesheets</li> <li>/public/js \u2014 public javascript</li> <li>/public/images \u2014 public images</li> <li>/auth/index.html \u2014 login form</li> <li>/auth \u2014 /auth/login and /auth/logout action routines</li> <li>/admin \u2014 administrators only</li> </ul>","location":"web/routing/#route-patterns"},{"title":"Security Considerations","text":"<p>Securing applications that are accessible to the Internet is not a trivial task.</p> <p>When a device enables an embedded web server, the security exposure increases significantly as it is listening for unsolicited incoming connections and requests.</p>  <p>You should disable the Ioto web server unless you definitely need to provide HTTP web services.</p>  <p>This page outlines some of the issues, and offers best-practices and tips to help you secure your application using the Ioto web server.</p>","location":"web/security/"},{"title":"Updates","text":"<p>Even the best or most secure application server can experience some security vulnerabilities that are discovered after being deployed in the field. It is highly recommended that you stay up to date with the latest version of Ioto. Download Ioto.</p> <p>Embedthis provides security protection as part of the Ioto commercial license that will proactively notify you of any security flaws and will expedite fixes or workarounds to minimize any vulnerabilities.</p>","location":"web/security/#updates"},{"title":"Sandboxing","text":"<p>Sandboxing is the term applied to running the Ioto web server in a confined environment. For device management, the profile of client access is typically well known, and the profile of malicious attacks are well outside this profile. The profile includes the rate of accesses, the type and size of requests.</p> <p>The Ioto web server has a set of configuration file properties that allow you to define a sandbox which specifies how Ioto must be used for a request to be serviced. By using a well defined sandbox, you can minimize the chance that your application will be compromised by malicious requests. You should customize the sandbox limits to use minimum values and thus provide the most protection.</p>","location":"web/security/#sandboxing"},{"title":"Security Limits and Timeouts","text":"<p>The Ioto security limits can be used to effectively block some denial of service attacks. Limits should be set as low as possible while still permitting all valid requests and workloads.</p> <p>Setting the LimitRequestsPerClient to a low value can restrict the ability of a malicious client to monopolize the server. One attack method for denial of service attacks is to initiate requests, but not conclude the request headers. The server is then forced to wait for the client to complete the request before it can act. However, setting the RequestParseTimeout directive to a low value will abort such requests and prevent such attacks.</p> <p>Ioto can monitor sandbox limits and trigger defensive responses if access is outside defined norms. See the Denial of Service section for more details.</p>","location":"web/security/#security-limits-and-timeouts"},{"title":"Sandbox Limits","text":"<p>The additional sandbox limit properties are:</p>    Limit Description     limits.body Maximum size of the incoming request body for POST and PUT requests. Does not include file upload size.   limits.form Maximum size of request form data (POST request using URL form encoding).   limits.header Maximum size of the request headers   limits.upload Maximum size of a file upload request","location":"web/security/#sandbox-limits"},{"title":"Timeout Properties","text":"<p>The important Ioto security timeout properties are:</p>    Timeout Description     timeouts.inactivity Maximum request and connection inactivity duration. This can be defined per route, so if you have a long running request, create a dedicated route for that request.   timeouts.parse Maximum duration to parse the request headers. This should be set very short. Typically a browser will send all the request headers in one network packet. Recommended value is 5 secs.   timeouts.request Maximum request duration. Set this to the maximum time a request can take. This can be defined per route, so if you have a long running request, create a dedicated route and RequestTimeout for it.    <p>See the Limit Properties and Timeout Properties documentation for further details.</p>","location":"web/security/#timeout-properties"},{"title":"Ioto User Account","text":"<p>It is important that you run Ioto with the lowest system privilege that will get the job done. If any application is compromised, including Ioto, then the system will be safest if the compromised application has as few privileges as possible.</p>","location":"web/security/#ioto-user-account"},{"title":"Unix Account","text":"<p>On Unix, create a dedicated user account and group for Ioto.</p>","location":"web/security/#unix-account"},{"title":"Windows Account","text":"<p>It is suggested that you create a dedicated account for Ioto to minimize the privileges available should Ioto be compromised.</p> <p>When creating an account for Ioto, ensure you do the following:</p> <ul> <li>Using the Group Policy manager, grant the account the privilege of \"Act as part of the operating system\" and \"Log on as a service\".</li> <li>Ensure the account is a member of the \"Users\" group.</li> <li>Give the account read and execute rights to all HTML documents.</li> <li>Give the account read, write, execute and delete rights to the logs directory.</li> <li>Give the account read and execute rights to the ioto.exe.</li> </ul>","location":"web/security/#windows-account"},{"title":"Directory and File Permissions","text":"<p>When Ioto is installed, it is configured for maximum security. This section explains the policy should you need to move or modify files and directories.</p> <p>To enhance security you need to consider the directory and file permissions for three classes of content:</p> <ul> <li>Pages served by the HTTP server</li> <li>Scripts run by the HTTP server</li> <li>Configuration and log files used by the HTTP server.</li> </ul> <p>Pages served by the Ioto server should be owned by root or administrator and should be only readable by the Ioto user account. Directories containing served pages should be readable and executable only.</p> <p>Scripts run by the Ioto server should always be outside all directories containing served pages. After all, you don't want prying eyes viewing your scripts! Scripts should be owned by the root or administrator and should only be readable and executable by the Ioto user account.</p> <p>Configuration and log files used by the Ioto server should always be outside all directories containing served pages or scripts. The directory containing the log files must be writable by the Ioto user account.</p>","location":"web/security/#directory-and-file-permissions"},{"title":"Home Directory Permissions","text":"<p>The root directory for Ioto is called the Home directory and is defined by the Home directive in the configuration file. The Home directory, and the logs and lib directory below it, should be owned by root (or admin), and should be in the group root (or administrators). They should only be writable by this specific user and group.</p> <p>For Linux, these commands will ensure the privileges are correctly set up:</p> <pre><code>cd    /etc/ioto\nchown root .\nchgrp root .\nchmod 755  .\ncd    /var/www/ioto\nchown root .\nchgrp root .\nchmod 755  .\n</code></pre>","location":"web/security/#home-directory-permissions"},{"title":"Chroot Jail","text":"<p>One of the best forms of isolation for the server is to run inside a chroot jail. A chroot jail is when an application changes its root directory to be isolated from the real file system root directory. Any access then to files outside the jail is protected and impossible. Ioto supports chroot jails via the chroot command.</p>","location":"web/security/#chroot-jail"},{"title":"Securing TLS","text":"<p>It is important to select a sufficiently long key length and strong cipher to protect TLS communications. It is recommended to use the AES cipher and avoid the older RC4 cipher suite. See the section below regarding Common Security Threats for threats against the RC4 ciphers.</p>","location":"web/security/#securing-tls"},{"title":"TLS Forms","text":"<p>A common practice is to use HTTP for regular communications and to post login forms using TLS. However, this approach is flawed. The web form itself must be served using TLS as well as the URL receiving the login information. This prevents attackers injecting code into the form and hijacking login credentials.</p> <p>For more information regarding TLS, please read:</p> <ul> <li>TLS Overview</li> <li>Configuring TLS</li> </ul>","location":"web/security/#tls-forms"},{"title":"Authentication","text":"<p>It is important to adequately secure all passwords stored at the server. Simply hashing the passwords with MD5 is insufficient as MD5 and other \"fast\" hashing techniques can be quickly compromised by dedicated password cracking and hashing tools.</p> <p>Ioto includes the SHA256 and Blowfish/Bcrypt ciphers as an alternative that are more secure than MD5. The Blowfish cipher is especially well suited for password hashing partly. Partly because it is slow, it does not easily succumb to brute-force cracking.</p> <p>If using a web page for users to submit their credentials, it is strongly recommended that you use TLS for both the web form page and for the request validating the user credentials.</p> <p>Lastly, remember to define routes to restrict access to content that should only be served to certain users. Otherwise those pages will also be visible via the default server.</p>","location":"web/security/#authentication"},{"title":"Log Files","text":"<p>Ioto will log satisfied requests to the access log (usually logs/access.log) and errors to the error log (usually logs/error.log). It is recommended that you regularly review these logs for suspicious activity.</p>","location":"web/security/#log-files"},{"title":"Common Security Threats","text":"<p>This section details some common security threats and issues and the steps you can take to mitigate them.</p>","location":"web/security/#common-security-threats"},{"title":"Server Information Disclosure","text":"<p>HTTP responses often disclose information that an attacker can use to refine their attack. At a minimum, too much information enables the attack to proceed faster. Ioto minimizes these disclosures and does not emit a Server HTTP header and strives to minimize unnecessary disclosures in responses. In cases where an illegal request is detected, Ioto will simply disconnect the client without issuing a response.</p>","location":"web/security/#server-information-disclosure"},{"title":"Mixed Transports","text":"<p>Is is a bad idea to mix secure and non-secure content in one page. This means a web page should be totally served by HTTP or by HTTPS but not mix transports on one page. The reason is that a page served by HTTP can be compromised and the guarantee of HTTPS and that green-browser https logo is diminished if the form page from which the user enters there data is not 100% trust-worthy.</p> <p>Ioto can support the \"Strict-Transport-Security\" HTTP response header. This header instructs the browser that all connections thereafter must only request over HTTPS. The specified age limit is in seconds To enable this, use the following directive:</p> <pre><code>web: {\n    headers: {\n        'Strict-Transport-Security': 'max-age=\"31536000\"',\n    }\n}\n</code></pre>","location":"web/security/#mixed-transports"},{"title":"Denial of Service","text":"<p>Denial of service attacks can be difficult to detect and defend against. However, Embedded devices typically have a well defined, understood and anticipated work load. Unlike enterprise system, which have highly variable work loads, embedded systems typically serve a specific purpose with known clients that follow a more predictable access pattern. This allows an embedded system to define a range of operation that is considered \"normal\" and to trigger alerts and defenses if access is outside of this \"normal\" operation.</p>","location":"web/security/#denial-of-service"},{"title":"Cross Site Scripting","text":"<p>Cross-site vulnerabilities have ballooned over recent years. Unfortunately, there is no, single complete cure. However, Ioto supports the Content Security Policy (CSP) scheme that can go a long way to reduce the exposure. It does this by exactly specifying and restricting what cross-site access is permitted.</p> <p>The following Ioto directive enables the Content Security Policy and restricts all access to the origin site. This is a good starting point.</p> <pre><code>{\n    web: {\n        headers: {\n            \"Content-Security-Policy\":  \"default-src 'self'\"\n        }\n    }\n}\n</code></pre> <p>See An introduction to Content Security Policy for more information.</p>","location":"web/security/#cross-site-scripting"},{"title":"Cross Site Sharing","text":"<p>Cross origin sharing is often required when using XMLHttp (Ajax) requests to communicate with another server. Cross Origin Resource Sharing (CORS) is a mechanism that allows scripts to make XMLHttp requests to another domain different from that which served the web page. This relaxes the same-origin policy of the browser, but in a controlled manner.</p> <pre><code>headers: {\n    CrossOrigin: \"origin=* credentials=yes headers=X-CORS-HEADER age=3000\",\n}\n</code></pre>","location":"web/security/#cross-site-sharing"},{"title":"Hidden Frames","text":"<p>Hidden frames may be inserted by attackers to provide a launch-pad for running malicious scripts. Denying the ability to run frames can close of this attack vector.</p> <p>The following Ioto directive will prevent frames or iframes from running in the web page.</p> <pre><code>Header set X-Frame-Options deny\n</code></pre> <pre><code>headers: {\n    \"X-Frame-Options\": \"deny\",\n}\n</code></pre>","location":"web/security/#hidden-frames"},{"title":"High Profile Threats","text":"<p>There have been several high profile exploits that pose specific risks and have captured media attention. These are addressed specifically below with details on how to mitigate their effects.</p>","location":"web/security/#high-profile-threats"},{"title":"Crime Exploit","text":"<p>The Crime Security Exploit attacks and exploits leakage of information due to the varying effectiveness of TLS compression.</p> <ul> <li>Access to intercept and redirect client communications</li> <li>Ability to initiate requests from the client</li> <li>Encrypted communications TLS/SSL</li> <li>TLS level compression</li> </ul> <p>By default, Ioto does not use TLS with TLS compression and is thus not vulnerable to this exploit. If you are using OpenSSL, the OpenSSL SSL_COMP_add_compression_method will enable TLS compression, so it is important not to use this OpenSSL API.</p>","location":"web/security/#crime-exploit"},{"title":"Breach Exploit","text":"<p>The Breach exploit is a variant of the Crime exploit. It attacks and discovers private server information, such as CSRF tokens, by observing the compression of HTTP responses over TLS. This exploit requires the following to be effective:</p> <ul> <li>Access to intercept and redirect client communications</li> <li>Ability to initiate requests from the client</li> <li>Encrypted communications TLS</li> <li>Server-side encryption of dynamic responses</li> <li>Unmodified inclusion in the response body of client specified query or form data</li> </ul> <p>Ioto does not dynamically compress response content and so is not vulnerable to this exploit.</p>","location":"web/security/#breach-exploit"},{"title":"Beast Exploit","text":"<p>The Beast Security Exploit attacks block ciphers used by TLS to access encrypted packets. This exploit requires the following to be effective:</p> <ul> <li>Use of TLS 1.0. This exploit has been addressed in TLS 1.1 and later.</li> <li>Ability to position attacker as man-in-the-middle between server and client</li> <li>Encrypted communications TLS</li> <li>Using a block cipher.</li> </ul> <p>Notes:</p> <ul> <li>OpenSSL 0.9.6d and later are not vulnerable.</li> <li>Ioto 3.3 and later have shipped with fixed OpenSSL libraries.</li> <li>Using RC4 will mitigate the attack if upgrading OpenSSL is not feasible, however this cipher is vulnerable to the Luck 13 exploit described below.</li> </ul>","location":"web/security/#beast-exploit"},{"title":"Lucky 13 Exploit","text":"<p>The Lucky 13 exploit attacks TLS by using varying padding for block ciphers.</p> <p>This exploit requires the following to be effective:</p> <ul> <li>Ability to position attacker as man-in-the-middle between server and client</li> <li>Encrypted communications TLS</li> <li>Using a block cipher.</li> <li>Use of the RC4 cipher.</li> </ul> <p>Notes:</p> <ul> <li>Mitigate by not using an RC4 cipher</li> <li>RC4 was not the default cipher in any Ioto release</li> </ul>","location":"web/security/#lucky-13-exploit"},{"title":"Documented Vulnerabilities","text":"<p>Ioto documents discovered security errors in its GitHub issue database at:</p> <pre><code>https://github.com/embedthis/ioto-doc/issues?state=open\n</code></pre> <p>Specific issue reports are created for all confirmed or erroneous security reports that receive a CVE classification. You can search for specific CVE numbers or see all via:</p> <pre><code>https://github.com/embedthis/ioto/search?q=CVE-&amp;amp;type=Issues\n</code></pre> <p>Unfortunately some security researchers publish poorly diagnosed security alerts and sometimes do not contact the vendor for confirmation of the report. Consequently there exist some security CVE reports which are bogus. Ioto creates parallel CVE issues in the Ioto GitHub issue database to comment on these reports and provide accurate resolution information.</p>","location":"web/security/#documented-vulnerabilities"},{"title":"Other Security References","text":"<p>Some of these articles may provide good background regarding security web servers.</p> <ul> <li>http://www.isg.rhul.ac.uk/tls/TLStiming.pdf</li> <li>http://html5sec.org/</li> <li>https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</li> <li>https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)</li> <li>https://www.owasp.org/images/b/be/Cracking-into-embedded-devices-and-beyond.pdf</li> <li>http://media.blackhat.com/bh-ad-11/Sutton/bh-ad-11-Sutton_Embeded_Web_Servers_WP.pdf</li> <li>http://www.imperialviolet.org/2012/07/19/hope9talk.html</li> <li>https://www.owasp.org/images/b/be/Cracking-into-embedded-devices-and-beyond.pdf</li> </ul>","location":"web/security/#other-security-references"},{"title":"Ioto Secure By Default","text":"<p>Ioto is designed to be secure by default. This means that the default configuration enables security best-practices to limit cross-site-scripting vulnerabilities. It also implies a fairly restrictive security sandbox. This default configuration may be a little too restrictive for your application. In that case, you can easily remove or override these defaults by the relevant Ioto configuration properties.</p> <p>Ioto uses the following built-in configuration for the default route.</p> <pre><code>{\n    headers: {\n        \"X-XSS-Protection\": \"1; mode=block\",\n        \"X-Frame-Options\": \"deny\",\n        \"X-Content-Type-Options\": \"nosniff\",\n        \"Content-Security-Policy\": \"default-src 'self'\",\n    }\n    timeouts: {\n        inactivity: \"30 secs\",\n        parse: \"5 secs\",\n        request: \"5 mins\",\n        session: \"5 mins\",\n    }\n    limits: {\n        body:               \"100K\",\n        connections:        50,\n        form:               \"10K\",\n        header:             \"10K\",\n        sessions:           20,\n        upload:             \"1MB\",\n    }\n}\n</code></pre> <p>The default Content Security Policy header is set to only permit content loaded from the server running ioto. It also bans inline scripts as these are vulnerable to inline script injection. See An Introduction to Content Security Policy for more information.</p>","location":"web/security/#ioto-secure-by-default"},{"title":"Configuring TLS","text":"<p>Ioto supports the TLS / SSL protocol for authenticating systems and encrypting data. Use of this protocol enables secure data transmission to and from clients in a standards-based manner.</p> <p>This document provides step-by-step instructions for configuring TLS in the Ioto web server. If you are unfamiliar with TLS, please read the TLS Overview first.</p>","location":"web/tls/"},{"title":"TLS Quick Start","text":"<p>The default source build of Ioto will support TLS for use by the Ioto web server. You can immediately test TLS access to documents by using the https:// scheme. For example, to access the home page using TLS, use this URL in your browser:</p> <pre><code>https://localhost/\n</code></pre> <p></p>","location":"web/tls/#tls-quick-start"},{"title":"TLS Providers","text":"<p>Ioto employs an open architecture TLS Provider interface so that customers can select or create an TLS provider for their needs.</p> <p>Ioto provides multiple TLS implementations:</p> <ul> <li>MbedTLS -- designed for embedded use. This is the default TLS stack and is pre-integrated with Ioto. It is configured and enabled by default.</li> <li>OpenSSL -- designed for enterprise use. See http://www.openssl.org.</li> </ul> <p>The default source build will use the MbedTLS provider by default. See the README.md file for details about how to build with OpenSSL..</p> <p></p>","location":"web/tls/#tls-providers"},{"title":"SSL Configuration Directives","text":"<p>Ioto uses several configuration TLS properties to control TLS and manage secure access to the web server.</p> <p>The relevant TLS properties are:</p> <ul> <li>tls.certificate</li> <li>tls.key</li> </ul> <p>There are some additional properties that are necessary should you wish to have Ioto verify client certificates. These :</p> <ul> <li>tls.authority</li> <li>tls.verify.*</li> </ul> <p></p>","location":"web/tls/#ssl-configuration-directives"},{"title":"TLS Configuration Example","text":"<p>Consider the default Ioto TLS configuration in the web.json5 configuration file:</p> <pre><code>web: {\n    listen: [ \"https://:443\" ]\n},\nredirect: [\n    { status: 302, to: \"https://\" },\n},\ntls: {\n    certificate: \"server.crt\",\n    key: \"server.key\",\n    verify: {\n        issuer: true\n    }\n}\n</code></pre> <p>This set of properties enables TLS on port 443 for all network interfaces and uses the default supplied self-signed certificate to identify the server.</p> <p>The listen property instructs Ioto to process requests from all interfaces on port 443 using TLS.</p> <p>The certificate property specifies the server certificate to use and the key property specifies the server private key for signing.</p> <p>SECURITY WARNING: You must obtain or generate a SSL certificate before using this example in a production environment.</p> <p>The server key file is a PEM encoded private key. You may supply either an encrypted private key or a decrypted private key. If you use an encrypted private key, the server will prompt you for a pass-phrase to decrypt the key when the server boots.</p>","location":"web/tls/#tls-configuration-example"},{"title":"Self-Signed Certificate","text":"<p>Ioto is shipped with a self-signed certificate to identify the web server.</p> <p>SECURITY WARNING: This certificate is suitable for testing purposes only and your browser will issue a warning when you access the server. For production use, you should obtain your own service certificate from signing authorities such as Verisign.</p> <p></p>","location":"web/tls/#self-signed-certificate"},{"title":"Generating Keys and Certificates","text":"<p>To generate a request file that you can send to a certificate issuing authority such as Verisign, use the following openssl command or equivalent command from your TLS provider:</p> <pre><code>openssl genrsa -des3 -out server.key 1024\nopenssl req -new -key server.key -out server.csr\n</code></pre> <p>This will generate a server key in the file \"server.key\" and will generate a certificate request in the file \"server.csr\" that you can send to the issuing authority. The issuing authority will generate a server certificate for your server and they will sign it with their private key. Subsequently, clients will be able to use the signing authorities public key to decrypt your server certificate and thus verify the identity of your server when negotiating a SSL session. When running these commands, you will be prompted to enter a pass-phrase password to decrypt the server private key. REMEMBER this password.</p> <p>SECURITY WARNING: Safeguard the \"server.key\" private key jealously. If this falls into malicious hands, then your server identity may be hijacked by another site.</p>","location":"web/tls/#generating-keys-and-certificates"},{"title":"Transport Layer Security (TLS) Overview","text":"<p>Ioto supports the Transport Layer Security (TLS) protocol for authenticating systems and encrypting data. Use of this protocol enables secure data transmission to and from clients in a standards-based manner. The Transport Layer Security protocol is a protocol layer which may be placed between a reliable connection-oriented network layer protocol (e.g. TCP/IP) and the application protocol layer (e.g. HTTP). TLS provides for secure communication between client and server by allowing mutual authentication, the use of digital signatures for integrity, and encryption for privacy.</p> <p>This following document explains TLS. It has heavily borrowed from the Apache Documentation. Many thanks to the fine folks at Apache for this excellent base material and for Frederick Hirsch who authored quite a bit of the original material.</p> <p>If you have a good understanding of TLS and now you want to configure TLS for Ioto, you may wish to skip the background and read immediately how to setup TLS for Ioto.</p> <p></p>","location":"web/tlsOverview/"},{"title":"Cryptographic Techniques","text":"<p>Understanding TLS requires an understanding of cryptographic algorithms, message digest functions (aka. one-way or hash functions), and digital signatures. The following section provides a brief introduction to the cryptographic foundations of TLS. If you are already familiar with this material, please skip forward to the TLS Overview section.</p>","location":"web/tlsOverview/#cryptographic-techniques"},{"title":"Cryptographic Algorithms","text":"<p>Consider the example of Alice who wants to send a message to her bank to transfer some money. She would like the message to be private, since it will include information such as her account number and transfer amount. One solution is to use a cryptographic algorithm, a technique that would transform her message into an encrypted form, unreadable except by those it is intended for. Once in this form, the message may only be interpreted through the use of a secret key. Without the key, the message is useless: good cryptographic algorithms make it so difficult for intruders to decode the original text that it isn't worth their effort.</p> <p>There are two categories of cryptographic algorithms: conventional and public key.</p> <p></p>","location":"web/tlsOverview/#cryptographic-algorithms"},{"title":"Symmetric Cryptography","text":"<p>Symmetric cryptography, requires the sender and receiver to share a key: a secret piece of information that may be used to encrypt or decrypt a message. If this key is secret, then nobody other than the sender or receiver may read the message. If Alice and the bank know a secret key, then they may send each other private messages. The task of privately choosing a key before communicating, however, can be problematic.</p> <p></p>","location":"web/tlsOverview/#symmetric-cryptography"},{"title":"Public Key Cryptography","text":"<p>Public key cryptography also known as asymmetric cryptography, solves the key exchange problem by defining an algorithm which uses two keys, each of which may be used to encrypt a message. If one key is used to encrypt a message then the other may be used to decrypt it. This makes it possible to receive secure messages by simply publishing one key (the public key) and keeping the other secret (the private key).</p> <p>Anyone may encrypt a message using the public key, but only the owner of the private key will be able to read it. In this way, you may send private messages to the owner of a key-pair (the bank), by encrypting it using their public key. Only the bank will be able to decrypt it.</p> <p></p>","location":"web/tlsOverview/#public-key-cryptography"},{"title":"Message Digests","text":"<p>Although Alice may encrypt her message to make it private, there is still a concern that someone might modify her original message or substitute it with a different one, in order to transfer the money to themselves, for instance. One way of guaranteeing the integrity of Alice's message is to create a concise summary of her message and send this to the bank as well. Upon receipt of the message, the bank creates its own summary and compares it with the one Alice sent. If they agree then the message was received intact.</p> <p>A summary such as this is called a message digest, one-way function or hash function. Message digests are used to create short, fixed-length representations of longer, variable-length messages. Digest algorithms are designed to produce unique digests for different messages. Message digests are designed to make it too difficult to determine the message from the digest, and also impossible to find two different messages which create the same digest \u2014 thus eliminating the possibility of substituting one message for another while maintaining the same digest.</p> <p>Another challenge that Alice faces is finding a way to send the digest to the bank securely; when this is achieved, the integrity of the associated message is assured. One way to do this is to include the digest in a digital signature.</p> <p></p>","location":"web/tlsOverview/#message-digests"},{"title":"Digital Signatures","text":"<p>When Alice sends a message to the bank, the bank needs to ensure that the message is really from her, so an intruder does not request a transaction involving her account. A digital signature, created by Alice and included with the message, serves this purpose.</p> <p>Digital signatures are created by encrypting a digest of the message, and other information (such as a sequence number) with the sender's private key. Though anyone may decrypt the signature using the public key, only the signer knows the private key. This means that only they may have signed it. Including the digest in the signature means the signature is only good for that message; it also ensures the integrity of the message since no one can change the digest and still sign it.</p> <p>To guard against interception and reuse of the signature by an intruder at a later date, the signature contains a unique sequence number. This protects the bank from a fraudulent claim from Alice that she did not send the message \u2014 only she could have signed it (non-repudiation).</p>","location":"web/tlsOverview/#digital-signatures"},{"title":"Certificates","text":"<p>Although Alice could have sent a private message to the bank, signed it, and ensured the integrity of the message, she still needs to be sure that she is really communicating with the bank. This means that she needs to be sure that the public key she is using corresponds to the bank's private key. Similarly, the bank also needs to verify that the message signature really corresponds to Alice's signature.</p> <p>If each party has a certificate which validates the other's identity, confirms the public key, and is signed by a trusted agency, then they both will be assured that they are communicating with whom they think they are. Such a trusted agency is called a Certificate Authority, and certificates are used for authentication.</p>","location":"web/tlsOverview/#certificates"},{"title":"Certificate Contents","text":"<p>A certificate associates a public key with the real identity of an individual, server, or other entity, known as the subject. As shown in Table 1, information about the subject includes identifying information (the distinguished name), and the public key. It also includes the identification and signature of the Certificate Authority that issued the certificate, and the period of time during which the certificate is valid. It may have additional information (or extensions) as well as administrative information for the Certificate Authority's use, such as a serial number.</p> <p></p>","location":"web/tlsOverview/#certificate-contents"},{"title":"Table 1: Certificate Information","text":"Item Description     Subject Distinguished Name, Public Key   Issuer Distinguished Name, Signature   Period of Validity Not Before Date, Not After Date   Administrative Information Version, Serial Number   Extended Information Basic Constraints, Netscape Flags, etc.    <p>A distinguished name is used to provide an identity in a specific context \u2014 for instance, an individual might have a personal certificate as well as one for their identity as an employee. Distinguished names are defined by the X.509 standard, which defines the fields, field names, and abbreviations used to refer to the fields (see Table 2).</p> <p></p>","location":"web/tlsOverview/#table-1-certificate-information"},{"title":"Table 2: Distinguished Name Information","text":"DN Field Abbrev. Description Example     Common Name CN Name being certified CN=Joe Average   Organization or Company O Name is associated with this organization O=Snake Oil, Ltd.   Organizational Unit OU Name is associated with this organization unit, such as a department OU=Research Institute   City/Locality L Name is located in this City L=Snake City   State/Province ST Name is located in this State/Province ST=Desert   Country C Name is located in this Country (ISO code) C=XZ    <p>A Certificate Authority may define a policy specifying which distinguished field names are optional, and which are required. It may also place requirements upon the field contents, as may users of certificates. As an example, a Netscape browser requires that the Common Name for a certificate representing a server has a name which matches a wildcard pattern for the domain name of that server, such as <code>*.snakeoil.com</code></p> <p>The binary format of a certificate is defined using the ASN.1 notation. This notation defines how to specify the contents, and encoding rules define how this information is translated into binary form. The binary encoding of the certificate is defined using Distinguished Encoding Rules (DER), which are based on the more general Basic Encoding Rules (BER). For those transmissions which cannot handle binary, the binary form may be translated into an ASCII form by using Base64 encoding. This encoded version is called PEM encoded (the name comes from \"Privacy Enhanced Mail\"), when placed between begin and end delimiter lines as illustrated in the following example.</p>","location":"web/tlsOverview/#table-2-distinguished-name-information"},{"title":"Example of a PEM-encoded certificate (snakeoil.crt)","text":"<pre><code>-----BEGIN CERTIFICATE-----\nMIIC7jCCAlegAwIBAgIBATANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCWFkx\nFTATBgNVBAgTDFNuYWtlIERlc2VydDETMBEGA1PEBxMKU25ha2UgVG93bjEXMBUG\nA1UEChMOU25ha2UgT2lsLCBMdGQxHjAcBgNVBAsTFUNlcnRpZmljYXRlIEF1dGhv\ncml0eTEVMBMGA1UEAxMMU25ha2UgT2lsIENBMR4wHAYJKoZIhvcNAQkBFg9jYUBz\nbmFrZW9pbC5kb20wHhcNOTgxMDIxMDg1ODM2WhcNOTkxMDIxMDg1ODM2WjCBpzEL\nMAkGA1UEBhMCWFkxFTATBgNVBAgTDFNuYWtlIELlc2VydDETMBEGA1UEBxMKU25h\na2UgVG93bjEXMBAGA1UEChMOU25ha2UgT2lsLCBMdGQxFzAVBgNVBAsTDldlYnNl\ncnZlciBUZWFtMRkwFwYDVQQDExB3d3cuc25ha2VvaWwuZG9tMR8wHQYJKoZIhvcN\nAQkBFhB3d3dAc25ha2VvaWwuZG9tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\ngQDH9Ge/s2zcH+da+rPTx/DPRp3xGjHZ4GG6pCmvADIEtBtKBFAcZ64n+Dy7Np8b\nvKR+yy5DGQiijsH1D/j8HlGE+q4TZ8OFk7BNBFazHxFbYI4OKMiCxdKzdif1yfaa\nlWoANFlAzlSdbxeEVHoT0K+gT5w3UxwZKv2DLbETzLZyPwIDAQABoyYwJDAPBgNV\nHRMECDAGAQH/AgEAMBEGCWCGSAGG+EIBAQQEAwIAQDANBgkqhkiG9w0BAQQFAAOB\ngQAZUIHAL4D09oE6Lv2k56Gp38OBDuILvwLg1v1KL8mQR+KFjghCrtpqaztZqcDt\n2q2QoyulCgSzHbEGmi0EsdkPfg6mp0penssIFePYNI+/8u9HT4LuKMJX15hxBam7\ndUHzICxBVC1lnHyYGjDuAMhe396lYAn8bCld1/L4NMGBCQ==\n-----END CERTIFICATE-----\n</code></pre> <p></p>","location":"web/tlsOverview/#example-of-a-pem-encoded-certificate-snakeoilcrt"},{"title":"Certificate Authorities","text":"<p>By first verifying the information in a certificate request before granting the certificate, the Certificate Authority assures the identity of the private key owner of a key-pair. For instance, if Alice requests a personal certificate, the Certificate Authority must first make sure that Alice really is the person the certificate request claims.</p>","location":"web/tlsOverview/#certificate-authorities"},{"title":"Certificate Chains","text":"<p>A Certificate Authority may also issue a certificate for another Certificate Authority. When examining a certificate, Alice may need to examine the certificate of the issuer, for each parent Certificate Authority, until reaching one which she has confidence in. She may decide to trust only certificates with a limited chain of issuers, to reduce her risk of a \"bad\" certificate in the chain.</p>","location":"web/tlsOverview/#certificate-chains"},{"title":"Creating a Root-Level CA","text":"<p>As noted earlier, each certificate requires an issuer to assert the validity of the identity of the certificate subject, up to the top-level Certificate Authority (CA). This presents a problem: Since this is who vouches for the certificate of the top-level authority, which has no issuer? In this unique case, the certificate is \"self-signed\", so the issuer of the certificate is the same as the subject. As a result, one must exercise extra care in trusting a self-signed certificate. The wide publication of a public key by the root authority reduces the risk in trusting this key \u2014 it would be obvious if someone else publicized a key claiming to be the authority. Browsers are preconfigured to trust well-known certificate authorities.</p> <p>A number of companies, such as Thawte and VeriSign have established themselves as Certificate Authorities. These companies provide the following services:</p> <ul> <li>Verifying certificate requests</li> <li>Processing certificate requests</li> <li>Issuing and managing certificates</li> </ul> <p>It is also possible to create your own Certificate Authority. Although risky in the Internet environment, it may be useful within an Intranet where the organization can easily verify the identities of individuals and servers.</p>","location":"web/tlsOverview/#creating-a-root-level-ca"},{"title":"Certificate Management","text":"<p>Establishing a Certificate Authority is a responsibility which requires a solid administrative, technical, and management framework. Certificate Authorities not only issue certificates, they also manage them \u2014 that is, they determine how long certificates are valid, they renew them, and they keep lists of certificates that have already been issued but are no longer valid (Certificate Revocation Lists, or CRLs). Say Alice is entitled to a certificate as an employee of a company. Say too, that the certificate needs to be revoked when Alice leaves the company. Since certificates are objects that get passed around, it is impossible to tell from the certificate alone that it has been revoked. When examining certificates for validity, therefore, it is necessary to contact the issuing Certificate Authority to check CRLs \u2014 this is not usually an automated part of the process.</p>","location":"web/tlsOverview/#certificate-management"},{"title":"Notes","text":"<p>If you use a Certificate Authority that is not configured into browsers by default, it is necessary to load the Certificate Authority certificate into the browser, enabling the browser to validate server certificates signed by that Certificate Authority. Doing so may be dangerous, since once loaded, the browser will accept all certificates signed by that Certificate Authority.</p> <p></p>","location":"web/tlsOverview/#notes"},{"title":"Transport Layer Security (TLS) Overview","text":"<p>The Transport Layer Security protocols designed to support a range of choices for specific algorithms used for cryptography, digests, and signatures. This allows algorithm selection for specific servers to be made based on legal, export or other concerns, and also enables the protocol to take advantage of new algorithms. Choices are negotiated between client and server at the start of establishing a protocol session.</p> <p></p>","location":"web/tlsOverview/#transport-layer-security-tls-overview_1"},{"title":"Table 4: Versions of the TLS protocol","text":"Version         Source         Description                 TLS v2.0         Expired         First TLS protocol for which implementations exists               TLS v3.0         Expired         Revisions to prevent specific security attacks, add non-RSA ciphers,         and support for certificate chains               TLS v1.0         Internet Standard         TLSv1.0 is a revision of TLS 3.0 to update the MAC layer to HMAC,         add block padding for block ciphers, message order standardization         and more alert messages.               TLS v1.1         Internet Standard         TLSv1.1 adds protection against Cipher block chaining attacks.               TLS v1.2         Internet Standard         TLSv1.2 deprecates using MD5 as a hash and deprecates TLSv2.               TLS v1.3         Internet Standard         TLSv1.3 improves performance and fast connection startup.   <p>There are a number of versions of the TLS protocol, as shown in Table 4. As noted there, one of the benefits in TLS 3.0 is that it adds support of certificate chain loading. This feature allows a server to pass a server certificate along with issuer certificates to the browser. Chain loading also permits the browser to validate the server certificate, even if Certificate Authority certificates are not installed for the intermediate issuers, since they are included in the certificate chain. TLS 3.0 is the basis for the Transport Layer Security protocol standard, currently in development by the Internet Engineering Task Force (IETF).</p>","location":"web/tlsOverview/#table-4-versions-of-the-tls-protocol"},{"title":"Session Establishment","text":"<p>The TLS session is established by following a handshake sequence between client and server. This sequence may vary, depending on whether the server is configured to provide a server certificate or request a client certificate. Though cases exist where additional handshake steps are required for management of cipher information, this article summarizes one common scenario: see the TLS specification for the full range of possibilities.</p>","location":"web/tlsOverview/#session-establishment"},{"title":"Note","text":"<p>Once an TLS session has been established it may be reused, thus avoiding the performance penalty of repeating the many steps needed to start a session. For this the server assigns each TLS session a unique session identifier which is cached in the server and which the client can use on forthcoming connections to reduce the handshake (until the session identifier expires in the cache of the server).</p> <p>The elements of the handshake sequence, as used by the client and server, are listed below:</p> <ol> <li>Negotiate the Cipher Suite to be used during data transfer</li> <li>Establish and share a session key between client and server</li> <li>Optionally authenticate the server to the client</li> <li>Optionally authenticate the client to the server</li> </ol> <p>The first step, Cipher Suite Negotiation, allows the client and server to choose a Cipher Suite supportable by both of them. The TLS3.0 protocol specification defines 31 Cipher Suites. A Cipher Suite is defined by the following components:</p> <ul> <li>Key Exchange Method</li> <li>Cipher for Data Transfer</li> <li>Message Digest for creating the Message Authentication Code (MAC)</li> </ul> <p>These three elements are described in the sections that follow.</p>","location":"web/tlsOverview/#note"},{"title":"Key Exchange Method","text":"<p>The key exchange method defines how the shared secret symmetric cryptography key used for application data transfer will be agreed upon by client and server. TLS 2.0 uses RSA key exchange only, while TLS 3.0 supports a choice of key exchange algorithms including the RSA key exchange when certificates are used, and Diffie-Hellman key exchange for exchanging keys without certificates and without prior communication between client and server.</p> <p>One variable in the choice of key exchange methods is digital signatures \u2014 whether or not to use them, and if so, what kind of signatures to use. Signing with a private key provides assurance against a man-in-the-middle-attack during the information exchange used in generating the shared key.</p>","location":"web/tlsOverview/#key-exchange-method"},{"title":"Cipher for Data Transfer","text":"<p>TLS uses the conventional cryptography algorithm (symmetric cryptography) described earlier for encrypting messages in a session. There are nine choices, including the choice to perform no encryption:</p> <ul> <li>No encryption</li> <li>Stream Ciphers</li> <li>RC4 with 40-bit keys</li> <li>RC4 with 128-bit keys</li> <li>CBC Block Ciphers<ul> <li>RC2 with 40 bit key</li> <li>DES with 40 bit key</li> <li>DES with 56 bit key</li> <li>Triple-DES with 168 bit key</li> <li>Idea (128 bit key)</li> <li>Fortezza (96 bit key)</li> </ul> </li> </ul> <p>Here \"CBC\" refers to Cipher Block Chaining, which means that a portion of the previously encrypted cipher text is used in the encryption of the current block. \"DES\" refers to the Data Encryption Standard, which has a number of variants (including DES40 and 3DES_EDE). \"Idea\" is one of the best and cryptographically strongest available algorithms, and \"RC2\" is a proprietary algorithm from RSA DSI.</p> <p>Digest Function The choice of digest function determines how a digest is created from a record unit. TLS supports the following: * No digest (Null choice) * MD5, a 128-bit hash (deprecated in TLS/1.2) * Secure Hash Algorithm (SHA-1), a 160-bit hash</p> <p>The message digest is used to create a Message Authentication Code (MAC) which is encrypted with the message to provide integrity and to prevent against replay attacks.</p>","location":"web/tlsOverview/#cipher-for-data-transfer"},{"title":"Handshake Sequence Protocol","text":"<p>The handshake sequence uses three protocols: * The TLS Handshake Protocol for performing the client and server TLS session establishment. * The TLS Change Cipher Spec Protocol for actually establishing agreement on the Cipher Suite for the session. * The TLS Alert Protocol for conveying TLS error messages between client and server.</p> <p>These protocols, as well as application protocol data, are encapsulated in the TLS Record Protocol. An encapsulated protocol is transferred as data by the lower layer protocol, which does not examine the data. The encapsulated protocol has no knowledge of the underlying protocol.</p> <p>The encapsulation of TLS control protocols by the record protocol means that if an active session is renegotiated the control protocols will be transmitted securely. If there were no session before, then the Null cipher suite is used, which means there is no encryption and messages have no integrity digests until the session has been established.</p>","location":"web/tlsOverview/#handshake-sequence-protocol"},{"title":"Data Transfer","text":"<p>The TLS Record Protocol is used to transfer application and TLS Control data between the client and server, possibly fragmenting this data into smaller units, or combining multiple higher level protocol data messages into single units. It may compress, attach digest signatures, and encrypt these units before transmitting them using the underlying reliable transport protocol (Note: currently all major TLS implementations lack support for compression).</p>","location":"web/tlsOverview/#data-transfer"},{"title":"Securing HTTP Communication","text":"<p>One common use of TLS is to secure Web HTTP communication between a browser and a web server. This case does not preclude the use of non-secured HTTP. The secure version is mainly plain HTTP over TLS (named HTTPS), but with one major difference: it uses the URL scheme <code>https</code> rather than <code>http</code> and a different server port (by default 443).</p>","location":"web/tlsOverview/#securing-http-communication"},{"title":"File Upload","text":"<p>Ioto has an integrated file upload filter that accepts and processes file upload requests.</p> <p>The Ioto upload filter intercepts uploaded files, saves them to disk and passes details about the uploaded file to Ioto Action routines for processing.</p> <p>File upload uses multi-part mime encoding to transport files over HTTP POST requests. This is specified in the IETF standard RFC 2388.</p> <p></p>","location":"web/uploading/"},{"title":"Overview","text":"<p>Because uploaded files can be very large, Ioto uses specialized handling for the receipt, storage and processing of uploaded files. When an upload request is received, Ioto will accept and store the uploaded file before starting the Action routine to respond to the request. The Action routine does not directly receive the uploaded file. Rather, Ioto passes the name of the temporary file holding the uploaded file. Ioto expects that the Action routine will process, copy or move the temporary file before completing the request. Once complete, Ioto will remove any remaining upload temporary files.</p> <p></p>","location":"web/uploading/#overview"},{"title":"Ioto Upload Configuration","text":"<p>There are two web.json5 configuration properties that control the upload filter. * upload.dir \u2014 This specifies directory to receive uploaded files. * upload.remove \u2014 This specifies if the uploaded files should be automatically removed from the upload directory after the action routine has completed processing the request.</p> <p></p>","location":"web/uploading/#ioto-upload-configuration"},{"title":"Upload File Details","text":"<p>Once a file is uploaded, the Action routine responsible for processing the request will receive details about uploaded files via the request parameters.</p> <p>Ioto provides direct access to the uploaded files structure. Each uploaded file is described by a WebUpload structure.</p> <p>These structures are stored in an RHash table indexed by their HTML file upload ID.</p> <p>The WebUpload structure is defined as:</p> <pre><code>typedef struct WebUpload {\n    char *filename;       /**&lt; Local (temp) name of the file */\n    char *clientFilename; /**&lt; Client side name of the file */\n    char *contentType;    /**&lt; Content type */\n    char *name;           /**&lt; Symbolic name for the upload supplied by the client */\n    ssize size;           /**&lt; Uploaded file size */\n    int fd;               /**&lt; File descriptor used while writing the upload content */\n} WebUpload;\n</code></pre> <p>You can access uploaded files via:</p> <pre><code>WebUpload  *file;\ncchar      *name;\n\nfor (ITERATE_NAME_DATA(web-&gt;files, name, file)) {\n    webWriteFmt(web, \"FILENAME %s\\n\", file-&gt;filename);\n    webWriteFmt(web, \"CLIENT_NAME %s\\n\", file-&gt;clientFilename);\n    webWriteFmt(web, \"TYPE %s\\n\", file-&gt;contentType);\n    webWriteFmt(web, \"SIZE %d\\n\", file-&gt;size);\n}\n</code></pre> <p></p>","location":"web/uploading/#upload-file-details"},{"title":"Alternative Upload Technique","text":"<p>File upload using POST requests is one way to upload files. Another is to use the HTTP PUT method. This uploads a file without encoding and can offer higher performance. The HTTP DELETE method can then be used to delete files from the server.</p>","location":"web/uploading/#alternative-upload-technique"}]}